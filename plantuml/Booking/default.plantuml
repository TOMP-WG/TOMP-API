@startuml Default booking
title Planning Scenario 'default booking' - V1.0.0
participant MP
participant TO

autoactivate on

note over TO
**ProcessIdentifiers**: DEFAULT and ACCESS_CODE_BY_TO.
Add one of these to specify the moment of supplying the 
access code (if applicable):
 ACCESS_CODE_IN_BOOKING,
 ACCESS_CODE_IN_COMMIT_EVENT or 
 ACCESS_CODE_IN_PREPARE_EVENT (trip exec module).

One of these access code moments must be accompanied
by ACCESS_CODE_QR, ACCESS_CODE_PDF, ACCESS_CODE_TOKEN, 
ACCESS_CODE_LINK, ACCESS_CODE_TICKETSTOCK.

At last, to provide direct planning-booking-unlocking 
you must add ATOMIC_BOKKING_UNLOCKING.
end note

MP -> TO : POST /booking/ \nMUST be directly executed in\ncase of ATOMIC_PLANNING_AND_BOOKING
note over TO
The TO recalls the persisted leg in 
the offer by taking the ID from the body 
of this request. The TO reservates the 
asset from the planning __OR__ reserves and 
assignes an asset to the leg __OR__ postpones
this assignment until the execution module.
end note
return booking in PENDING state\nIn case of ACCESS_CODE_IN_BOOKING\nit must contain access information

note over MP
The MP has to book all the legs of the trip.
If all reply with a booking in PENDING state,
he can continue COMMITting the bookings
end note

MP -> TO: POST /booking/{id}/events { "operation": "COMMIT" }
return booking in CONFIRMED state\nIn case of ACCESS_CODE_IN_COMMIT_EVENT\nit must contain access information

== trip execution ==
@enduml
