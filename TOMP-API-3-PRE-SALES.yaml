openapi: 3.1.0
info:
  title: Transport Operator MaaS Provider API
  description: "<h2>Context</h2>
    <p>This API allows technical communication between Transport Operators (TO) and MaaS providers (MP, and other resellers), to fulfill a complete MaaS user journey<br>
    For more information: <a href='https://github.com/TOMP-WG/TOMP-API/wiki/OpenAPI-entry-page'>TOMP-API wiki</a>, and <a href='https://github.com/TOMP-WG/TOMP-API/wiki/OpenAPI-code-convention'>Coding conventions</a>"
  version: "2.0.0"
  contact:
    name: TOMP working group
    url: https://github.com/TOMP-WG/TOMP-API
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: pre sales
    description: Module that can be used 'pre-sales'; in the pre-purchase state. Calling one of these endpoints,
      will put the package in a pre-purchased state (might reserve resources). The package must be released 
      (when the intention of purchasing it is removed) or it expires. 
      The result of each of these endpoints (except for the release) must contain an expiry date in the header.

paths:
  /processes/{travellerOperation}-traveller/execute/:
    post:
      operationId: travellerOperationRequest
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
        - $ref: "#/components/parameters/travellerOperation"
      tags:
        - pre sales
      requestBody:
        description: -|
          The `input` of the process request body must be of type '#/components/schemas/travellerInput'
        $ref: "TOMP-API-1-CORE.yaml#/components/requestBodies/processRequestBody"
      responses:
        "200":
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/packageResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"

  /processes/change-times-package/execute/:
    post:
      operationId: changeTimesPackageRequest
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
      tags:
        - pre sales
      requestBody:
        description: -|
          The `input` of the process request body must be of type '#/components/schemas/changeTimesInput'
        $ref: "TOMP-API-1-CORE.yaml#/components/requestBodies/processRequestBody"
      responses:
        "200":
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/packageResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"
  /processes/change-times-leg/execute/:
    post:
      operationId: changeTimesLegRequest
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
      tags:
        - pre sales
      requestBody:
        description: -|
          The `input` of the process request body must be of type '#/components/schemas/changeTimesInput'
        $ref: "TOMP-API-1-CORE.yaml#/components/requestBodies/processRequestBody"
      responses:
        "200":
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/packageResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"

  /collections/products/items:
    get:
      operationId: requestProducts
      summary: "Request the product catalogue, filter on a single parameter or package"
      parameters:
        - name: parameter
          in: query
          description: a single parameter
          schema: 
            $ref: "TOMP-API-1-CORE.yaml#/components/schemas/parameter"
          style: form
          explode: true
          example: 
            type: SERVICE
            class: FIRST
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/optionalPackageId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/limit"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/offset"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/bbox"                   
      tags:
        - pre sales
      responses:
        "200":
          $ref: "#/components/responses/productsResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"

  /collections/fares/items:
    get:
      operationId: requestFares
      summary: "Request the fare for a specific product, times, OD, a traveller 
        and/or parameters"
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/limit"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/offset"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/bbox"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/productId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/traveller"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/parameter"
      tags:
        - pre sales
      responses:
        "200":
          $ref: "#/components/responses/fareResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"

  /processes/{productOperation}-product/execute/:
    post:
      operationId: productOperationRequest
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
        - $ref: "#/components/parameters/productOperation"
      tags:
        - pre sales
      requestBody:
        description: -|
          The `input` of the process request body must be of type '#/components/schemas/productInput'
        $ref: "TOMP-API-1-CORE.yaml#/components/requestBodies/processRequestBody"
      responses:
        "200":
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/packageResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"

  /collections/assets/items:
    get:
      operationId: requestAssets
      summary: "Request the assets available for a leg"
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/limit"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/offset"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/bbox"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/packageId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/legId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/optionalProductId"
      tags:
        - pre sales
      responses:
        "200":
          $ref: "#/components/responses/assetsResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"
  /processes/assign-asset/execute/:
    post:
      operationId: assignAssetRequest
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
      tags:
        - pre sales
      requestBody:
        description: -|
          The `input` of the process request body must be of type '#/components/schemas/assignAssetInput'
        $ref: "TOMP-API-1-CORE.yaml#/components/requestBodies/processRequestBody"
      responses:
        "200":
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/packageResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"

  /collections/ancillaries/items:
    get:
      operationId: requestAncillaries
      summary: "Request the ancillaries available for a leg"
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/limit"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/offset"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/bbox"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/packageId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/legId"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/optionalProductId"
      tags:
        - pre sales
      responses:
        "200":
          $ref: "#/components/responses/assetsResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"
  /processes/assign-ancillary/execute/:
    post:
      operationId: assignAncillaryRequest
      parameters:
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/acceptLanguage"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/authorization"
        - $ref: "TOMP-API-1-CORE.yaml#/components/parameters/receiverId"
      tags:
        - pre sales
      requestBody:
        description: -|
          The `input` of the process request body must be of type '#/components/schemas/ancillaryInput'
        $ref: "TOMP-API-1-CORE.yaml#/components/requestBodies/processRequestBody"
      responses:
        "200":
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/packageResponse"
        default:
          $ref: "TOMP-API-1-CORE.yaml#/components/responses/errorResponse"          

  # /processes/update-customer/execute/ => customer registration module
  # /processes/release-offer/execute/ => purchase module

components:
  responses:
    productsResponse:
      description: a list of products
      headers:
        Version:
          $ref: "TOMP-API-1-CORE.yaml#/components/headers/version"
        Content-Language:
          $ref: "TOMP-API-1-CORE.yaml#/components/headers/contentLanguage"
        Expires:
          schema:
            $ref: "TOMP-API-1-CORE.yaml#/components/schemas/httpDate"
          required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/productsResponseBody"

    fareResponse:
      description: a list of fares for a specific product and usage
      headers:
        Version:
          $ref: "TOMP-API-1-CORE.yaml#/components/headers/version"
        Content-Language:
          $ref: "TOMP-API-1-CORE.yaml#/components/headers/contentLanguage"
        Expires:
          schema:
            $ref: "TOMP-API-1-CORE.yaml#/components/schemas/httpDate"
          required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/fareResponseBody"

    assetsResponse:
      description: a list of assets
      headers:
        Version:
          $ref: "TOMP-API-1-CORE.yaml#/components/headers/version"
        Content-Language:
          $ref: "TOMP-API-1-CORE.yaml#/components/headers/contentLanguage"
        Expires:
          schema:
            $ref: "TOMP-API-1-CORE.yaml#/components/schemas/httpDate"
          required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/assetsResponseBody"

    ancillaryResponse:
      description: a list of ancillaries
      headers:
        Version:
          $ref: "TOMP-API-1-CORE.yaml#/components/headers/version"
        Content-Language:
          $ref: "TOMP-API-1-CORE.yaml#/components/headers/contentLanguage"
        Expires:
          schema:
            $ref: "TOMP-API-1-CORE.yaml#/components/schemas/httpDate"
          required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ancillaryResponseBody"

  schemas:
    productsResponseBody:
      description: a list of products. The main 'properties' field must be of type 'products'
        each feature-properties field must be of type 'product'. The geometry must represent the
        geographical validity parameter (=area where it can be used)
      allOf:
      - $ref: "TOMP-API-1-CORE.yaml#/components/schemas/geojson"

    fareResponseBody:
      description: a list of products. The main 'properties' field must be of type 'fares'
        each feature-properties field must be of type 'product'. The 'fare' field within the product is mandatory.
        The geometry must represent the geographical validity parameter (=area where it can be used).
      allOf:
      - $ref: "TOMP-API-1-CORE.yaml#/components/schemas/geojson"

    assetsResponseBody:
      description: a list of assets. The main 'properties' field must be of type 'offers' (#/components/schemas/offerProperties),
        each feature-properties field must be of type 'asset'.
      $ref: "TOMP-API-1-CORE.yaml#/components/schemas/geojson"

    ancillaryResponseBody:
      description: a list of assets. The main 'properties' field must be of type 'offers' (#/components/schemas/offerProperties),
        each feature-properties field must be of type 'ancillary'. 
        The geometry-field within the features can be ignored (OGC API Records)
      $ref: "TOMP-API-1-CORE.yaml#/components/schemas/geojson"

  parameters:
    travellerOperation:
      name: operation
      in: path
      description: OPERATION to execute
      required: true
      schema:
        type: string
        enum: [add, remove, update]

    productOperation:
      name: operation
      in: path
      description: OPERATION to execute
      required: true
      schema:
        type: string
        enum: [add, remove]
