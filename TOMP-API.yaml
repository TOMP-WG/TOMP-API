openapi: 3.0.0
info:
  title: Transport Operator MaaS Provider API
  description:
    "The API between Transport Operators (TO) and MaaS providers (MP, and other resellers). Providing functions for Booking, Trip Execution, Support, Payment and Operation Information."
  version: "2.0.0"
  contact:
    url: https://github.com/TOMP-WG/TOMP-API
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: booking
    description: The `booking module` contains functionality to request offers, book them or create bookings directly based on external information. Allows also to cancel or commit a non-final booking.

  - name: trip execution
    description: The `trip execution module` contains functionality to execute the booked leg(s). Operations like starting, pausing and ending, but also functions like adding/removing ancillaries.

  - name: support
    description: the `support module` facilitates handling support requests

  - name: payment
    description: the `payment module` allows to request a financial transaction and report costs

  - name: operator information
    description: This `operator module` contains technical information about the implementation and an endpoint to check the uptime.

# security. Allowed methods basic (in header: Authorization: Basic ZGVtbzpwQDU1dzByZA==),
#                           bearer (in header: Authorization: Bearer <token>)
#                           Api-key (in header: X-API-Key: abcdef12345)
#                           OAuth2 and OpenId are also available
# The exact ways to authenticate will be described in a later version
security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []
  - OAuth: []
  - OpenId: []

servers:
  - url: https://tomp.dat.nl/

paths:
  /offers:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    post:
      summary: "[MP->TO] return travel offers from A to B"
      description: Returns offers (bookable trips) based on user requirements
      tags:
        - booking
      requestBody:
        description: the initial request, containing locations, timestamps, card/license types, and personal preferences/(dis)abilities. Can also contain a direct reference to an asset or asset type.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/travelRequest"
      responses:
        "201":
          description: a list of bookable trips, if there is no option, it will return an empty list. Each bookable trip has a unique identifier, that can be used to book it.
          headers:
            Expires:
              description: The result is valid until this timestamp. The pending booking is expired after this timestamp. 
              schema:
                description: A HTTP date string 
                externalDocs:
                  url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
                type: string
                format: http-date
                example: Wed, 21 Oct 2015 07:28:00 GMT
              required: false
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/travelOptionsResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - name: id
        in: path
        description: Trip option identifier, delivered by the trips endpoint
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
    post:
      summary: "[MP->TO] book offered travel for customer"
      description: The offered trip is transformed into a booked trip. Dependend of the process identifiers (`AUTO_COMMIT` or `ATOMIC_BOOKING_SET_IN_USE`) the booking is PENDING (to be committed using the COMMIT operation) or CONFIRMED.
      tags:
        - booking
      requestBody:
        description: One of available booking options, returned by /trips, with an ID.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bookingRequest"

      responses:
        "201":
          description: A new booking was succesfully created, status pending
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookingResponse"
          headers:
            Expires:
              description: The result is valid until this timestamp (and must be COMMITted unless it is already in state CONFIRMED). A pending booking is expired after this timestamp.
              schema:
                description: A HTTP date string
                externalDocs:
                  url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
                type: string
                format: date-time
                example: Wed, 21 Oct 2015 07:28:00 GMT
              required: false
        default:
          $ref: "#/components/responses/errorResponse"
        "409":
          $ref: "#/components/responses/409Conflict"
        "410":
          $ref: "#/components/responses/410Gone"
    get:
      summary: "[MP->TO] give booking details"
      description: Retrieves booking, including the log of this booking (all legs)
      tags:
        - trip execution        
      responses:
        "200":
          description: the details of this booking, includign the log containing all events.
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/bookingResponse"
                - type: object
                  properties:
                    log:
                      type: array
                      maxItems: 100
                      items:
                        $ref: "#/components/schemas/logEntry"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/one-stop:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    post:
      summary: "[MP->TO] directly book a travel with this asset(type)"
      description:
        Returns a booking for the given travel plan. This endpoint executes POST /trips and POST /trips/{id} in one blow, the information provided should lead 
        to only one possible trip, that is booked directly. The returned booking is still in `PENDING` state, you have to commit it. Unless 'AUTO_COMMIT' process identifier
        is applied. In that case the booking is in state 'CONFIRMED'.
      tags:
        - booking
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/oneStopBookingRequest"
      responses:
        "201":
          description: A single booking, or when it's not possible, return a 406.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookingResponse"
          headers:
            Expires:
              description: The result is valid until this timestamp. The pending booking is expired after this timestamp. 
              schema:
                description: A HTTP date string, see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
                type: string
                format: http-date
                example: Wed, 21 Oct 2015 07:28:00 GMT
              required: false
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/operations/{operation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - name: id
        in: path
        description: Booking identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: operation
        in: path
        description: operation to execute
        required: true
        schema:
          type: string
          enum: [ 
            CANCEL, 
            DENY, 
            COMMIT, 
            EXTEND_EXPIRY_TIME
          ]
    post:
      summary: "[MP->TO] request {operation} on this booking"
      description: This endpoint **must** be used to alter the state of a booking:<br>
        `CANCEL` - Cancels a confirmed booking.<br> 
        `EXTEND_EXPIRY_TIME` - the MP request to extend the expiry time of the booking. Only available when the Process Identifier 'ALLOW_EXTEND_BOOKING_EXPIRY_TIME' is used. Whenever the extension is not granted, 410 should be returned.<br> 
        `COMMIT` - Turns the booking in a confirmed state, after all legs are in state pending. If the booking is in state CONFIRMED, CANCELLED or EXPIRED, a commit will result a 403. <BR> 
        `DENY` - Used for the 'postponed-commit' scenario. Whenever a TO cannot give guarantees directly to fulfil a booking, it can return a 'COMMIT', but the state of the booking object should be 'POSTPONED-COMMIT'. In the conditions returned in the planning phase is stated until when this phase can be. After this time it will become expired. Otherwise, it can be committed when the leg is confirmed or denied (using this operation).
      tags:
        - booking        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationRequest"
      responses:
        "200":
          description: The modified booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookingResponse"
          headers:
            Expires:
              description: Mandatory whenever the EXTEND_EXPIRY_TIME is used. It must contain the updated expiry time
              schema:
                description: A HTTP date string
                externalDocs:
                  url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
                type: string
                format: http-date
                example: Wed, 21 Oct 2015 07:28:00 GMT
              required: false
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - name: id
        in: path
        description: Booking identifier 
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: lid
        in: path
        description: Leg identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
    get:
      summary: "[MP->TO] give leg details"
      description: Retrieves the latest summary of the leg, being the execution of a portion of a journey travelled using one asset (type). 
        Every leg belongs to one booking, every booking has at least one leg. Where the booking describes the agreement between user/MP and TO, 
        the leg describes the journey as it occured.
      tags:
        - trip execution        
      responses:
        "200":
          description: operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legResponse"
        default:
          $ref: "#/components/responses/errorResponse"
          
  /bookings/{id}/legs/{lid}/operations/{operation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - name: id
        in: path
        description: Booking identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: lid
        in: path
        description: Leg identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: operation
        in: path
        description: Operation on the leg
        required: true
        schema:
          type: string
          enum: [
            PREPARE,
            ASSIGN_ASSET,
            SET_IN_USE,
            PAUSE,
            OPEN_TRUNK,
            START_FINISHING,
            FINISH,
            TIME_EXTEND,
            TIME_POSTPONE,
            CANCEL
          ]
    post:
      summary: "[MP->TO] request {operation} on this leg"
      description: This endpoint must be used to alter the state of a leg.<br>
        Operations:<br> `PREPARE` the TO can send a message telling the MP that he is preparing the booked leg,<br>
        `ASSIGN_ASSET` can assign an asset to a leg. Can be used to replace an asset, or as first step in the trip execution process, <br>
        `SET_IN_USE` will activate the leg or resume the leg,<br>
        `TIME_EXTEND` will be used to request an extension in time; the end user wants to use the asset longer, the `time` field contains the proposed end time,<br>
        `TIME_POSTPONE` will be used to request a delay in the departure time, the end user wants to depart later, the `time` field contains the estimated departure time,<br>
        `PAUSE` will pause the leg,<br>
        `OPEN_TRUNK` request the TO to open up the trunk (of the scooter), e.g. to store the helmet<br>
        `START_FINISHING` will start the end-of-leg,<br>
        `FINISH` will end this leg
        `CANCEL` will cancel this leg. Only allowed when multiple legs are included in the booking.
      tags:
        - trip execution        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationRequest"
      responses:
        "200":
          description: operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legResponse"
        "204":
          $ref: "#/components/responses/204NoContent"
        default:
          $ref: "#/components/responses/errorResponse"
        "503":
          description: In case of temporary malfunctioning, this response can be send (e.g. bluetooth lock jammed). See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
          headers:
            Retry-After:
              description: A date after which to retry. See the Date header for more details on the HTTP date format.
              schema:
                type: string
                format: http-date
                example: Wed, 21 Oct 2015 07:28:00 GMT
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}/available-assets:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - name: id
        in: path
        description: Booking identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: lid
        in: path
        description: Leg identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
    get:
      summary: "[MP->TO] give possible assets to assign to this leg"
      description: Returns a list of available assets for the given leg. These assets can be used to POST to /bookings/{id}/legs/{lid}/operations/ASSIGN_ASSET if no specific asset is assigned by the TO. If picking an asset is not allowed for this booking, or one already has been, 403 should be returned. If the booking is unknown, 404 should be returned.
      tags:
        - trip execution        
      responses:
        "200":
          description: Available assets for the leg. If no suitable assets are found an empty array is to be returned.
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/availableVehicleResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}/ancillaries/{category}/{number}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - name: id
        in: path
        description: Booking identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: lid
        in: path
        description: Leg identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: category
        in: path
        description: ancillary category
        required: true
        schema:
          type: string
          maxLength: 2
          pattern: "[A-Z]{2,3}"
      - name: number
        in: path
        description: ancillary number
        required: true
        schema:
          type: string
          maxLength: 2
          pattern: "[0-9]{2}"
    post:
      summary: "[MP->TO] add this ancillary to the leg"
      description: a new ancillary is added to the leg.
      tags:
        - trip execution        
      responses:
        "200":
          description: operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legResponse"
        "204":
          $ref: "#/components/responses/204NoContent"
        default:
          $ref: "#/components/responses/errorResponse"
    delete:
      summary: "[MP->TO] remove this ancillary to the leg"
      description: an ancillary (or amount) is removed to the leg.
      tags:
        - trip execution
      responses:
        "200":
          description: operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legResponse"
        "204":
          $ref: "#/components/responses/204NoContent"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}/notifications:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - name: id
        in: path
        description: Booking identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: lid
        in: path
        description: Leg identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
    post:
      summary: "[MP<->TO] send notification between MP (app), user, and driver"
      description: "[MP|TO] notification between MaaS provider and Transport operator in case of user no-show or if specific asset is not available or some other event occurs not covered by other API calls."
      tags:
        - trip execution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notification"
      responses:
        "204":
          $ref: "#/components/responses/204NoContent"
        default:
          $ref: "#/components/responses/errorResponse"
          
  /bookings/{id}/legs/{lid}/confirmation/{action}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - name: id
        in: path
        description: Booking identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: lid
        in: path
        description: Leg identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: action
        in: path
        description: action to confirm
        required: true
        schema:
          type: string
          enum: [ 
            REPLACE_VEHICLE, 
            START_LEG 
          ]
    post:
      summary: "[TO->MP] confirm {action} on this leg"
      description: "[MP] The TO can request confirmation for certain actions from the MP."
      tags:
        - trip execution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/confirmationRequest"
      responses:
        "200":
          description: operation successful
          content:
            application/json:
              schema:
                type: boolean
        default:
          $ref: "#/components/responses/errorResponse"

  /discovery:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    get:
      tags:
        - operator information
      summary: "[TO<->MP] discover the API"
      description: "[MP|TO] All versions that are implemented on this url, are described in the result of this endpoint. In contains all versions and per version the endpoints, their status
        and the supported scenarios."
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/serviceDescription"
        default:
          $ref: "#/components/responses/errorResponse"

  /ping:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
    get:
      tags:
        - operator information
      summary: "[TO<->MP] is the API available?"
      description: "[MP|TO] This is a healthcheck endpoint to see if the TO is up and running perfectly."
      responses:
        "204":
          description: successful operation
        default:
          $ref: "#/components/responses/errorResponse"

  /journal-entries:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    get:
      tags:
        - payment
      summary: "[MP->TO] give all financial details"        
      description: Returns all the journal entries that should be paid per leg
      parameters:
        - name: from
          in: query
          description: start of the selection
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: end of the selection
          required: false
          schema:
            type: string
            format: date-time
        - name: state
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/journalState"
        - name: id
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/uuid"
        - name: category
          in: query
          description: type of booking line (e.g. fare, addition costs, fines, ...)
          required: false
          schema:
            $ref: "#/components/schemas/journalCategory"
        - name: offset
          in: query
          description: start of the selection
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
        - name: limit
          in: query
          description: count of the selection
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
      responses:
        "200":
          description: journal entries
          headers:
            Content-Language:
              description: The language/localization of user-facing content
              example: nl
              schema:
                type: string
                format: One IETF BCP 47 (RFC 5646) language tag
                pattern: "^[a-zA-Z]+-[a-zA-Z]+$"
              required: true
          content:
            application/json:
              schema:
                type: array
                maxItems: 1000
                items:
                  $ref: "#/components/schemas/journalEntry"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}/claim-costs:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    post:
      tags:
        - payment
      summary: "[MP<->TO] request additional financial transaction"
      description: "[MP|TO] (extra) costs that the TO has to charge to the MP or vice versa."
      parameters:
        - name: id
          in: path
          description: Booking identifier
          required: true
          schema:
            $ref: "#/components/schemas/uuid"
        - name: lid
          in: path
          description: Leg identifier
          required: true
          schema:
            $ref: "#/components/schemas/uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/extraCosts"

      responses:
        "200":
          description: journal entry received, will be processed (state = INVOICED)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/journalEntry"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}/support/:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - name: id
        in: path
        description: Booking identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
      - name: lid
        in: path
        description: Leg identifier
        required: true
        schema:
          $ref: "#/components/schemas/uuid"
    post:
      summary: "[MP->TO] create a support ticket"
      description: creates a request for support from end user via MP
      tags:
        - support        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/supportRequest"
      responses:
        "200":
          description: support request acknowledged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/supportTicket"
        default:
          $ref: "#/components/responses/errorResponse"
    get:
      summary: "[MP->TO] request for support ticket details"
      description: Gets the status report of the support request. Last status (highest order number) is the current status
      tags:
        - support        
      responses:
        "200":
          description: support status delivered
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/supportTicket"
        default:
          $ref: "#/components/responses/errorResponse"

components:
  schemas:
    address:
      type: object
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA5/EA319.htm
        description: POSTAL ADDRESS
      # addressLine1 -> AddressLine1
      ## addressLine2 -> 
      # street -> Street
      # houseNumber -> HouseNumber
      # houseNumberAddition -> HouseNumber
      # postalCode -> PostCode
      # city -> Town
      # province -> Province
      ## state -> 
      # country -> hosting COUNTRY.name
      description: street address, including number OR PO box number, eventually extended with internal reference like room number, could match Content-Language
      required:
        - addressLine1
        - addressLine2
      properties:
        addressLine1:
          type: string
          example: example street 18, 2nd floor, 18-B33
        addressLine2:
          description: city or town, principal subdivision such as province, state or county, could match Content-Language
          type: string
          example: Smallcity, Pinetree county

        street:
          type: string
          description: street, consistent with addressLine1
        houseNumber:
          type: number
          description: house number, consistent with addressLine1
          minimum: 1
        houseNumberAddition:
          type: string
          description: the additional part of the house number (f.x. 13bis, where 'bis' is the additional part), consistent with addressLine1
          
        postalCode:
          type: string
        city:
          type: string
          description: specified city or town, consistent with addressLine2

        province:
          type: string
          description: province or region, consistent with addressLine2
        state:
          type: string
          description: state, consistent with addressLine2
        country:
          $ref: "#/components/schemas/country"

        addressAdditionalInfo:
          type: string
          description: additional information to find the address (f.x. just around the corner)

    amountOfMoney:
      type: object
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA2/EA1688.htm
        description: FARE PRICE
      # amount => Amount
      # vatRate => TaxPercentageUsed
      ## currencyCode => ?
      ## vatCountryCode => ?
      properties:
        amount:
          description: This should be in the base unit as defined by the ISO 4217 currency code with the appropriate number of decimal places and omitting the currency symbol. e.g. if the price is in US Dollars the price would be 9.95. This is inclusive VAT
          type: number
          example: 9.95
          format: float
          minimum: 0
        taxPercentageUsed:
          type: number
          description: value added tax rate (percentage of amount)
          example: 21.0
          format: float
          minimum: 0
        currencyCode:
          $ref: "#/components/schemas/currencyCode"
        vatCountryCode:
          $ref: "#/components/schemas/country"

    asset:
      description: the asset that is applied to a leg.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3578.htm
        description: VEHICLE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA2/EA3719.htm (PARKING BAY)
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA3/EA1/EA3735.htm (CYCLE STORAGE EQUIPMENT)
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA3/EA2/EA3742.htm (VEHICLE CHARGING EQUIPMENT)
      allOf: 
      - $ref: "#/components/schemas/assetProperties"
      - type: object
        required:
          - id
        properties:
          id:
            type: string
            description: Identifier of an asset. Whenever used in Operator Information changed after every trip (GDPR).
          name:
            description: name of asset
            type: string
          visualId:
            type: string
            description: for instance, a license plate or seat number. The usage of this field requires a secure environment/connection.

          assetType:
            $ref: "#/components/schemas/assetType"            
          assetClass:
            $ref: "#/components/schemas/assetClass"
          assetSubClass:
            type: string
            description: a more precise classification of the asset, like 'cargo bike', 'public bus', 'coach bus', 'office bus', 'water taxi',  'segway'. This is mandatory when using 'OTHER' as class.
            externalDocs:
              url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA2/EA293.htm

          state:
            $ref: "#/components/schemas/assetState"
          ecoDetails:
            $ref: "#/components/schemas/assetPropertiesEco"
          cargoDetails:
            $ref: "#/components/schemas/assetPropertiesCargo"

          accessData:
            description: Array of data to open a specific asset (e.g. QR code, image base64)
            $ref: "#/components/schemas/fulfillmentArray"

    assetClass:
      type: string
      description: These classes are taken from the NeTeX standard, but ALL and UNKNOWN are removed. On the other hand OTHER and PARKING are added.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA1/EA284.htm
        description: MODE
      enum: [
        AIR,
        BUS,
        TROLLEYBUS,
        TRAM,
        COACH,
        RAIL,
        INTERCITYRAIL,
        URBANRAIL,
        METRO,
        WATER,
        CABLEWAY,
        FUNICULAR,
        TAXI,
        SELFDRIVE,
        FOOT,
        BICYCLE,
        MOTORCYCLE,
        CAR,
        SHUTTLE,
        OTHER,
        PARKING,
        MOPED,
        STEP,
        FERRY
      ]

    assetType:
      type: string
      description: an URI/UUID/ID referencing an asset type. Look at endpoint.useAssetTypes for possibilities.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3580.htm
        description: TRANSPORT TYPE
      # or https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3581.htm (VEHICLE TYPE)

    assetProperties:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm 
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      allOf:
      - $ref: "#/components/schemas/assetPropertiesCar"
      - $ref: "#/components/schemas/assetPropertiesBike"
      - type: object
        description: Aspects of an asset. Most aspects are optional and should only be used when applicable.
        properties:
          description:
            type: string
          image:
            description: Link to an image of the asset
            type: string
            format: URI
            example: "https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg"
          icon:
            description: Link to an icon of the asset
            type: string
            format: URI

          brand:
            type: string
            description: brand of the asset
          model:
            type: string
          buildingYear:
            type: integer
          colour:
            type: string
            description: colour of the asset, should match Content-Language

          defaultReserveTime:
            type: integer
            minimum: 0
            description: Maximum time in minutes that an asset can be reserved before a rental begins. When an asset is reserved by a user, the asset remains locked until the rental begins. During this time the asset is unavailable and cannot be reserved or rented by other users. The asset status in free_bike_status.json MUST be set to is_reserved = true. If the value of default_reserve_time elapses without a rental beginning, the asset status MUST change to is_reserved = false. If default_reserve_time is set to 0, the asset type cannot be reserved.
            maximum: 999999

          accessMethods: 
            type: array
            description: access method for trip execution. Data will be delivered in the response of /bookings/{id}/legs/{lid}/COMMIT,
              /bookings/{id}/legs/{lid}/PREPARE (preferred) or GET /bookings/{id}/legs/{lid}.
            maxItems: 2
            items:
              type: string
              enum:  [
                DEEPLINK, 
                QR, 
                AZTEC,
                TOMP_API, 
                AXA_EKEY_OTP, 
                PHYSICAL_KEY,
                BARCODE,
                PDF,
                HTML,
                OVC,
                EMV,
                NONE
              ]

          ancillaries:
            externalDocs:
              url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA8/EA249.htm
              description: MOBILTITY NEED
            type: array
            maxItems: 100
            items:
              $ref: "#/components/schemas/requirement"

          maxSpeed:
            type: integer
            description: the maximum allowed speed for this asset (in km/h)

          extraInfo:
            type: object
            additionalProperties: 
              type: string

    assetPropertiesCar:
      type: object
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      description: applicable properties for cars
      properties:
        wheelCount:
          type: integer
          minimum: 0
          description: the number of wheels

        propulsion:
          type: string
          description: way in which the asset is powered
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3577.htm
          enum: [
            ELECTRIC,
            GASOLINE,
            DIESEL,
            HYBRID,
            LPG,
            HYDROGEN
          ]          

        gears:
          type: integer
          description: number of gears of the asset
        gearboxType:
          type: string
          description: type of gearbox
          enum: [
            MANUAL,
            AUTOMATIC,
            SEMIAUTOMATIC
          ]
        airConditioning:
          type: boolean
          description: airconditioning available
        cabrio:
          type: boolean
          description: cabrio model
        towingHook:
          type: boolean
          description: towing hook available
        winterTires:
          type: boolean
          description: winter tires applied
        nrOfDoors:
          type: integer
          description: the number of doors of the asset. Return only when applicable
        navigation:
          type: boolean
          description: navigation available
        cruiseControl:
          type: boolean
          description: cruise control available

        nrOfPassengers:
          type: integer
          description: maximum number of passengers (when not operated by a chauffeur, including the driver!) able to use the asset.
          minimum: 1

    assetPropertiesBike:
      description: applicable properties for cars
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)      
      properties:
        nrOfHelmets:
          type: integer
          description: the number of available helmets

    assetPropertiesCargo:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)    
      type: object
      properties:
        cargo:
          type: string
          description: describes options to carry cargo, should match Content-Language
        cargoVolume:
          type: integer
          description: the volume in liters of the cargo
          minimum: 0
          maximum: 999999

        cargoLoad:
          type: integer
          description: the weight in kilograms of the cargo
          minimum: 0
          maximum: 999999

    assetPropertiesEco:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)    
      type: object
      properties:
        energyLabel:
          description: Energy efficiency
          type: string
          enum: [ A, B, C, D, E ]
        ecoLabel:
          description: see https://github.com/MobilityData/gbfs/blob/v2.3/gbfs.md
          type: array
          maxItems: 3
          items: 
            type: object
            properties:
              countryCode:
                $ref: "#/components/schemas/country"
              ecoSticker:
                type: string
        co2PerKm:
          type: number
          format: float
          minimum: 0
          maximum: 1000000

    assetState:
      type: object
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      properties:
        location:
          $ref: "#/components/schemas/place"
        mileage:
          type: number
          description: the current mileage of the asset, in km
          format: float
          minimum: 0
          maximum: 999999
        stateOfCharge:
          type: number
          minimum: 0
          maximum: 100
          format: float
          description: percentage of charge available
        maxRange:
          type: number
          minimum: 0
          maximum: 100
          format: float
          description: maximum range in meters
        damages:
          type: array
          description: List of known asset damages.
          maxItems: 100
          items: 
            $ref: "#/components/schemas/damage"

    availableVehicleResponse:
      allOf:
        - $ref: "#/components/schemas/asset"
        - $ref: "#/components/schemas/hateoasLinks"

    bankAccount:
      type: object
      properties:
        name:
          description: account name
          type: string
        number:
          description: account number
          type: string
        country:
          $ref: "#/components/schemas/country"
        bankIdentification:
          description: bank identification, like BIC code
          type: string

    binaryAccessToken:
      description: Binary information, like a image (QR)
      allOf:
        - $ref: "#/components/schemas/token"
        - type: object
          required:
            - base64
          properties:
            base64: 
              description: base 64 QR code
              type: string
            version: 
              type: string

    booking:
      #externalDocs:
        # url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2957.htm
        # https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA1/EA2242.htm (SALES OFFER PACKAGE)
          # bookingState
          # customer
          # additionalLegs
        # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2417.htm (CUSTOMER PURCHASE PACKAGE)
          # bookingState -> CUSTOMER PURCHASE STATUS
          # customer -> CUSTOMER ACCOUNT .registered to TRANSPORT CUSTOMER
          # additionalLegs -> CUSTOMER PURCHASE PACKAGE ELEMENTS
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2413.htm
        description: TRAVEL SPECIFICATION
      allOf:
        - $ref: "#/components/schemas/leg"
        - type: object
          description: The booking information describing the state and details of an agreed upon trip
          properties:
            bookingState:
              $ref: "#/components/schemas/bookingState"

            customer:
              description: The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData
              $ref: "#/components/schemas/customer"

            additionalLegs:
              description: The additional legs of this booking (one booking -> all properties are already in the booking).
                All other legs should be in this collection, using the sequenceNumber to arrange them.
              type: array
              maxItems: 100
              items:
                $ref: "#/components/schemas/leg"

            extraInfo:
              description: Arbitrary information that a TO can add
              type: object
              additionalProperties:
                type: string
                maxLength: 400
              properties:
                memo:
                  type: string
                  maxLength: 500
                safeWaitTime: 
                  type: integer
                  description: the predicted time before the asset will arrive, in minutes
                  minimum: 0
                maxWaitTime:
                  type: integer
                  description: the maximum time before the asset will arrive, in minutes
                  minimum: 0
                safeTravelTime: 
                  type: integer
                  description: the predicted time the legs will take, in minutes
                  minimum: 0
                maxTravelTime:
                  type: integer
                  description: the maximum time the legs will take, in minutes
                  minimum: 0
                  
    bookingResponse:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2413.htm
        description: TRAVEL SPECIFICATION
      allOf:
      - $ref: "#/components/schemas/booking"
      - $ref: "#/components/schemas/hateoasLinks"
        example: {
            # planning: create booking, only when bookingStatus = NEW
                "book": { "rel": "POST", "href": "/bookings/{id}", "type": "application/hal+json", "templated": true }
            # booking
              # only when bookingStatus = PENDING
              , "commit": { "rel": "POST", "href": "/bookings/{id}/operations/COMMIT", "type": "application/hal+json", "templated": true } 
              , "cancel": { "rel": "POST", "href": "/bookings/{id}/operations/CANCEL", "type": "application/hal+json", "templated": true }
              , "extend_expiry_time": { "rel": "EXTEND_EXPIRY_TIME", "href": "/bookings/{id}/operations/EXTEND_EXPIRY_TIME", "type": "application/hal+json", "templated": true }
              # only when bookingStatus = CONDITIONAL_CONFIRMED
              , "deny": { "rel": "POST", "href": "/bookings/{id}/operations/DENY", "type": "application/hal+json", "templated": true }
            # trip execution
              , "leg": { "rel": "GET", "href": "/bookings/{id}/legs/{lid}", "type": "application/hal+json", "templated": true } 
              , "booking": { "rel": "GET", "href": "/bookings/{id}", "type": "application/hal+json", "templated": true } 
              # only when bookingStatus = CONFIRMED
              , "prepare": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/PREPARE", "type": "application/hal+json", "templated": true }
              , "set_in_use": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/SET_IN_USE", "type": "application/hal+json", "templated": true }
              , "time_postpone": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/TIME_POSTPONE", "type": "application/hal+json", "templated": true }
              , "open_trunk": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/OPEN_TRUNK", "type": "application/hal+json", "templated": true }
              , "add_ancillary": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/ancillaries/{category}/{number}", "type": "application/hal+json", "templated": true }
        }

    bookingRequest:
      description: A booking requested by the MP
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA4/EA5/EA3147.htm
        description: TRIP REQUEST
        ## customer -> TRIP REQUEST FILTER . TRIP MOBILITY FILTER . ACCESSIBILITY ASSETSSMENT
        # from -> TRIP ORIGIN PLACE
        # to -> TRIP DESTINATION PLACE
        ## callbackUrl
      type: object
      properties:
        customer:
          description: The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData
          $ref: "#/components/schemas/customer"
        from:
          description: information about the origin, only to supply when requested in the conditionRequireBookingData
          $ref: "#/components/schemas/place"
        to:
          description: information about the destination, only to supply when requested in the conditionRequireBookingData
          $ref: "#/components/schemas/place"
        callbackUrl: 
          description: The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST /bookings/{id}/legs/{lid}/operations/ and POST /bookings/{id}/operations/. Only to be provided 
            when this deviates from standard or agreed URL.
          type: string
          format: URI
          
    bookingState:
      description: The life-cycle state of the booking (from NEW to FINISHED)
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2420.htm
        description: CUSTOMER PURCHASE STATUS
      type: string
      enum: [
        NEW,
        PENDING,
        REJECTED,
        RELEASED,
        EXPIRED,
        CONDITIONAL_CONFIRMED,
        CONFIRMED,
        CANCELLED,
        STARTED,
        FINISHED,
      ]
      example: CONFIRMED

    bookingStep:
      allOf:
      - $ref: "#/components/schemas/information"
      - type: object
        properties:
          action:
            type: string
            description: The possible steps are described here<br>
                  `PENDING`  show whenever the booking is in PENDING state (not confirmed)<br>
                  `WAITING`  indicate that the TO is processing the booking, optionally after an extension of the expiry time<br>
                  `WAITING_FOR_PAYMENT`  indicate that the payment hasn't been settled, after an extension of the expiry time with reason payment<br>
                  `CONFIRMED`  show whenever the booking is in a COMMITTED state (confirmed)<br>
                  `CANCELLED`  show whenever the booking is cancelled<br>
                  `CONDITIONAL_CONFIRMED`  show whenever the booking is conditionally confirmed (see process identifiers)<br>
                  `EXPIRED`  show whenever the booking is expired (the expiry time has passed)<br>
            enum: [
              PENDING,
              WAITING,
              WAITING_FOR_PAYMENT,
              CONFIRMED,
              CONDITIONAL_CONFIRMED,
              CANCELLED,
              EXPIRED
            ]

    card:
      description: Any kind of card that isn't a license, only provide the cards that are required
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA3/EA2368.htm
        description: CUSTOMER PAYMENT MEANS
        # MISSING: Identification/Passport
      allOf:
        - $ref: "#/components/schemas/cardType"
        - type: object
          required:
            - cardNumber
            - validUntil
          properties:
            cardDescription:
              description: description of the card
              type: string
            cardNumber:
              description: number of the card, like ID number, credit card or bank account number
              type: string
            cardAdditionalNumber:
              description: additional number, like CVC code or IBAN code
              type: string
            validUntil:
              type: string
              format: date
            country:
              $ref: "#/components/schemas/country"

    cardType:
      description: A generic description of a card, asset class and acceptors is only allowed for DISCOUNT/TRAVEL/OTHER cards
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA7/EA3626.htm
        description: TYPE OF PAYMENT METHOD
      type: object
      required:
        - type
      properties:
        type:
          description: The broad category of card
          type: string
          enum: [
            ID,
            DISCOUNT,
            TRAVEL,
            BANK,
            CREDIT,
            PASSPORT,
            OTHER
          ]
        subType:
          description: For use in case of OTHER. Can be used in bilateral agreements.
          type: string
        assetClass:
          $ref: "#/components/schemas/assetClass"
        acceptors:
          description: references to accepting parties, only if applicable
          type: array
          maxItems: 10
          items:
            type: string
            format: operator-id

    condition:
      type: object
      required:
        - conditionType
      properties:
        conditionType:
          description: The specific subclass of condition, should match the schema name exactly
          type: string
        id:
          description: An identifier for this condition that can be used to refer to this condition
          type: string
          example: deposit50eu

    conditions:
      description: The conditions that apply to this leg, there may be more conditions in a parent booking and planning object (if this is returned as part of those)
      type: array
      maxItems: 20
      items:
        oneOf:
          - $ref: "#/components/schemas/conditionDeposit"
          - $ref: "#/components/schemas/conditionPayWhenFinished"
          - $ref: "#/components/schemas/conditionRequireBookingData"
          - $ref: "#/components/schemas/conditionReturnArea"
          - $ref: "#/components/schemas/conditionUpfrontPayment"
          - $ref: "#/components/schemas/conditionRequireOnboardingSteps"
          - $ref: "#/components/schemas/conditionRequireOffboardingSteps"
          - $ref: "#/components/schemas/conditionRequirePausingSteps"
          - $ref: "#/components/schemas/conditionRequireResumingSteps"
          - $ref: "#/components/schemas/conditionNoPets"
          - $ref: "#/components/schemas/conditionNoSmoking"
          - $ref: "#/components/schemas/conditionNoTravelAbroad"
          - $ref: "#/components/schemas/conditionNoUndergroundParking"
          - $ref: "#/components/schemas/conditionRequiredAncillaries"
        discriminator:
          propertyName: conditionType

    conditionDeposit:
      description: in case the TO demands a deposit before usage. Requesting and refunding should be done using the /bookings/{id}/leg/{id}/claim-costs endpoint.
      allOf:
        - $ref: "#/components/schemas/condition"
        - $ref: "#/components/schemas/amountOfMoney"

    conditionNoPets:
      description: no pets are allowed in the asset
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionNoSmoking:
      description: smoking is not allowed in the asset
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionNoTravelAbroad:
      description: it is not allowed to enter another country with this asset
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionNoUndergroundParking:
      description: it is not allowed to park the asset underground
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionPayWhenFinished:
      description: in case the TO demands a direct payment after usage.
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionRequiredAncillaries:
      description: it is required to use one of the enlisted ancillaries, like bike helmets or snow chains
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          properties:
            ancillaries:
              $ref: "#/components/schemas/requirements"

    conditionRequireBookingData:
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          required:
            - requiredFields
          properties:
            requiredFields:
              type: array
              maxItems: 20
              items:
                type: string
                enum: [
                  FROM_ADDRESS,
                  TO_ADDRESS,
                  DATE_OF_BIRTH,
                  EMAIL,
                  PERSONAL_ADDRESS,
                  PHONE_NUMBERS,
                  LICENSES,
                  BANK_CARDS,
                  DISCOUNT_CARDS,
                  TRAVEL_CARDS,
                  ID_CARDS,
                  CREDIT_CARDS,
                  NAME,
                  AGE
                ]

    conditionRequireOffboardingSteps:
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          required:
            - steps
          properties:
            steps:
              type: array
              maxItems: 20
              items: 
                $ref: "#/components/schemas/offBoardingStep"

    conditionRequireOnboardingSteps:
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          required:
            - steps
          properties:
            steps:
              type: array
              maxItems: 20
              items: 
                $ref: "#/components/schemas/onBoardingStep"                

    conditionRequirePausingSteps:
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          required:
            - steps
          properties:
            steps:
              type: array
              maxItems: 20
              items: 
                $ref: "#/components/schemas/pausingStep"

    conditionRequireResumingSteps:
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          required:
            - steps
          properties:
            steps:
              type: array
              maxItems: 20
              items: 
                $ref: "#/components/schemas/resumingStep"

    conditionReturnArea:
      description: a return area. In the condition list there can be multiple return area's.
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          properties:
            stationId:
              description: station to which the asset should be returned
              type: string
            returnArea:
              description: area in which the asset should be returned as GeoJSON Polygon coordinates
              $ref: "#/components/schemas/geojsonPolygon"
            coordinates:
              $ref: "#/components/schemas/coordinates"
            returnBefore:
              description: the return hours of the facility (if different from operating-hours)
              type: string
              format: date-time

    conditionUpfrontPayment:
      description: in case the TO demands a upfront payment before usage. The payment should be made in the booking phase.
      allOf:
        - $ref: "#/components/schemas/condition"

    confirmationRequest:
      type: object
      description: the TO can ask permission to do something to the MP, as the MP is financially responsible. 
      properties:
        assetType:
          $ref: "#/components/schemas/assetType"

    connectedLegInfo:
      type: object
      description: this object describes the previous leg. It can contain f.x. a flight number, a used parking to get a discount, etc.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2962.htm
        description: LEG
      properties:
        provider:
          description: the provider of the previous leg (usually a Transport Operator reference)
          $ref: "#/components/schemas/uuid"

        assetId:
          type: string
          description: the identification of the previous asset (id or visualId), like a flight number. This field (in case of a specific asset) or assetType must be filled.
          maxLength: 100
        assetType:
          $ref: "#/components/schemas/assetType"
        url:
          type: string
          description: the URL where the details of the previous leg can be found (if authorized), using a GET http method
          example: https://penr.nl/tomp/bookings/57c652b3-1878-4a59-ba7b-b69ec1267124/legs/4aea3986-55be-48c6-a66a-09b14ebe2fb5
          format: URI
          maxLength: 1000

    coordinates:
      type: object
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA1/EA169.htm
      # lat -> Latitude
      # lng -> Longitude
      # alt -> Altitude
      # REMARK: LOCATING SYSTEM is WGS84
      description: a lon, lat (WGS84, EPSG:4326)
      required:
        - lat
        - lng
      properties:
        lng:
          type: number
          example: 6.169639
          format: float
          minimum: 0
          maximum: 360
        lat:
          type: number
          example: 52.253279
          format: float
          minimum: 0
          maximum: 360
        alt:
          type: number
          description: altitude, in meters above sea level
          format: float
          minimum: 0
          maximum: 1000

    country:
      type: string
      description: two-letter country codes according to ISO 3166-1
      maxLength: 2
      minLength: 2
      pattern: "[A-Z]{2}"
      example: NL

    currencyCode:
      description: ISO 4217 currency code
      type: string
      minLength: 3
      maxLength: 3
      pattern: "[a-zA-Z]{3}"

    customer:
      description: A MaaS user that wishes to make a booking, only use the fields required by booking conditions
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA1/EA2333.htm
        description: TRANSPORT CUSTOMER
        # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA1/EA2335.htm (CUSTOMER ACCOUNT)
      allOf:
        - $ref: "#/components/schemas/traveler"
        - type: object
          required:
            - id
          properties:
            id:
              description: The identifier MaaS uses to identify the customer
              type: string
              example: "A0-123456"
            travelerReference:
              description: optional reference field to the travelers in the planning request.
              type: string
            initials:
              type: string
            firstName:
              description: First name of the customer
              type: string
              example: John
            lastName:
              description: Last name of the customer
              type: string
              example: Doe
            middleName:
              description: Middle name of the customer
              type: string
              example: von
            prefix:
              description: prefix of the customer, like titles
              type: string
            postfix:
              description: postfix of the customer, like titles
              type: string
            phones:
              type: array
              maxItems: 3
              items:
                $ref: "#/components/schemas/phone"
            email:
              description: the email address of the customer
              type: string
            dateOfBirth:
              type: string
              format: date
            address:
              $ref: "#/components/schemas/address"
            photo:
              description: base64 encoded
              type: string
              format: byte
            cards:
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA3/EA2368.htm
              type: array
              maxItems: 10
              items:
                $ref: "#/components/schemas/card"
            licenses:
              type: array
              maxItems: 10
              items:
                $ref: "#/components/schemas/license"
            extraInfo:
              description: dictionary for extra fields (bilatural agreements)
              type: object
              additionalProperties: 
                type: string

    damage:
      description: A damage of the asset.
      type: object
      required:
        - assetComponent
        - description
      properties:
        assetComponent:
          description: Part/Component of the asset affected. If OTHER is specified the description needs to provide more detail as to what part/component is affected.
          type: string
          enum: [ FRONT, REAR, LEFT, RIGHT, TOP, BOTTOM, INTERIOR, TIRE, ANCILLARY, OTHER ]
        description:
          description: Description of the damage.
          maxLength: 1000
          type: string
        pictures:
          type: array
          description: URL where pictures of the damage can be accessed. Any special characters in the URL must be correctly escaped.
          maxItems: 5
          items:
            type: string
            format: URI

    day:
      type: string
      enum: [ MON, TUE, WED, THU, FRI, SAT, SUN ]
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA3/EA306.htm

    deeplinkAccess:
      description: deeplink info
      allOf:
        - $ref: "#/components/schemas/token"
        - type: object
          properties:
            url:
              description: the base deeplink url for the MP app. Can be extended by
                the 'knownParamaters'. Including the scheme.
              type: string
              example: mp1.app://something/?auth=sdfkjhrkjsdf003df38=dfsdf
              format: URI
            knownParameters:
              type: array
              example: [ "return-url"
                      , "error-url"
                      , "error-code"
                      , "error-description"
                      ]
              maxItems: 100
              items:
                type: string

    digitalTicket:
      description: Arbitrary data the TO may pass along the ticket to the client
      allOf:
        - $ref: "#/components/schemas/token"
        - type: object
          properties:
            url:
              description: download url for html/pdf
              type: string
              format: URI

    EKeyInformation:      
      description: Axa EKey information
      allOf:
        - $ref: "#/components/schemas/token"
        - type: object
          required:
            - ekey
            - lock
          properties:
            ekey: 
              type: object
              additionalProperties: false
              properties:
                key: 
                  description: certificate
                  type: string
                passkey:
                  description: one time pass key
                  type: string
            lock:
              type: object
              additionalProperties: false
              properties:
                bdAddress:
                  description: physical address 
                  type: string
                deviceName:
                  description: how it advertises itself
                  type: string

    endpoint:
      type: object
      description: a formal description of an endpoint.
      additionalProperties: false
      required:
        - method
        - path
        - status
      properties:
        method:
          type: string
          enum: [
            POST,
            PUT,
            GET,
            DELETE,
            PATCH
          ]
        path:
          description: the exact path of the endpoint, starting after the base URL
          type: string
          example: /plannings/
          maxLength: 2000
        status:
          type: string
          enum: [
            NOT_IMPLEMENTED,
            DIALECT,
            IMPLEMENTED
          ]
        externalType:
          type: string
          description: this field must be used when adressing other standards for exchanging 'static' data (Level 1 MaaS)
          enum: [
            GBFS,
            GTFS, 
            NeTEx,
            OSDM,
            IXSI5, 
            APDS, 
            OCPI
          ]
        useAssetTypes:
          type: array
          maxItems: 20
          items: 
            type: string
            description: field references in external sources that are used in the booking process. E.g. when using vehicle types from GBFS, a value of 'vehicle_type_id' should be 
              specified to book a bike from the particular vehicle type in the field 'useAssetTypes' in the trip offer request.
            enum: [
              # GBFS
              "vehicle_types.vehicle_type_id",
              # GTFS
              "routes.route_id",
              "trips.trip_id",
              # NeTEx
              "Route.id",
              "RouteLink.id",
              "Line.id",
              "TimingLink.id",
              "TimingPattern.id",
              "ServicePattern.id",
              "JourneyPattern.id",
              # OSDM Online
              "CoachLayout.layoutId::Compartment.number::PlacePosition.number"
            ]
        useAssets:
          type: array
          maxItems: 20
          items: 
            type: string
            description: field references in external sources that are used in the booking process. E.g. when using vehicle types from GBFS, a value of 'vehicle_id' should be 
              specified to book a bike from the particular vehicle type in the field 'useAssets' in the trip offer request.
            enum: [
              # common, identifying codes/names on assets, QR codes
              "visualId",
              # GBFS
              "free_bike_status.bike_id",
              "vehicle_status.vehicle_id"
              # GTFS
              # NeTEx -> spot IDs?
            ]

      example:
        warning: "Don't copy this example. There are multiple examples in this section. Each object is an example on itself."
        externalStandard1:
          { "method": "GET", "externalType": "GBFS", "path": "https://some-external.url/GBFS/vehicle_types.json", 
            "useAssetTypes": ["vehicle_types.vehicle_type_id"], "status": "IMPLEMENTED" }
        externalStandard2:
          { "method": "GET", "externalType": "GBFS", "path": "https://some-external.url/GBFS/vehicle_status.json", 
            "useAssets": ["vehicle_status.vehicle_id"], "status": "IMPLEMENTED" }
        externalStandard3:
          { "method": "GET", "externalType": "NeTEx", "path": "https://data.ndovloket.nl/netex/wsf/NeTEx_WSF_WSF_20231206_20231206.xml.gz", 
            "useAssetTypes": ["Route.id", "RouteLink.id"], "status": "IMPLEMENTED" }        

    error:
      type: object
      additionalProperties: false
      description:
        An error that the service may send, e.g. in case of invalid input,
        missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
      properties:
        errorcode:
          type: integer
          description: The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error.
        type:
          type: string
          description: The category of this type of error.
          maxLength: 20
        title:
          type: string
          description: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language
          maxLength: 100
        status:
          type: integer
          description: The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        detail:
          type: string
          maxLength: 1000
          description: A human-readable explanation specific to this occurrence of the problem, matches Content-Language
        instance:
          type: string
          maxLength: 1000
          format: URI
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.

    extraCosts:
      description: Costs that the TO is charging the MP; credits are negative. Other amounts should be positive
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          required:
            - category
            - description
            - amount
          properties:
            class:
              type: string
              default: "extraCosts"
            category:
              $ref: "#/components/schemas/journalCategory"
            description:
              description: free text to describe the extra costs. Mandatory in case of 'OTHER', matches Content-Language
              type: string
            number:
              type: number
              description: e.g. number of litres, number of kilowatthour, etc
              format: float
              minimum: 0
              maximum: 1000
            numberType:
              type: string
              enum: [ LITER, KILOWATTHOUR, CO2_COMPENSATION, OTHER ]
            account:
              $ref: "#/components/schemas/bankAccount"
            extraInfo:
              description: Arbitrary metadata that a TO can add, like voucher codes
              type: object
              additionalProperties: 
                type: string

    fare:
      type: object
      description: the total fare is the sum of all parts, except for the 'MAX' farePart. This one descripes the maximum price for the complete leg.
      required:
        - estimated
        - parts
      properties:
        estimated:
          description: is this fare an estimation?
          type: boolean
        description:
          description: user friendly description of the fare (e.g. 'full fare'), should match Content-Language
          type: string
        class:
          description: needed for the discriminator in journal-entry.
          type: string
          default: "fare"
        parts:
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/farePart"

    farePart:
      description: this describes a part of the fare (or discount). It contains a for instance the startup costs (fixed) 
       or the flex part (e.g. 1.25 EUR per 2.0 MILES). The amount is tax included. In case of discounts, the values are 
       negative. With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts. 
       The `scale` properties create the ability to communicate scales (e.g. the first 4 kilometers you've to pay 
       EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer).
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          required:
            - amount
          properties:
            type:
              description: type of fare part. If there is only one farepart and this field is missing, it should
                be assumed it is 'FIXED'. In all other situations this field is mandatory.
              type: string
              enum: [ FIXED, FLEX, MAX ]
              # MAX -> https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            kind:
              description: is this the default price or is this an additional part (discount, price surge). In case of a DISCOUNT, the amount
                must always be negative and in case of SURGE it must be positive. This also means, that when you're working with discounts or surges,
                you have to deliver 2 fareparts, one for the default price and one for the discount/surge. This can be used in combination with as
                well the fixed price parts as with the flex price parts.
              type: string
              enum: [ DEFAULT, DISCOUNT, SURGE ]
              # DISCOUNT, SURGE -> https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1665.htm
            unitType:
              type: string
              description: in case of 'FLEX' mandatory, otherwise not allowed. E.g. 0.5 EUR per HOUR
              enum: [ KM, SECOND, MINUTE, HOUR, MILE, PERCENTAGE ]
              # in case of FLEX using KM, MILE:
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA2/EA1801.htm
                # in case of FIXED using KM, MILE: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA2/EA1804.htm
                # in case of FLEX using SECOND, MINUTE, HOUR: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA4/EA1843.htm
                # in case of FIXED using SECOND, MINUTE, HOUR: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA4/EA1846.htm
            units:
              type: number
              description: the number of km, seconds etc. Mandatory when the type is 'FLEX', otherwise
                not allowed. In case of 0.5 EUR per 15 MINUTES, `units` should contain 15 and `unitType` MINUTES.
              format: float
              minimum: 0
            scaleFrom:
              type: number
              description: in case of scaling, this is the bottom value (f.x. in the first hour 3 CAD, the `scaleFrom` should
                contain 0 and the `scaleType` HOUR). When `scaleTo` is used, but this field is missing, it should be assumed
                it is a 0.
              format: float
              minimum: 0
            scaleTo:
              type: number
              description: the upper value of the scale (f.x. 3 CAD in the first hour, this field should contain 1, 
                `scaleFrom` 0 and `scaleType` HOUR)
              format: float
              minimum: 0
            scaleType:
              type: string
              enum: [ KM, MILE, HOUR, MINUTE ]
            name:
              description: an optional description of this fare part.
              type: string
            class:
              description: class of this fare part. Could be FARE or ANCILLARY
              default: "FARE"
              type: string
              enum: [ "FARE", "ANCILLARY" ]
            minimumAmount:
              description: The minimum price, in the same currency as amount. Place in `amount` the most likely value.
              type: number
              example: 9.00
              format: float
              minimum: 0
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            maximumAmount:
              description: The minimum price, in the same currency as amount. Place in `amount` the most likely value.
              type: number
              example: 11.00
              format: float
              minimum: 0
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            assetState:
              description: in case the fare is dependent on being in use or being paused, this field must be used. Default IN_USE
              type: string
              enum: [ "IN_USE", "PAUSED" ]
              default: "IN_USE"
            extraInfo:
              type: object
              additionalProperties: 
                type: string

    fulfillmentArray:
      type: array
      maxItems: 3
      items:
        $ref: "#/components/schemas/fulfillment"

    fulfillment:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT
      oneOf:
      - $ref: "#/components/schemas/digitalTicket"
      - $ref: "#/components/schemas/deeplinkAccess"
      - $ref: "#/components/schemas/EKeyInformation"
      - $ref: "#/components/schemas/binaryAccessToken"
      discriminator:
        propertyName: tokenType
      additionalProperties: true

    geojsonLine:
      description: An array  of WGS84 coordinate pairs
      externalDocs:
        url: https://geojson.org/geojson-spec.html#line
      type: array
      example: [[6.169639, 52.253279], [6.05623, 52.63473]]
      maxItems: 10000
      items:
        $ref: "#/components/schemas/geojsonPoint"

    geojsonPoint:
      description: Geojson Coordinate
      externalDocs:
        url: https://geojson.org/geojson-spec.html#point
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
        format: float
        minimum: 0.0
      example: [4.53432, 55.324523]

    geojsonPolygon:
      description: geojson representation of a polygon. First and last point must be equal. See also https://geojson.org/geojson-spec.html#polygon and example https://geojson.org/geojson-spec.html#id4. The order should be lon, lat [[[lon1, lat1], [lon2,lat2], [lon3,lat3], [lon1,lat1]]], the first point should match the last point.
      externalDocs:
        url: https://geojson.org/geojson-spec.html#polygon
      type: array
      maxItems: 200
      items:
        $ref: "#/components/schemas/geojsonLine"
      example: [[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0,0.0], [1.0, 1.0]]]

    geojsonMultiPolygon:
      description: geojson representation of a multi polygon. See also https://geojson.org/geojson-spec.html#multipolygon
      externalDocs:
        url: https://geojson.org/geojson-spec.html#multipolygon
      type: array
      maxItems: 200
      items:
        $ref: "#/components/schemas/geojsonPolygon"
      example: [[[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0,0.0], [1.0, 1.0]]]]

    geojsonGeometry:
      required:
      - type
      description: 
        geoJSON geometry
      properties:
        type:
          type: string
          enum:
          - Point
          - LineString
          - Polygon
          - MultiPolygon
        coordinates:
          oneOf: 
            - $ref: "#/components/schemas/geojsonPoint"
            - $ref: "#/components/schemas/geojsonLine"
            - $ref: "#/components/schemas/geojsonPolygon"
            - $ref: "#/components/schemas/geojsonMultiPolygon"
      discriminator:
        propertyName: type

    hateoasLinks:
      type: object
      properties:
        _links: 
          type: object
          additionalProperties: 
            $ref: "#/components/schemas/hateoasLink"
    
    hateoasLink:
      type: object
      required:
        - href
      properties:
        rel:
          type: string
          description: a misused field, to indicate the http method.
          enum: [ POST, GET, DELETE ]
        href:
          type: string
          format: URI
        type:
          type: string
          default: "application/hal+json"
        templated: 
          type: boolean
          default: true

    information:
      description: Information provided to end users
      type: object
      properties:
        type:
          description: the type of the information provided
          type: string
          enum: [ URL, IMAGE, PLAIN_TEXT, HTML ]
        url:
          description: the internet location of the information, used in case or type `URL` or `IMAGE`
          type: string
        goal:
          description: the purpose of the information
          type: string
          enum: [ INSTRUCTIONS, SALES ]
        text:
          type: string
          description: free format text or HTML, depending on the type. Not to use in combination with `URL` or `IMAGE` 

    journalEntry:
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          properties:
            category:
              $ref: "#/components/schemas/journalCategory"
            journalId:
              description: id of the entry, leg id can be reused
              $ref: "#/components/schemas/uuid"
            journalSequenceId:
              description: sequence id of the entry, in combination with journalId unique from TO perspective.
              type: string
              maxLength: 3
            invoiceId:
              description: the number of the invoice. Should be filled in when invoiced.
              type: string
            invoiceDate:
              type: string
              format: date-time
            state:
              $ref: "#/components/schemas/journalState"
            expirationDate:
              type: string
              format: date-time
            comment:
              type: string
              maxLength: 2000
            distance:
              description: the travelled distance. Only if applicable.
              type: number
              format: float
              minimum: 0
            distanceType:
              type: string
              enum: [ KM, MILE ]
            usedTime:
              description: the time in seconds that the assed is used. Only if applicable.
              type: integer
              minimum: 0
            rentalStartMileage:
              description: the mileage at the start of the rental. 'DistanceType' field is also applicable here
              type: number
              format: float
              minimum: 0
            vatNumber:
              description: VAT identification number.
              type: string
              maxLength: 100
            bankAccount:
              $ref: "#/components/schemas/bankAccount"
            details:
              description: the specification of the amount; how is it composed.
              oneOf:
                - $ref: "#/components/schemas/fare"
                - $ref: "#/components/schemas/extraCosts"
              discriminator:
                propertyName: class

    journalState:
      type: string
      enum: [ TO_INVOICE, INVOICED ]

    journalCategory:
      type: string
      description: They are there for filtering purposes in the journal entry endpoint. 
      enum: [
        ALL,
        DAMAGE,
        LOSS,
        STOLEN,
        EXTRA_USAGE,
        REFUND,
        FINE,
        OTHER_ASSET_USED,
        CREDIT,
        VOUCHER,
        DEPOSIT,
        OTHER,
        FARE
      ]

    leg:
      description: A planned (segment of) a booked trip using one asset type
      type: object
      required:
        - from
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2962.htm
        description: LEG
        # https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2958.htm (TRIP PATTERN)
      properties:
        id:
          description: The unique identifier (TO) of this leg
          $ref: "#/components/schemas/uuid"
        sequenceNumber:
          description: The order of the leg in the booking. There can be multiple legs with the same sequence (different user or parallel usage (eg. parking lot and a bike)).
          type: integer
        travelerReferenceNumbers:
          description: reference to the travelers field of the request. If missing, it is refering to the first (if any). it is an array to facilitate multiple users on one leg (e.g. using a car). If multiple access informations are needed, please create a leg per used asset.
          type: array
          maxItems: 50
          items:
            type: string

        from:
          description: The departure location of this leg, using this asset type
          $ref: "#/components/schemas/place"
        to:
          description: The destination of this leg, using this asset type
          $ref: "#/components/schemas/place"

        startTime:
          description: The departure time of this leg. Or, in case of a parking, the start of the usage.
          type: string
          format: date-time
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2958.htm
            description: TRIP PATTERN.StartTime
        endTime:
          description: The intended arrival time at the to place. Or, in case of a parking, the end of the usage.
          type: string
          format: date-time
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2958.htm
            description: TRIP PATTERN.EndTime
        legState:
          $ref: "#/components/schemas/legState"

        price:
          description: The leg-specific price information, all fares are additive, if the booking does not have price set all legs should
          $ref: "#/components/schemas/fare"

        conditions:
          $ref: "#/components/schemas/conditions"

        assetType:
          description: The asset type used in this leg as determined during booking
          $ref: "#/components/schemas/assetType"
        asset:
          description: The concrete asset used for the execution of the leg
          $ref: "#/components/schemas/asset"

        suboperator:
          $ref: "#/components/schemas/suboperator"

        fulfillment:
          description: The MaaS users proof of their right to travel on this leg (visual representable) OR
            data to open an asset
          $ref: "#/components/schemas/fulfillment"

        userCommunication:
          description: Additional information a TO can send to a customer (instructions, sales info, ...)
          type: array
          maxItems: 100
          items: 
            $ref: "#/components/schemas/information" 

        memo:
          type: string
          maxLength: 1000

    legResponse:
      allOf:
        - $ref: "#/components/schemas/leg"
        - $ref: "#/components/schemas/hateoasLinks"
          example:
            { "leg": { "rel": "GET", "href": "/bookings/{id}/legs/{lid}", "templated": true, "type": "application/hal+json" }
            # only when legState = NOT_STARTED
            , "cancel": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/CANCEL", "templated": true, "type": "application/hal+json" }
            , "prepare": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/PREPARE", "templated": true, "type": "application/hal+json" }
            , "assign_asset": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/ASSIGN_ASSET", "templated": true, "type": "application/hal+json" }
            , "time_postpone": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/TIME_POSTPONE", "templated": true, "type": "application/hal+json" }
            # only when legState = NOT_STARTED OR PREPARING
            , "add_ancillaries": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/ancillaries/{category}/{number}", "templated": true, "type": "application/hal+json" }
            , "remove_ancillaries": { "rel": "DELETE", "href": "/bookings/{id}/legs/{lid}/ancillaries/{category}/{number}", "templated": true, "type": "application/hal+json" }
            , "set_in_use": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/SET_IN_USE", "templated": true, "type": "application/hal+json" }
            # only when legState = IN_USE
            , "time_extend": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/TIME_EXTEND", "templated": true, "type": "application/hal+json" }
            , "pause": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/PAUSE", "templated": true, "type": "application/hal+json" }
            , "open_trunk": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/OPEN_TRUNK", "type": "application/hal+json" }
            , "start_finishing": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/START_FINISHING", "templated": true, "type": "application/hal+json" }
            , "finish": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/FINISH", "templated": true, "type": "application/hal+json" }
            }

    legState:
      type: string
      description: status of a leg
      enum: [
        NOT_STARTED,
        PREPARING,
        IN_USE,
        PAUSED,
        FINISHING,
        FINISHED,
        ISSUE_REPORTED,
        CANCELLED,
      ]

    license:
      description: driver or usage license for a specific user. Contains the number and the assetType you're allowed to operate (e.g. driver license for CAR)
      allOf:
        - $ref: "#/components/schemas/licenseType"
        - type: object
          properties:
            number:
              type: string
              example: "1287948792"
            licenseCode:
              description: in most countries a driver license has also a code. As TO you can exactly verify, based on this code if the license allows to operate it's assets, if the assetType too generic.
              example: D4
              type: string
            validUntil:
              type: string
              format: date

    licenseType:
      description: A category of license to use a certain asset class
      type: object
      required:
        - assetClass
      properties:
        assetClass:
          $ref: "#/components/schemas/assetClass"
        issuingCountry:
          $ref: "#/components/schemas/country"

    logEntry:
      type: object
      required:
      - operation
      properties:
        operation:
          type: string
          enum: [ 
            OFFER, BOOK,
            CANCEL, DENY, COMMIT, EXTEND_EXPIRY_TIME,
            PREPARE, ASSIGN_ASSET, SET_IN_USE, PAUSE, OPEN_TRUNK, START_FINISHING, FINISH, TIME_EXTEND, TIME_POSTPONE,
            PAY, EXTRA_COSTS
            ]
        legId:
          description: in case it is a leg operation, specify the legId
          $ref: "#/components/schemas/uuid"
        detail:
          $ref: "#/components/schemas/operationRequest"
        progress:
          description: A list of coordinates describing the progress so far along the leg, as GeoJSON LineString coordinates
          $ref: "#/components/schemas/geojsonLine"

    notification:
      type: object
      description: notifies the MaaS operator of issues with a booking. Vehicle information can be provided when needed.
      required:
       - type
      properties:
        type:
          type: string
          enum: [ 
            VEHICLE_NOT_AVAILABLE,
            USER_NO_SHOW, 
            ETA, 
            MESSAGE_TO_DRIVER, 
            MESSAGE_TO_END_USER, 
            USER_OUT_OF_LIMITS, 
            OTHER
          ]
          example: VEHICLE_NOT_AVAILABLE
        minutes:
          description: in case of ETA, the number of minutes until arrival at the pickup location
          type: integer
          minimum: 0
          maximum: 1000
        asset:
          $ref: '#/components/schemas/asset'
        comment:
          type: string
          description: free text, should match Content-Language
          maxLength: 2000
        
    offBoardingStep:
      allOf:
        - $ref: "#/components/schemas/information"
        - type: object
          properties:
            action:
              type: string
              description: these actions are available<br>
                `SEND_START_FINISHING` - the TO needs to be informed the leg is about to finish<br>
                `PARK_ASSIST` - user action to park (stop) using the asset<br>
                `UNLOCK_LOCKER` - user action, could be triggered by the START_FINISH operation<br>
                `CONNECT_CHARGER` - user action<br>
                `LOCK_ASSET` - user action, could be triggered by the FINISH operation<br>
                `SEND_OPEN_TRUNK` - the TO opens the trunk remotely <br>
                `UNLOCK_TRUNK` - user action <br>
                `STOW_HELMET` - user action <br>
                `LOCK_TRUNK` - user action <br>
                `LOCK_LOCKER` - user action <br>
                `SEND_FINISH` - the TO wants to be informed about the end of the leg<br>
                `SEND_EVIDENCE_PARKED` - the TO requires parking evidence<br>
                `SEND_EVIDENCE_HELMET` - the TO requires evidence of storing the helmet<br>
                `SEND_EVIDENCE_CHARGER` - the TO requires evidence of correct usage of the charger 
              enum: [
                SEND_START_FINISHING, 
                PARK_ASSIST, 
                UNLOCK_LOCKER,
                CONNECT_CHARGER, 
                LOCK_ASSET,
                SEND_OPEN_TRUNK, 
                UNLOCK_TRUNK,
                STOW_HELMET, 
                LOCK_TRUNK, 
                LOCK_LOCKER,
                SEND_FINISH, 
                SEND_EVIDENCE_PARKED, 
                SEND_EVIDENCE_HELMET, 
                SEND_EVIDENCE_CHARGER
              ]

    onBoardingStep:
      allOf:
        - $ref: "#/components/schemas/information"
        - type: object
          properties:
            action:
              type: string
              description:
                The possible steps are described here<br>
                `SEND_PREPARE` - indicate the leg is going to start <br>
                `UNLOCK_LOCKER` - user action - optionally triggered by the PREPARE operation<br> 
                `DISCONNECT_CHARGER` - requested user action <br> 
                `SHOW_DAMAGES` - show known damages to end user <br> 
                `UNLOCK_ASSET` - requested user action or triggered by SET_IN_USE operation <br> 
                `START_ASSET` - requested user action <br> 
                `SEND_OPEN_TRUNK` - request TO to open trunk/helmet case remotely<br> 
                `UNLOCK_TRUNK` - requested user action <br> 
                `TAKE_HELMET` - requested user action <br> 
                `SEND_SET_IN_USE` - request to start leg <br> 
                `SEND_ASSIGN_ASSET` - request to assign the specified asset to the leg <br> 
                `LOCK_LOCKER` - requested user action 
              enum: [
                SEND_PREPARE,
                UNLOCK_LOCKER,
                DISCONNECT_CHARGER, 
                SHOW_DAMAGES,
                UNLOCK_ASSET, 
                START_ASSET,
                SEND_OPEN_TRUNK, 
                UNLOCK_TRUNK, 
                TAKE_HELMET, 
                SEND_SET_IN_USE, 
                SEND_ASSIGN_ASSET,
                LOCK_LOCKER
              ]

    oneStopBookingRequest:
      allOf:
      - $ref: "#/components/schemas/travelRequest"
      - type: object
        properties:
          customer:
            description: The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData
            $ref: "#/components/schemas/customer"
          callbackUrl: 
            description: The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST /bookings/{id}/legs/{lid}/operations and POST /bookings/{id}/operations. Only to be provided when this deviates from standard or agreed URL.
            type: string
            format: URI

    operationRequest:
      type: object
      description: operation during the trip execution 
      required:
        - timestamp
      properties:
        timestamp:
          type: string
          format: date-time

        reason:
          type: string
          description: free text, should match Content-Language
          maxLength: 2000

        urls:
          type: array
          description: urls to support the operation e.g. pictures justifying the exit conditions
          maxItems: 10
          items:
            type: string
            format: URI
            
        asset:
          $ref: "#/components/schemas/asset"

        extendReason:
          type: string
          description: in case `operation` is EXTEND_EXPIRY_TIME, the reason for extension must be supplied here.
          enum: [ BOOKING_PENDING, PAYMENT_PENDING, OTHER ]

        origin:
          type: string
          description: This operation can be done on behalf of another party. The MP can act on behalf of the END_USER (cancel this booking for me); to override the default origin. In case this field is missing, it must be assumed that the MP is requesting the operations.
          enum: [ TO, MP, END_USER, OTHER ]

    pausingStep:
      allOf:
      - $ref: "#/components/schemas/information"
      - type: object
        properties:
          action:
            type: string
            description: allowed actions<br>
              `SEND_PAUSE` - send leg operations PAUSE to inform the TO<br>
              `PARK_ASSIST` - user action, the end user can be informed how and where to park<br>
              `LOCK_ASSET` - user action, can be triggered by the PAUSE operations<br>
              `SEND_OPEN_TRUNK` - request TO to open the trunk remotely<br>
              `UNLOCK_TRUNK` - user action<br>
              `STOW_HELMET` - user action<br>
              `LOCK_TRUNK` - user action
            enum: [
              SEND_PAUSE,
              PARK_ASSIST, 
              LOCK_ASSET,
              SEND_OPEN_TRUNK,
              UNLOCK_TRUNK,
              STOW_HELMET, 
              LOCK_TRUNK 
            ]

    phone:
      type: object
      properties:
        preferred:
          description: only one phone in this array can have a true in this property
          type: boolean
        number:
          description: phone number. In case of international usage, always provide the country code.
          type: string
          pattern: '^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.0-9]*$'
          example: +31-48934758 or +(0075)-834923384 or 020 1234 1234
        kind:
          type: string
          enum: [ LANDLINE, MOBILE ]
        type:
          type: string
          enum: [ PRIVATE, BUSINESS, OTHER ]

    place:
      type: object
      description: a origin or destination of a leg, 3D. lon/lat in WGS84.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA3/EA184.htm
        description: POINT
      # OR via PLACE https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA9/EA263.htm (.described by ZONE .represented by POINT)
      # coordinates.lat -> located by POINT.locating.Latitude / Coordinates
      # coordinates.lng -> located by POINT.locating.Longitude / Coordinates
      # name -> POINT.name
      # station -> ? (shared modes station - ID)
      # physicalAddress -> located by MODEL::ZONE <= MODEL:PLACE <= ADDRESSABLE PLACE describing ADDRESS <= POSTAL ADDRESS
      required:
        - coordinates
      properties:
        coordinates:
          $ref: "#/components/schemas/coordinates"
        name:
          description: Human readable name of the place, could match Content-Language
          type: string
          maxLength: 1000
        stopReference:
          $ref: "#/components/schemas/stopReference"
        station:
          description: reference to a station
          type: string
        physicalAddress:
          $ref: "#/components/schemas/address"
        extraInfo:
          type: object
          additionalProperties: 
            type: string
            maxLength: 1000
            maxProperties: 10

    planningStep:
      description: this action allows to publish advertisements together with the proposed leg.
      allOf:
      - $ref: "#/components/schemas/information"
      - type: object
        properties:
          action:
            type: string
            description: the `RESULT_SHOWN` action requires the MP to display some information to the customer when it is viewing the proposed legs.
            enum: [
              RESULT_SHOWN
            ]

    processIdentifiers:
      type: object
      required:
        - operatorInformation
        - booking
        - tripExecution
        - support
        - payment
      properties:
        operatorInformation:
          type: array
          maxItems: 25
          items:
            type: string
        booking:
          type: array
          maxItems: 25
          items:
            type: string
        tripExecution:
          type: array
          maxItems: 25
          items:
            type: string
        support:
          type: array
          maxItems: 25
          items:
            type: string
        payment:
          type: array
          maxItems: 25
          items:
            type: string

    requirement:
      type: object
      description: describes an (dis)ability or ancillary.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA8/EA254.htm
      required:
        - category
        - number
      properties:
        source:
          type: string
          description: if obsolete, it is referencing the travelers' dictionary (https://github.com/TOMP-WG/TOMP-API/blob/master/documents/CROW%20passenger%20characteristics.xlsx)
        category:
          type: string
          description: references to the first column of the specification 
                       initial values [ HR, AV, HV, AB, AER, K, ZR, RR ]
        number:
          type: string
          description: references to the second column of the specification
          minLength: 2
          maxLength: 2
        type:
          description: conditionally extra information, referencing to the 3th column
          type: string
        memo:
          description: extra field for detailed information, not standardized
          type: string
        variableNumber:
          description: in some requirements there is references to '[variable number]' e.g. of meters (like ZR06)
          type: integer
          minimum: 0
          maximum: 1000
        applicableDays:
          description: days of week that are applicable
          type: array
          maxItems: 7
          items: 
            type: string
            enum: [ MO, TU, WE, TH, FR, SA, SU ]

    requirements:
      description: Requirements from the end user side.
      type: object
      additionalProperties: true
      properties:
        abilities: 
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/requirement" 
        bringAlong:
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/requirement" 

    resumingStep:
      allOf:
      - $ref: "#/components/schemas/information"
      - type: object
        properties:
          action:
            type: string
            description: possible values<br>
              `UNLOCK_VEHICLE` - user action, could be triggered by SET_IN_USE operations<br>
              `SEND_OPEN_TRUNK` - request TO to open trunk remotely<br>
              `UNLOCK_TRUNK` - user action<br>
              `TAKE_HELMET` - user action<br>
              `LOCK_TRUNK` - user action<br>
              `START_VEHICLE` - user action<br>
              `SEND_SET_IN_USE` - the TO wants to be informed that the leg is resumed. Optionally triggers the unlock of the asset
            enum: [
              UNLOCK_VEHICLE,
              SEND_OPEN_TRUNK,
              UNLOCK_TRUNK, 
              TAKE_HELMET,
              LOCK_TRUNK,
              START_VEHICLE,
              SEND_SET_IN_USE
            ]

    serviceDescription:
      type: object
      description: a complete endpoint description, containing all endpoints, their status, but also the served scenarios and implemented process flows. The identifiers for the process flows can be found at https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers<br>
      required:
        - endpoints
      properties:
        endpoints:
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/endpoint"
        processIdentifiers:
          $ref: "#/components/schemas/processIdentifiers"
        steps:
          $ref: "#/components/schemas/serviceSteps"

    serviceSteps:
      type: object
      description: The steps can be specified here, when they are uniform over all assets. If some assets should be handled differently, it can be specified as a condition in the booking for that specific asset(type).
      properties:
        planning:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/planningStep"
        booking:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/bookingStep"
        onboarding:
          type: array
          maxItems: 10
          description: this array should be considered as a sequence!
          items:
            $ref: "#/components/schemas/onBoardingStep"
        offboarding:
          type: array
          maxItems: 10
          description: this array should be considered as a sequence!
          items:
            $ref: "#/components/schemas/offBoardingStep"
        pausing:
          type: array
          maxItems: 10
          description: this array should be considered as a sequence!
          items:
            $ref: "#/components/schemas/pausingStep"
        resuming:
          type: array
          maxItems: 10
          description: this array should be considered as a sequence!
          items:
            $ref: "#/components/schemas/resumingStep"

    stopReference:
      type: object
      description: reference to a stop (can be nation specific). This can help to specific pinpoint a (bus) stop. Extra information about the stop is not supplied; you should find it elsewhere.
      required:
        - type
        - id
        - country
      properties:
        type:
          type: string
          description: type of external reference (GTFS, CHB).
          enum: [
            GTFS_STOP_ID,
            GTFS_STOP_CODE,
            GTFS_AREA_ID,
            CHB_STOP_PLACE_CODE,
            CHB_QUAY_CODE,
            NS_CODE,
            UIC_CODE
          ]
        id:
          type: string
          description: this field should contain the complete ID. E.g. NL:S:13121110 or BE:S:79640040
        country:
          $ref: "#/components/schemas/country"

    suboperator:
      type: object
      description: The operator of a leg or asset, in case this is not the TO itself but should be shown to the user
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the operator, could match Content-Language
        operatorId:
          type: string
          description: the ID from the operator
        description:
          type: string
          description: short description of the operator, should match Content-Language
        contact:
          type: string
          description: contact information, should match Content-Language

    supportRequest:
      description: request for support
      type: object
      properties:
        id:
          type: string
          description: the booking id
        supportType:
          type: string
          enum: [
            BROKEN_DOWN, 
            NOT_AT_LOCATION, 
            MISSING_AFTER_PAUSE, 
            NOT_CLEAN, 
            NOT_AVAILABLE, 
            UNABLE_TO_OPEN, 
            UNABLE_TO_CLOSE, 
            API_TECHNICAL, 
            API_FUNCTIONAL, 
            ACCIDENT, 
            OTHER, 
            REPORT_DAMAGE
          ]
        location:
          $ref: '#/components/schemas/place'
        timestamp:
          type: string
          format: date-time
        priority:
          description: the priority of the support request.
          type: string
          enum: [
            ERROR_CANNOT_CONTINUE, 
            ERROR_CAN_CONTINUE, 
            DISTURBING_ISSUE, 
            QUESTION, 
            OTHER
          ]
        contactInformationEndUser:
          description: contact information of the end user in case of direct response requests, like phone number
          type: string
        comment:
          type: string
        requestedResponseTime:
          type: number
          format: float
          description: time to respond in minutes.
          minimum: 0
          maximum: 10000
        urls:
          type: array
          description: urls to clarify the support request e.g. pictures showing damage
          maxItems: 10
          items:
            type: string
            format: URI

    supportTicket:
      description: the current status of support
      type: object
      allOf:
        - $ref: '#/components/schemas/supportRequest'
      properties:
        status:
          type: string
          enum: [ 
            PROCESSING, 
            UPDATE_REQUESTED, 
            RESOLVED, 
            CANCELLED 
          ]
          example: PROCESSING
        timeToResolution:
          type: integer
          description: time in minutes to expected resolution of support request
          example: 9
        order:
          type: integer
          description: the sequence number of status of the support issue
          minimum: 0

    token:
      description: The validity token (such as booking ID, travel ticket etc.) that MaaS clients will display to show their right to travel, or use to access an asset
      type: object
      required:
        - validFrom
        - validUntil
        - tokenType
      properties:
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        tokenType:
          description: The type of data held in this token, will later be an enum
          type: string
          enum: [ DIGITAL_TICKET, DEEPLINK_ACCESS, EKEY, BINARY_ACCESS ]

    traveler:
      description: A generic description of a traveler, not including any identifying information
      type: object
      properties:
        isValidated:
          description: Whether this traveler's identity and properties have been verified by the MaaS provider
          type: boolean
        age:
          description: Age of the traveler, may be approximate
          type: integer
          minimum: 0
          maximum: 200
        referenceNumber:
          description: reference number of the traveler. This number could be used to refer to in the planning result.
          type: string
        cardTypes:
          description: The kind of cards this traveler possesses
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/cardType"
        licenseTypes:
          description: The kind of licenses this traveler possesses
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/licenseType"
        requirements:
          $ref: "#/components/schemas/requirements"

    travelRequest:
      description: A travel planning for which bookable options are requested
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA4/EA5/EA3147.htm
        description: TRIP REQUEST
      # from -> starting at 
      # to -> ending at 
      # startTime / endTime -> TimeOfTravel / TravelTimeConstraint
      ## useAssets -> 
      ## useAssetTypes -> limit to MODEL::MODE
      ## nrOfTravelers ->
      # radius -> limit start leg to TRIP ACCESS CONSTRAINT MaximumDistance
      ## previousLegs ->
      ## estimatedDistance ->
      # travelers -> limit to TRIP REQUEST FILTER limit to TRIP MOBILITY FILTER limit to ACCESSIBILITY ASSESSMENT (see "#/components/schemas/traveler")
      ## userGroups -> 
      type: object
      required:
        - from
      properties:
        from:
          $ref: "#/components/schemas/place"
        to:
          $ref: "#/components/schemas/place"
        startTime:
          description: The intended departure time. 
            If left out and no endTime is set, the current time should be assumed. 
            If only the arrival time is specified, this is an implicit request for a guaranteed arrival at that time.
          type: string
          format: date-time
        endTime:
          description: The intended arrival time, at the `to place`. If not set, the time the user intends to stop using the asset (implicit request for arrival guarantee).
          type: string
          format: date-time
        useAssets:
          description: The specific asset(s) the user wishes to receive trip options for. See also endpoint.useAssets specification
          type: array
          maxItems: 25
          items:
            type: string
        useAssetTypes:
          description: The specific asset type(s) the user wishes to receive trip options for. See also endpoint.useAssetTypes specification
          type: array
          maxItems: 5
          items:
            $ref: "#/components/schemas/assetType"
          
        nrOfTravelers:
          description: The number of people that intend to travel, including the customer.
          type: integer
          minimum: 1
          maximum: 100
        radius:
          description: Maximum distance in meters a user wants to travel to reach the travel option
          type: integer
          minimum: 0
          maximum: 1000
        previousLegs:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/connectedLegInfo"
            
        estimatedDistance:
          type: integer
          description: instead of using the from/to construct, it is also possible to give an indication of the distance to travel. 
            The process identifier 'USE_ESTIMATED_DISTANCE' is used to indicate this scenario. Also in meters
          minimum: 0
          maximum: 1000000

        travelers:
          description: Extra information about the people that intend to travel if relevant, length must be less than or equal to nrOftravelers.
          type: array
          maxItems: 50
          items:
            $ref: "#/components/schemas/traveler"
        userGroups:
          description: Id(s) of user groups that the user belongs to. This provides access to exclusive assets that are hidden to the public. Id's are agreed upon by TO and MP.
          type: array
          maxItems: 10
          items:
            type: string
            format: a usergroup id for this operator
        extraInfo:
          description: dictionary for extra fields (bilatural agreements)
          type: object
          additionalProperties: 
            type: string

    travelOptionsResponse:
      description: A travel planning with bookable options that fulfil the constraints of the planning
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA4/EA5/EA3156.htm
        description: TRIP DELIVERY
      type: object
      required:
        - validUntil
        - options
      properties:
        validUntil:
          description: The time until which the presented options are (likely) available
          type: string
          format: date-time
        options:
          type: array
          maxItems: 100
          items: 
            $ref: "#/components/schemas/bookingResponse"

    uuid:
      type: string
      format: UUID
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      externalDocs:
        url: https://en.wikipedia.org/wiki/Universally_unique_identifier
        # also: https://www.ietf.org/rfc/rfc4122.txt

  parameters:
    acceptLanguage:
      in: header
      name: Accept-Language
      required: true
      schema:
        type: string
        format: A comma-separated list of BCP 47 (RFC 5646) language tags and optional weights as described in IETF RFC7231 section 5.3.5
      description: A list of the languages/localizations the user would like to see the results in. For user privacy and ease of use on the TO side, this list should be kept as short as possible, ideally just one language tag from the list in operator/information
      example: nl, de;q=0.7
    senderId:
      in: header
      name: sending-id
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
      description: The ID of the sending operator
      example: 1324A-DFB3482-32ACD
    receiverId:
      in: header
      name: receiving-id
      required: false
      schema:
        $ref: "#/components/schemas/uuid"
      description: the ID of the intended receiver
      example: 1324A-DFB3482-32ACD

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes: {}
    OpenId:
      type: openIdConnect
      openIdConnectUrl: https://unknownserver/.well-known/openid-configuration

  responses:
    204NoContent:
      description: Request was successful, no content to return.
    409Conflict:
      description: The request will not be fulfilled. The request itself is legal, but the content conflicts with the server and might be stale. The user might try again after looking up the current state of the resource.
      content:
        application/json:
          schema:
            type: object
    410Gone:
      description: The requested resource is no longer available. This is permanent.
      content:
        application/json:
          schema:
            type: object
    errorResponse:
      description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
      content:
        application/json:
          schema:
            type: array
            maxItems: 3
            items:
              $ref: "#/components/schemas/error"
