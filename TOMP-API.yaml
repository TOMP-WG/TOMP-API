openapi: 3.0.0
info:
  title: Transport Operator MaaS Provider API
  description:
    "<h3>Context</h3>
    It allows technical communication between Transport Operators (TO) and MaaS providers (MP, and other resellers), to fulfill a complete MaaS user journey<br>
    It provides functions for Booking, Trip Execution, Support, Payment and Operation Information.<br><br>

    For more information: <a href='https://github.com/TOMP-WG/TOMP-API/wiki/OpenAPI-entry-page'>TOMP-API wiki</a>.<br><br>

    <b>Convention</b><br>
    In the specification we use these 'coding conventions':<br>
    <table border=1>
    <tr><td>&nbsp;`URLs`</td><td>&nbsp;to specify a URL, referring to endpoints in the specification</td></tr>
    <tr><td>&nbsp;[conditions]</td><td>&nbsp;free format conditions for a specific line</td></tr>
    <tr><td>&nbsp;<i>PROCESS_IDENTIFIER_NAME</i></td><td>&nbsp;see <a href='https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers'>Process Identifiers</a></td></tr>
    <tr><td>&nbsp;<u>MODULE NAME</u></td><td>&nbsp;for the module names, like <u>BOOKING</u></td></tr>
    <tr><td>&nbsp;CONCEPT NAME</td><td>&nbsp;referring to concepts that are described in the specification</td></tr>
    <tr><td>&nbsp;**property name**</td><td>&nbsp;referring to fields/attributes/properties in a concept</td></tr>
    <tr><td>&nbsp;_enumeration value_</td><td>&nbsp;referring to values from specific properties</td></tr>
    </table>
    "
  version: "2.0.0"
  contact:
    url: https://github.com/TOMP-WG/TOMP-API
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: booking
    description: The <u>BOOKING MODULE</u> contains functionality to request offers, book them or create bookings directly based on external information. Allows also to cancel or commit a non-final booking.

  - name: trip execution
    description: The <u>TRIP EXECUTION MODULE</u> contains functionality to execute the booked leg(s). Operations like starting, pausing and ending, but also functions like adding/removing ancillaries.

  - name: support
    description: the <u>SUPPORT MODULE</u> facilitates handling support requests

  - name: payment
    description: the <u>PAYMENT MODULE</u> allows to request a financial transaction and report costs

  - name: interoperability
    description: the <u>INTEROPERABILITY MODULE</u> contains the technical specification of the implementation, how it works together with other standards and an endpoint to check the uptime.

# security. Allowed methods basic (in header: Authorization: Basic ZGVtbzpwQDU1dzByZA==),
#                           bearer (in header: Authorization: Bearer <token>)
#                           Api-key (in header: X-API-Key: abcdef12345)
#                           OAutb and OpenId are also available
# The exact ways to authenticate will be described in a later version
security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []
  - OAuth: []
  - OpenId: []

servers:
  - url: https://tomp.dat.nl/

paths:
  /offers:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    post:
      summary: "[MP->TO] get trip offers to get from A to B"
      description: Returns offers (bookable trips) based on user requirements
      tags:
        - booking
      requestBody:
        description: the initial request, containing locations, timestamps, CARD TYPEs and LICENSE TYPEs, and personal preferences/(dis)abilities. Can also contain a direct reference to an ASSET or ASSET TYPE.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tripRequest"
      responses:
        "201":
          description: a list of bookable trips, if there is no option, it will return an empty list. Each bookable trip has a unique identifier, that can be used to book it.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              description: The result is valid until this timestamp. The _PENDING_ booking is expired after this timestamp. 
              schema:
                $ref: "#/components/schemas/httpDate"
              required: false
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tripOptionsResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/bookingId"
    post:
      summary: "[MP->TO] book an offered trip"
      description: The offered trip is transformed into a booked one. Dependend of the process identifiers (<i>AUTO_COMMIT</i> or <i>ATOMIC_BOOKING_SET_IN_USE</i>) the BOOKING is _PENDING_ 
        (to be committed using the `POST /bookings/{id}/operations/COMMIT`) or _CONFIRMED_.
      tags:
        - booking
      requestBody:
        description: additional information required to create a BOOKING. This information can be retrieved from the the LEGs' **conditions**.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bookingRequest"

      responses:
        "201":
          description: A new BOOKING was succesfully created, **status** _PENDING_ or _CONFIRMED_.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookingResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
        default:
          $ref: "#/components/responses/errorResponse"
        "409":
          $ref: "#/components/responses/409Conflict"
        "410":
          $ref: "#/components/responses/410Gone"
    get:
      summary: "[MP->TO] give booking details"
      description: Retrieves BOOKING, including the log of this booking (all LEGs)
      tags:
        - trip execution
      parameters:
      - in: query
        name: selection
        description: "DETAILS - booking only<br>
          WITH_LOGS - booking & event log<br>
          ONLY_LOGS - event log only<br>
          WITH_PROGRESS - booking & progress<br>
          ONLY_PROGRESS - progress only<br>
          ALL - booking, logs & progress<br>"
        required: false
        schema:
          type: string
          enum: [ ALL, DETAILS, WITH_LOGS, WITH_PROGRESS ]
          default: DETAILS
      responses:
        "200":
          description: the details of this BOOKING, including the log containing all logged OPERATIONs and progress.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/bookingResponse"
                - type: object
                  properties:
                    log:
                      type: array
                      maxItems: 100
                      items:
                        $ref: "#/components/schemas/logEntry"
                    progress:
                      description: A list of COORDINATEs describing the progress so far as GEOJSONLINE
                      $ref: "#/components/schemas/geojsonLine"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/one-stop:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    post:
      summary: "[MP->TO] directly book a trip, without offer"
      description:
        Creates a BOOKING for the given trip. This endpoint executes `POST /offers` and `POST /bookings/{id}` in one blow, the information provided by the first one should lead 
        to only one possible trip option, that is booked directly. The returned BOOKING is in a _PENDING_ state, you have to commit it (using `POST /bookings/{id}/operations/COMMMIT`), 
        unless one of the PROCESS IDENTIFIERs is applied that indicates that another BOOKING STATE is used.
      tags:
        - booking        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/oneStopBookingRequest"
      responses:
        "201":
          description: a BOOKING, or when it's not possible, return a 406.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookingResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/operations/{operation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/bookingId"
      - name: operation
        in: path
        description: OPERATION to execute
        required: true
        schema:
          type: string
          enum: [ 
            EXTEND_EXPIRY_TIME, 
            COMMIT, 
            CANCEL, 
            NOTIFY,
            FINANCIAL_TRANSACTION
          ]
    post:
      summary: "[MP<->TO] request {operation} on this booking"
      description: This endpoint **must** be used to alter the state of a BOOKING:<br>
        _CANCEL_ - [MP->TO] Cancels a BOOKING, it returns a BOOKING in a _CANCEL_led state.<br> 
        _EXTEND_EXPIRY_TIME_ - [MP->TO] the MP request to extend the expiry time. Only available when the Process Identifier <i>ALLOW_EXTEND_BOOKING_EXPIRY_TIME</i> is used. Whenever the extension is not granted, 410 should be returned.<br> 
        _COMMIT_ - [MP->TO] Turns the BOOKING in a _CONFIRMED_ state, the previous state should be _PENDING_. If the BOOKING is in state _CONFIRMED_, _CANCELLED_ or _EXPIRED_, a commit will result a 403. <BR> 
        _NOTIFY_ - [MP<->TO] Notification to MP, traveler or TO<Br>
        _FINANCIAL_TRANSATION_ - [MP<->TO] request a (direct) financial transaction. If there is no contract telling otherwise, this money has to be transferred immediately.
      tags:
        - booking        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationRequest"
      responses:
        "200":
          description: The modified booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookingResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
              description: Mandatory whenever the _EXTEND_EXPIRY_TIME_ is used. It must contain the updated expiry time
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/bookingId"
      - $ref: "#/components/parameters/legId"
    get:
      summary: "[MP->TO] give leg details"
      description: Retrieves the latest summary of the LEG, being the execution of a part of a journey traveled using one ASSET (TYPE). 
        Every LEG belongs to one BOOKING, every BOOKING has at least one LEG. Where the BOOKING describes the agreement between user/MP and TO, 
        the LEG describes the journey part as it occured.
      tags:
        - trip execution        
      responses:
        "200":
          description: the details of the LEG, in the current LEG STATE
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legResponse"
        default:
          $ref: "#/components/responses/errorResponse"
          
  /bookings/{id}/legs/{lid}/operations/{operation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/bookingId"
      - $ref: "#/components/parameters/legId"
      - name: operation
        in: path
        description: OPERATION on the LEG
        required: true
        schema:
          type: string
          enum: [
            PREPARE,
            ASSIGN_ASSET,
            SET_IN_USE,
            PAUSE,
            OPEN_TRUNK,
            START_FINISHING,
            FINISH,
            TIME_EXTEND,
            TIME_POSTPONE,
            CANCEL,
            NOTIFY,
            ADD_ANCILLARY,
            REMOVE_ANCILLARY,
            CONFIRM_REPLACE_VEHICLE,
            CONFIRM_START_LEG,
            FINANCIAL_TRANSACTION,
            SEND_EVIDENCE_PARKED,
            SEND_EVIDENCE_HELMET,
            SEND_EVIDENCE_CHARGER
          ]
    post:
      summary: "[MP<->TO] request {operation} on this leg"
      description: This ENDPOINT must be used to alter the STATE of a LEG, to request OPERATIONs.<br>
        Operations:<br> 
        _PREPARE_ [MP->TO, non-TO-controlled] - MP request the TO to prepare the LEG (e.g. open the locker) [ONBOARDING STEP, RESUMING STEP]<br>
        _PREPARE_ [MP<-TO, process identifier TO-controlled] - the TO can send a message telling the MP that he is preparing the booked LEG, e.g. the taxi is heading to the pickup point<br>
        _ASSIGN_ASSET_ [MP->TO] - can assign an ASSET to a LEG. Can be used to replace an ASSET, or as first step in the trip execution process [ONBOARDING STEP]<br>If assigning an ASSET is not allowed for this booking 403 should be returned. If the booking is unknown, 404 should be returned.<br>
        _SET_IN_USE_ [MP->TO, non-TO-controlled] - will activate the LEG or resume the LEG [ONBOARDING STEP, RESUMING STEP]<br>
        _SET_IN_USE_ [MP<-TO, process identifier TO-controlled] - the driver indicates the LEG is started<br>
        _TIME_EXTEND_ [MP->TO] will be used to request an extension in time; the TRAVELER wants to use the ASSET longer, the **time** field contains the proposed end time,<br>
        _TIME_POSTPONE_ [MP->TO] will be used to request a delay in the departure time, the TRAVELER wants to depart later, the **time** field contains the estimated departure time,<br>
        _PAUSE_ [MP->TO] will pause the LEG [PAUSING STEP]<br>
        _OPEN_TRUNK_ [MP->TO] request the TO to open up the trunk (of the scooter), e.g. to store the helmet [ONBOARDING STEP, OFFBOARDING STEP, PAUSING STEP, RESUMING STEP]<br>
        _START_FINISHING_ [MP->TO] will start the end-of-leg process [OFFBOARDING STEP]<br>
        _START_FINISHING_ [MP<-TO, process identifier TO-controlled] TO indicates that the LEG is almost finishing<br>
        _FINISH_ [MP->TO] will end this LEG [OFFBOARDING STEP]<br>
        _FINISH_ [MP<-TO, process identifier TO-controlled] the TO indicates that the LEG is finished, the destination has been reached.<br>
        _CANCEL_ [MP<->TO] will cancel this LEG. Only allowed when multiple LEGs are included in the BOOKING, otherwise the complete BOOKING should be cancelled<br>
        _NOTIFY_ [MP<->TO] will send a notification to TO, driver, MP or TRAVELER(s)<br>
        _ADD_ANCILLARY_ [MP->TO] requests to add the specified ANCILLARY to the LEG<br>
        _REMOVE_ANCILLARY_ [MP->TO] requests to remove the specified ANCILLARY from the LEG<br>
        _CONFIRM_REPLACE_VEHICLE_ [MP<-TO] asks confirmation to replace the ASSET, returns a 202 when confirmed, otherwise it will return 400<br>
        _CONFIRM_START_LEG_ [MP<-TO] asks confirmation to start the LEG, returns a 202 when confirmed, otherwise it will return 400<br>
        _FINANCIAL_TRANSATION_ [MP<->TO] request a (direct) financial transaction. If there is no contract telling otherwise, this money has to be transferred immediately.<br>
        _SEND_EVIDENCE_PARKED_ [MP->TO] sends pictures (in url field) to prove that the ASSET is parked correctly<br>
        _SEND_EVIDENCE_HELMET_ [MP->TO] sends pictures (in url field) to prove that the helmet is stowed correctly<br>
        _SEND_EVIDENCE_CHARGER_ [MP->TO] sends pictures (in url field) to prove that the ASSET connected correctly to the charger<br>
      tags:
        - trip execution        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationRequest"
      responses:
        "200":
          description: OPERATION successful, the leg is returned in the new state.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legResponse"
        "202":
          description: When a confirmation request has to return positive, this code has to be used
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legResponse"
        "400":
          description: When a confirmation request results in a denial, this code has to be used
          $ref: "#/components/responses/errorResponse"
        "503":
          description: In case of temporary malfunctioning, this response can be send (e.g. bluetooth lock jammed). See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
          headers:
            Retry-After:
              description: A date after which to retry. See the Date header for more details on the HTTP date format.
              schema:
                $ref: "#/components/schemas/httpDate"
          $ref: "#/components/responses/errorResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}/available-assets:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/bookingId"
      - $ref: "#/components/parameters/legId"
    get:
      summary: "[MP->TO] give possible assets to assign to this leg"
      description: Returns a list of available ASSETs for the given leg. These results can be used to call `POST /bookings/{id}/legs/{lid}/operations/ASSIGN_ASSET`. 
      tags:
        - trip execution        
      responses:
        "200":
          description: Available ASSETs for the leg. If no suitable assets are found an empty array is to be returned.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/availableVehicleResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /discovery:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    get:
      tags:
        - interoperability
      summary: "[TO<->MP] discover the API"
      description: "[MP|TO] All implemented endpoints are described, including the list of PROCESS IDENTIFIERs."
      responses:
        '200':
          description: successful operation
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/serviceDescription"
        default:
          $ref: "#/components/responses/errorResponse"

  /ping:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
    get:
      tags:
        - interoperability
      summary: "[TO<->MP] is the API available?"
      description: "[MP|TO] This is a healthcheck ENDPOINT to see if the TO is up and running perfectly."
      responses:
        "204":
          description: successful operation
        default:
          $ref: "#/components/responses/errorResponse"

  /journal-entries:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    get:
      tags:
        - payment
      summary: "[MP->TO] give all financial details"        
      description: Returns all the JOURNAL ENTRIES that should be paid (per LEG)
      parameters:
        - name: from
          in: query
          description: start of the selection
          required: false
          schema:
            $ref: "#/components/schemas/dateTime"
        - name: to
          in: query
          description: end of the selection
          required: false
          schema:
            $ref: "#/components/schemas/dateTime"
        - name: state
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/journalState"
        - name: id
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/uuid"
        - name: category
          in: query
          description: type of JOURNAY ENTRY (e.g. fare, addition costs, fines, ...)
          required: false
          schema:
            $ref: "#/components/schemas/journalCategory"
        - name: offset
          in: query
          description: start of the selection
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
        - name: limit
          in: query
          description: count of the selection
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
      responses:
        "200":
          description: journal entries
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                allOf:
                - type: object
                  properties:
                    data:
                      type: array
                      maxItems: 100
                      items:
                        allOf:
                          - $ref: "#/components/schemas/amountOfMoney"
                          - $ref: "#/components/schemas/journalEntry"
                - $ref: "#/components/schemas/halLinks"
                  example:
                      "_links": { "self": { "rel": "GET", "href": "/journal-entries&offset=100&limit=100", "type": "application/hal+json" },
                        "next": { "rel": "GET", "href": "/journal-entries&offset=200&limit=100", "type": "application/hal+json" },
                        "previous": { "rel": "GET", "href": "/journal-entries&limit=100", "type": "application/hal+json" }
                      }
        default:
          $ref: "#/components/responses/errorResponse"

  /bookings/{id}/legs/{lid}/support/:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/bookingId"
      - $ref: "#/components/parameters/legId"
    post:
      summary: "[MP->TO] create a support ticket"
      description: creates a request for SUPPORT from end user via MP
      tags:
        - support        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/supportRequest"
      responses:
        "200":
          description: support request acknowledged
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/supportTicket"
        default:
          $ref: "#/components/responses/errorResponse"
    get:
      summary: "[MP->TO] request for support ticket details"
      description: Gets the status report of this BOOKING id. Last status (highest order number) is the current status
      tags:
        - support        
      responses:
        "200":
          description: support status delivered
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/supportTicket"
        default:
          $ref: "#/components/responses/errorResponse"

components:
  schemas:
    address:
      type: object
      description: address parts, where addressLine1 and 2 should contain the complete address, matches Content-Language
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA5/EA319.htm
        description: POSTAL ADDRESS
      # addressLine1 -> AddressLine1
      ## addressLine2 -> 
      # street -> Street
      # houseNumber -> HouseNumber
      # houseNumberAddition -> HouseNumber
      # postalCode -> PostCode
      # city -> Town
      # province -> Province
      ## state -> 
      # country -> hosting COUNTRY.name
      required:
        - addressLine1
        - addressLine2
      properties:
        addressLine1:
          type: string
          description: contains street, housenumber & additions
          example: example street 18, 2nd floor, 18-B33
        addressLine2:
          type: string
          description: city or town, principal subdivision such as province, state or county
          example: Smallcity, Pinetree county

        street:
          type: string
          description: street, consistent with addressLine1
        houseNumber:
          type: number
          description: house number, consistent with addressLine1
          minimum: 1
        houseNumberAddition:
          type: string
          description: the additional part of the house number (f.x. 13bis, where 'bis' is the additional part), consistent with addressLine1
          
        postalCode:
          type: string
          description: the postal code, whenever available
        city:
          type: string
          description: specified city or town, consistent with addressLine2

        province:
          type: string
          description: province or region, consistent with addressLine2
        state:
          type: string
          description: state, consistent with addressLine2
        country:
          $ref: "#/components/schemas/country"

        addressAdditionalInfo:
          type: string
          description: additional information to find the address (f.x. just around the corner)

    amountOfMoney:
      type: object
      description: an amount of money, usable in fares, fare calculations or in extra costs.
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA2/EA1688.htm
        description: FARE PRICE
      # amount => Amount
      # vatRate => TaxPercentageUsed
      ## currencyCode => ?
      ## vatCountryCode => ?
      required:
      - amount
      properties:
        amount:
          type: number
          description: This should be in the base unit as defined by the ISO 4217 currency code with the appropriate number of decimal places and omitting the currency symbol. e.g. if the price is in US Dollars the price would be 9.95. This is inclusive VAT
          example: 9.95
          format: float
          minimum: 0
        taxPercentageUsed:
          type: number
          description: value added tax rate (percentage of amount)
          example: 21.0
          format: float
          minimum: 0
        currencyCode:
          $ref: "#/components/schemas/currencyCode"
        vatCountryCode:
          $ref: "#/components/schemas/country"

    asset:
      description: the asset that can by applied to execute a leg.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3578.htm
        description: VEHICLE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA2/EA3719.htm (PARKING BAY)
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA3/EA1/EA3735.htm (CYCLE STORAGE EQUIPMENT)
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA3/EA2/EA3742.htm (VEHICLE CHARGING EQUIPMENT)
      required:
        - id
      additionalProperties: false
      properties:
        id:
          type: string
          description: Identifier of an asset. Whenever used in Operator Information changed after every trip (GDPR). Preferably UUID
        visualId:
          type: string
          description: for instance, a license plate or seat number. The usage of this field requires a secure environment/connection.

        assetType:
          $ref: "#/components/schemas/assetType"            
        assetClass:
          $ref: "#/components/schemas/assetClass"
        assetSubClass:
          type: string
          description: a more precise classification of the asset, like 'cargo bike', 'public bus', 'coach bus', 'office bus', 'water taxi',  'segway'. This is mandatory when using 'OTHER' as class.
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA2/EA293.htm

        state:
          $ref: "#/components/schemas/assetState"
        eco:
          $ref: "#/components/schemas/assetPropertiesEco"
        cargo:
          $ref: "#/components/schemas/assetPropertiesCargo"

        fulfilments:
          type: array
          description: Array of data to open a specific asset (Bluetooth, ekey, certificates, digital tokens) or travel right (e.g. AZTEC, QR code, image base64)
          maxItems: 3
          items:
            $ref: "#/components/schemas/fulfilment"

        # app support
        appSupport:
          type: object
          properties:
            description:
              type: string
              description: the description of the asset
            image:
              $ref: "#/components/schemas/url"
              description: Link to an image of the asset
              example: "https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg"
            icon:
              $ref: "#/components/schemas/url"
              description: Link to an icon of the asset

        # booking support
        defaultReserveTime:
          type: integer
          description: Maximum time in minutes that an asset can be reserved before a rental begins. When an asset is reserved by a user, the asset remains locked until the rental begins. During this time the asset is unavailable and cannot be reserved or rented by other users. The asset status in free_bike_status.json MUST be set to is_reserved = true. If the value of default_reserve_time elapses without a rental beginning, the asset status MUST change to is_reserved = false. If default_reserve_time is set to 0, the asset type cannot be reserved.
          minimum: 0
          maximum: 999999

        ancillaries:
          type: array
          description: ancillaries belonging to the asset, like a child seat
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
            description: VEHICLE EQUIPMENT PROFILE
          maxItems: 100
          items:
            $ref: "#/components/schemas/requirement"

        extraInfo:
          $ref: "#/components/schemas/customProperties"

          ## GENERIC
          # name
          # brand
          # model
          # buildingYear (integer)
          # colour
          # maxSpeed (integer)

          ## BIKES
          # nrOfHelmets (integer)

          ## CARS
          # wheelCount (integer)
          # propulsion (enum: [ ELECTRIC, GASOLINE, DIESEL, HYBRID, LPG, HYDROGEN ])
          #   externalDocs https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3577.htm (TYPE OF FUEL)
          # gears (integer)
          #   description: number of gears
          # gearboxType (enum: [ MANUAL, AUTOMATIC, SEMIAUTOMATIC ])
          # airConditioning (boolean)
          # cabrio (boolean)
          # towingHook (boolean)
          # wintertires (boolean) 
          #   description: winter tires applied
          # nrOfDoors (integer)
          # navigation (boolean)
          # cruiseControl (boolean)
          # nrOfPassengers (integer)

    assetClass:
      type: string
      description: These classes are taken from the NeTeX standard, but ALL and UNKNOWN are removed. On the other hand OTHER and PARKING are added.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA1/EA284.htm
        description: MODE
      enum: [ 
        AIR,
        BUS,
        TROLLEYBUS,
        TRAM,
        COACH,
        RAIL,
        INTERCITYRAIL,
        URBANRAIL,
        METRO,
        WATER,
        CABLEWAY,
        FUNICULAR,
        TAXI,
        SELFDRIVE,
        FOOT,
        BICYCLE,
        MOTORCYCLE,
        CAR,
        SHUTTLE,
        OTHER,
        PARKING,
        MOPED,
        STEP,
        FERRY
      ]

    assetType:
      type: string
      description: an URI/UUID/ID referencing an asset type. Look at endpoint.useAssetTypes for possibilities.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3580.htm
        description: TRANSPORT TYPE
      # or https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3581.htm (VEHICLE TYPE)

    assetPropertiesCargo:
      type: object
      description: applicable properties to specify cargo space/loads
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)    
      properties:
        cargo:
          type: string
          description: describes options to carry cargo, should match Content-Language
        cargoVolume:
          type: integer
          description: the volume in liters of the cargo
          minimum: 0
          maximum: 999999
        cargoLoad:
          type: integer
          description: the weight in kilograms of the cargo
          minimum: 0
          maximum: 999999

    assetPropertiesEco:
      type: object
      description: applicable properties to specify ecological/environmental aspects
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)    
      properties:
        energyLabel:
          type: string
          description: Energy efficiency label
          enum: [ A, B, C, D, E ]
        ecoLabel:
          type: array
          description: see https://github.com/MobilityData/gbfs/blob/v2.3/gbfs.md
          maxItems: 3
          items: 
            type: object
            additionalProperties: false
            properties:
              ecoSticker:
                type: string
              countryCode:
                $ref: "#/components/schemas/country"
        co2PerKm:
          type: number
          description: the emission of CO2 per km
          format: float
          minimum: 0
          maximum: 999999

    assetState:
      type: object
      description: the state of the asset, where is it, the damages, etc
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      properties:
        location:
          $ref: "#/components/schemas/place"
        mileage:
          type: number
          description: the current mileage of the asset, in km
          format: float
          minimum: 0
          maximum: 999999
        stateOfCharge:
          type: number
          description: percentage of charge available
          format: float
          minimum: 0
          maximum: 100
        maxRange:
          type: number
          description: maximum range in meters
          format: float
          minimum: 0
          maximum: 999999
        damages:
          type: array
          description: List of known asset damages.
          maxItems: 100
          items: 
            $ref: "#/components/schemas/damage"

    availableVehicleResponse:
      type: array
      description: container to return assets, including their possible operations
      maxItems: 100
      items:
        allOf:
          - $ref: "#/components/schemas/asset"
          - $ref: "#/components/schemas/halLinks"

    bankAccount:
      type: object
      description: bank account
      additionalProperties: false
      properties:
        name:
          type: string
          description: account name
        number:
          type: string
          description: account number
        country:
          $ref: "#/components/schemas/country"
        bankIdentification:
          type: string
          description: bank identification, like BIC code

    binaryAccess:
      description: Binary information, like a image (QR)
      allOf:
        - $ref: "#/components/schemas/fulfilmentType"
        - type: object
          additionalProperties: false
          required:
            - base64
          properties:
            base64: 
              type: string
              description: base 64 QR code
            version: 
              type: string

    booking:
      description: a booking is a recording of an agreement between end user and TO, to execute a trip (=set of legs) according a specification, including all conditions
      #externalDocs:
        # url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2957.htm
        # https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA1/EA2242.htm (SALES OFFER PACKAGE)
          # bookingState
          # customer
          # additionalLegs
        # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2417.htm (CUSTOMER PURCHASE PACKAGE)
          # bookingState -> CUSTOMER PURCHASE STATUS
          # customer -> CUSTOMER ACCOUNT .registered to TRANSPORT CUSTOMER
          # additionalLegs -> CUSTOMER PURCHASE PACKAGE ELEMENTS
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2413.htm
        description: TRAVEL SPECIFICATION
      allOf:
        - $ref: "#/components/schemas/leg"
        - type: object
          description: The booking information describing the state and details of an agreed upon trip
          additionalProperties: false
          properties:
            bookingState:
              $ref: "#/components/schemas/bookingState"

            customer:
              description: The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData
              $ref: "#/components/schemas/customer"

            additionalLegs:
              type: array
              description: The additional legs of this booking (one booking -> all properties are already in the booking).
                All other legs should be in this collection, using the sequenceNumber to arrange them.
              maxItems: 100
              items:
                $ref: "#/components/schemas/leg"

            extraInfo:
              $ref: "#/components/schemas/customProperties"
                  
    bookingResponse:
      description: a response containing a booking and the possible operations
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2413.htm
        description: TRAVEL SPECIFICATION
      allOf:
      - $ref: "#/components/schemas/booking"
      - $ref: "#/components/schemas/halLinks"
        example: {
            # planning: create booking, only when bookingStatus = NEW
                "book": { "rel": "POST", "href": "/bookings/{id}", "type": "application/hal+json", "templated": true }
            # booking
              # only when bookingStatus = PENDING
              , "commit": { "rel": "POST", "href": "/bookings/{id}/operations/COMMIT", "type": "application/hal+json", "templated": true } 
              , "cancel": { "rel": "POST", "href": "/bookings/{id}/operations/CANCEL", "type": "application/hal+json", "templated": true }
              , "extend_expiry_time": { "rel": "EXTEND_EXPIRY_TIME", "href": "/bookings/{id}/operations/EXTEND_EXPIRY_TIME", "type": "application/hal+json", "templated": true }
              # only when bookingStatus = CONDITIONAL_CONFIRMED
              , "deny": { "rel": "POST", "href": "/bookings/{id}/operations/DENY", "type": "application/hal+json", "templated": true }
            # trip execution
              , "leg": { "rel": "GET", "href": "/bookings/{id}/legs/{lid}", "type": "application/hal+json", "templated": true } 
              , "booking": { "rel": "GET", "href": "/bookings/{id}", "type": "application/hal+json", "templated": true } 
              # only when bookingStatus = CONFIRMED
              , "prepare": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/PREPARE", "type": "application/hal+json", "templated": true }
              , "set_in_use": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/SET_IN_USE", "type": "application/hal+json", "templated": true }
              , "time_postpone": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/TIME_POSTPONE", "type": "application/hal+json", "templated": true }
              , "open_trunk": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/OPEN_TRUNK", "type": "application/hal+json", "templated": true }
              , "add_ancillary": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/ADD_ANCILLARY", "type": "application/hal+json", "templated": true }
        }

    bookingRequest:
      type: object
      description: A booking request, to be performed by the MP
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA4/EA5/EA3147.htm
        description: TRIP REQUEST
        ## customer -> TRIP REQUEST FILTER . TRIP MOBILITY FILTER . ACCESSIBILITY ASSETSSMENT
        # from -> TRIP ORIGIN PLACE
        # to -> TRIP DESTINATION PLACE
        ## callbackUrl
      properties:
        customer:
          description: The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData
          $ref: "#/components/schemas/customer"
        from:
          description: information about the origin, only to supply when requested in the conditionRequireBookingData
          $ref: "#/components/schemas/place"
        to:
          description: information about the destination, only to supply when requested in the conditionRequireBookingData
          $ref: "#/components/schemas/place"
        callbackUrl: 
          $ref: "#/components/schemas/url"
          description: The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST /bookings/{id}/legs/{lid}/operations/ and POST /bookings/{id}/operations/. Only to be provided 
            when this deviates from standard or agreed URL.
          
    bookingState:
      type: string
      description: The life-cycle state of the booking (from NEW to FINISHED)
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2420.htm
        description: CUSTOMER PURCHASE STATUS
      enum: [ NEW, PENDING, REJECTED, RELEASED, EXPIRED, CONFIRMED, CANCELLED, STARTED, FINISHED ]
      example: CONFIRMED

    bookingStep:
      description: a step in the booking process, where the MP should show something or an action is required from the end user/traveler
      allOf:
      - $ref: "#/components/schemas/information"
      - type: object
        additionalProperties: false
        properties:
          action:
            type: string
            description: The possible steps are described here<br>
                  _PENDING_  show whenever the booking is in PENDING state (not confirmed)<br>
                  _WAITING_  indicate that the TO is processing the booking, optionally after an extension of the expiry time<br>
                  _WAITING_FOR_PAYMENT_  indicate that the payment hasn't been settled, after an extension of the expiry time with reason payment<br>
                  _CANCELLED_  show whenever the booking is cancelled<br>
                  _CONDITIONAL_CONFIRMED_  show whenever the booking is conditionally confirmed (see process identifiers)<br>
                  _EXPIRED_  show whenever the booking is expired (the expiry time has passed)<br>
            enum: [ PENDING, WAITING, WAITING_FOR_PAYMENT, CONFIRMED, CANCELLED, EXPIRED ]

    card:
      description: Any kind of card that isn't a license, only provide the cards that are required
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA3/EA2368.htm
        description: CUSTOMER PAYMENT MEANS
        # MISSING: Identification/Passport
      allOf:
      - $ref: "#/components/schemas/cardType"
      - type: object
        additionalProperties: false
        required:
          - cardNumber
          - validUntil
        properties:
          cardDescription:
            type: string
            description: description of the card
          cardNumber:
            type: string
            description: number of the card, like ID number, credit card or bank account number
          cardAdditionalNumber:
            type: string
            description: additional number, like CVC code or IBAN code
          validUntil:
            type: string
            description: this card is valid until this date
            format: date
          country:
            $ref: "#/components/schemas/country"

    cardType:
      type: object
      description: A generic description of a CARD
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA7/EA3626.htm
        description: TYPE OF PAYMENT METHOD
      required:
        - type
      properties:
        type:
          type: string
          description: The broad category of card
          enum: [ ID, DISCOUNT, TRAVEL, BANK, CREDIT, PASSPORT, OTHER ]
        subType:
          type: string
          description: For use in case of OTHER. Can be used in bilateral agreements.
        assetClass:
          $ref: "#/components/schemas/assetClass"
        acceptors:
          type: array
          description: references to accepting parties, only if applicable
          maxItems: 10
          items:
            type: string
            format: operator-id

    condition:
      type: object
      description: the superclass of all conditions
      additionalProperties: false
      required:
        - conditionType
      properties:
        conditionType:
          description: The specific subclass of condition, should match the schema name exactly
          type: string
        id:
          description: An identifier for this condition that can be used to refer to this condition
          type: string
          example: deposit50eu

    conditions:
      description: The conditions that apply to this leg, there may be more conditions in a parent booking and planning object (if this is returned as part of those)
      type: array
      maxItems: 20
      items:
        oneOf:
          - $ref: "#/components/schemas/conditionDeposit"
          - $ref: "#/components/schemas/conditionPayWhenFinished"
          - $ref: "#/components/schemas/conditionRequireBookingData"
          - $ref: "#/components/schemas/conditionReturnArea"
          - $ref: "#/components/schemas/conditionUpfrontPayment"
          - $ref: "#/components/schemas/conditionRequireOnboardingSteps"
          - $ref: "#/components/schemas/conditionRequireOffboardingSteps"
          - $ref: "#/components/schemas/conditionRequirePausingSteps"
          - $ref: "#/components/schemas/conditionRequireResumingSteps"
          - $ref: "#/components/schemas/conditionNoPets"
          - $ref: "#/components/schemas/conditionNoSmoking"
          - $ref: "#/components/schemas/conditionNoTravelAbroad"
          - $ref: "#/components/schemas/conditionNoUndergroundParking"
          - $ref: "#/components/schemas/conditionRequiredAncillaries"
        discriminator:
          propertyName: conditionType

    conditionDeposit:
      description: in case the TO demands a deposit before usage. Requesting and refunding should be done using the /bookings/{id}/leg/{id}/claim-costs endpoint.
      allOf:
        - $ref: "#/components/schemas/condition"
        - $ref: "#/components/schemas/amountOfMoney"

    conditionNoPets:
      description: no pets are allowed in the asset
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionNoSmoking:
      description: smoking is not allowed in the asset
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionNoTravelAbroad:
      description: it is not allowed to enter another country with this asset
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionNoUndergroundParking:
      description: it is not allowed to park the asset underground
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionPayWhenFinished:
      description: in case the TO demands a direct payment after usage.
      allOf:
        - $ref: "#/components/schemas/condition"

    conditionRequiredAncillaries:
      description: it is required to use one of the enlisted ancillaries, like bike helmets or snow chains
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          additionalProperties: false
          properties:
            ancillaries:
              $ref: "#/components/schemas/requirements"

    conditionRequireBookingData:
      description: specify required information to complete a booking
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          additionalProperties: false
          required:
            - requiredFields
          properties:
            requiredFields:
              type: array
              description: an array containing labels that identify specific fields that are required in the booking process
              maxItems: 20
              items:
                type: string
                enum: [
                  FROM_ADDRESS,
                  TO_ADDRESS,
                  DATE_OF_BIRTH,
                  EMAIL,
                  PERSONAL_ADDRESS,
                  PHONE_NUMBERS,
                  LICENSES,
                  BANK_CARDS,
                  DISCOUNT_CARDS,
                  TRAVEL_CARDS,
                  ID_CARDS,
                  CREDIT_CARDS,
                  NAME,
                  AGE
                ]

    conditionRequireOffboardingSteps:
      description: required sequence of steps to take in the offboarding process
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          additionalProperties: false
          required:
            - steps
          properties:
            steps:
              type: array
              maxItems: 20
              items: 
                $ref: "#/components/schemas/offBoardingStep"

    conditionRequireOnboardingSteps:
      description: required sequence of steps to take in the onboarding process
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          additionalProperties: false
          required:
            - steps
          properties:
            steps:
              type: array
              maxItems: 20
              items: 
                $ref: "#/components/schemas/onBoardingStep"                

    conditionRequirePausingSteps:
      description: required sequence of steps to take when pausing the asset
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          additionalProperties: false
          required:
            - steps
          properties:
            steps:
              type: array
              maxItems: 20
              items: 
                $ref: "#/components/schemas/pausingStep"

    conditionRequireResumingSteps:
      description: required sequence of steps to take when resuming the execution of the leg
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          additionalProperties: false
          required:
            - steps
          properties:
            steps:
              type: array
              maxItems: 20
              items: 
                $ref: "#/components/schemas/resumingStep"

    conditionReturnArea:
      description: specify a return area. In the condition list there can be multiple return areas.
      allOf:
        - $ref: "#/components/schemas/condition"
        - type: object
          additionalProperties: false
          properties:
            stationId:
              type: string
              description: station to which the asset should be returned
            returnArea:
              description: area in which the asset should be returned as GeoJSON Polygon coordinates
              $ref: "#/components/schemas/geojsonPolygon"
            coordinates:
              $ref: "#/components/schemas/coordinates"
            returnBefore:
              description: the return hours of the facility (if different from operating-hours)
              $ref: "#/components/schemas/dateTime"

    conditionUpfrontPayment:
      description: in case the TO demands a upfront payment before usage. The payment should be made in the booking phase.
      allOf:
        - $ref: "#/components/schemas/condition"

    connectedLegInfo:
      type: object
      description: this object describes the previous leg. It can contain f.x. a flight number, a used parking to get a discount, etc.
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2962.htm
        description: LEG
      properties:
        provider:
          description: the provider of the previous leg (usually a Transport Operator reference)
          $ref: "#/components/schemas/uuid"

        assetId:
          type: string
          description: the identification of the previous asset (id or visualId), like a flight number. This field (in case of a specific asset) or assetType must be filled.
          maxLength: 100
        assetType:
          $ref: "#/components/schemas/assetType"
        url:
          $ref: "#/components/schemas/url"
          description: the URL where the details of the previous leg can be found (if authorized), using a GET http method
          example: https://penr.nl/tomp/bookings/57c652b3-1878-4a59-ba7b-b69ec1267124/legs/4aea3986-55be-48c6-a66a-09b14ebe2fb5

    coordinates:
      type: object
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA1/EA169.htm
      additionalProperties: false
      # lat -> Latitude
      # lng -> Longitude
      # alt -> Altitude
      # REMARK: LOCATING SYSTEM is WGS84
      description: a lon, lat (WGS84, EPSG:4326)
      required:
        - lat
        - lng
      properties:
        lng:
          type: number
          example: 6.169639
          format: float
          minimum: 0
          maximum: 360
        lat:
          type: number
          example: 52.253279
          format: float
          minimum: 0
          maximum: 360
        alt:
          type: number
          description: altitude, in meters above sea level
          format: float
          minimum: 0
          maximum: 1000

    country:
      type: string
      description: two-letter country codes according to ISO 3166-1
      maxLength: 2
      minLength: 2
      pattern: "[A-Z]{2}"
      example: NL

    currencyCode:
      type: string
      description: ISO 4217 currency code
      minLength: 3
      maxLength: 3
      pattern: "[a-zA-Z]{3}"

    customer:
      description: A MaaS user that wishes to make a booking, only use the fields required by booking conditions
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA1/EA2333.htm
        description: TRANSPORT CUSTOMER
        # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA1/EA2335.htm (CUSTOMER ACCOUNT)
      allOf:
        - $ref: "#/components/schemas/traveler"
        - type: object
          additionalProperties: false
          required:
            - id
          properties:
            id:
              type: string
              description: The identifier the MP uses to identify the customer
              example: "A0-123456"
            travelerReference:
              type: string
              description: optional reference field to the travelers in the planning request.
            initials:
              type: string
              description: Initials of the customer
            firstName:
              type: string
              description: First name of the customer
              example: John
            lastName:
              type: string
              description: Last name of the customer
              example: Doe
            middleName:
              type: string
              description: Middle name of the customer
              example: von
            prefix:
              type: string
              description: prefix of the customer, like titles
            postfix:
              type: string
              description: postfix of the customer, like titles
            phones:
              type: array
              maxItems: 3
              items:
                $ref: "#/components/schemas/phone"
            email:
              type: string
              description: the email address of the customer
            dateOfBirth:
              type: string
              format: date
            address:
              $ref: "#/components/schemas/address"
            photo:
              type: string
              description: base64 encoded
              format: byte
            cards:
              type: array
              maxItems: 10
              items:
                $ref: "#/components/schemas/card"
            licenses:
              type: array
              maxItems: 10
              items:
                $ref: "#/components/schemas/license"
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    customProperties:
      type: object
      description: dictionary for extra fields (bilatural agreements)
      additionalProperties: 
        oneOf:
        - type: string
        - type: integer
        - type: boolean
        maxLength: 1000
        maxProperties: 10

    damage:
      type: object
      description: A damage of the asset.
      additionalProperties: false
      required:
        - assetComponent
        - description
      properties:
        assetComponent:
          type: string
          description: Part/Component of the asset affected. If OTHER is specified the description needs to provide more detail as to what part/component is affected.
          enum: [ FRONT, REAR, LEFT, RIGHT, TOP, BOTTOM, INTERIOR, TIRE, ANCILLARY, OTHER ]
        description:
          type: string
          description: Description of the damage.
          maxLength: 1000
        pictures:
          type: array
          description: URL where pictures of the damage can be accessed. Any special characters in the URL must be correctly escaped.
          maxItems: 5
          items:
            $ref: "#/components/schemas/url"

    dateTime:
      type: string
      format: date-time
      example: "2019-10-12T07:20:50.52Z"
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc3339#section-5.6

    day:
      type: string
      enum: [ MON, TUE, WED, THU, FRI, SAT, SUN ]
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA3/EA306.htm
        description: DAY OF WEEK

    deeplinkAccess:
      description: deeplink info
      allOf:
        - $ref: "#/components/schemas/fulfilmentType"
        - type: object
          additionalProperties: false
          properties:
            url:
              description: the base deeplink url for the MP app. Can be extended by
                the 'knownParamaters'. Including the scheme.
              example: mp1.app://something/?auth=sdfkjhrkjsdf003df38=dfsdf
              $ref: "#/components/schemas/url"
            knownParameters:
              type: array
              example: [ "return-url"
                      , "error-url"
                      , "error-code"
                      , "error-description"
                      ]
              maxItems: 100
              items:
                type: string

    digitalTicket:
      description: Arbitrary data the TO may pass along the ticket to the client
      allOf:
        - $ref: "#/components/schemas/fulfilmentType"
        - type: object
          additionalProperties: false
          properties:
            url:
              $ref: "#/components/schemas/url"
              description: download url for html/pdf

    eKeyAccess:      
      description: Axa EKey information
      allOf:
        - $ref: "#/components/schemas/fulfilmentType"
        - type: object
          additionalProperties: false
          required:
            - ekey
            - lock
          properties:
            ekey: 
              type: object
              additionalProperties: false
              properties:
                key: 
                  type: string
                  description: certificate
                passkey:
                  type: string
                  description: one time pass key
            lock:
              type: object
              additionalProperties: false
              properties:
                bdAddress:
                  type: string
                  description: physical address 
                deviceName:
                  type: string
                  description: how it advertises itself

    endpoint:
      type: object
      description: a formal description of an endpoint.
      additionalProperties: false
      required:
        - method
        - path
        - status
      properties:
        method:
          type: string
          enum: [ POST, PUT, GET, DELETE, PATCH ]
        path:
          type: string
          description: the exact path of the endpoint, starting after the base URL
          example: /plannings/
          maxLength: 2000
        status:
          type: string
          enum: [ NOT_IMPLEMENTED, DIALECT, IMPLEMENTED ]
          default: IMPLEMENTED
        externalType:
          type: string
          description: this field must be used when addressing other standards for exchanging 'static' data (Level 1 MaaS)
          enum: [ GBFS, GTFS, NeTEx, OSDM, IXSI5, APDS, OCPI ]
        useAssetTypes:
          type: array
          externalDocs:
            url: https://github.com/TOMP-WG/TOMP-API/wiki/Use-external-IDs
          maxItems: 20
          items: 
            type: string
            description: field references in external sources that are used in the booking process. E.g. when using vehicle types from GBFS, a value of 'vehicle_type_id' should be 
              specified to book a bike from the particular vehicle type in the field 'useAssetTypes' in the trip offer request.

        useAssets:
          type: array
          externalDocs:
            url: https://github.com/TOMP-WG/TOMP-API/wiki/Use-external-IDs
          maxItems: 20
          items: 
            type: string
            description: field references in external sources that are used in the booking process. E.g. when using vehicle types from GBFS, a value of 'vehicle_id' should be 
              specified to book a bike from the particular vehicle type in the field 'useAssets' in the trip offer request.

      example:
        warning: "Don't copy this example. There are multiple examples in this section. Each object is an example on itself."
        externalStandard1:
          { "method": "GET", "externalType": "GBFS", "path": "https://some-external.url/GBFS/vehicle_types.json", 
            "useAssetTypes": ["vehicle_types.vehicle_type_id"], "status": "IMPLEMENTED" }
        externalStandard2:
          { "method": "GET", "externalType": "GBFS", "path": "https://some-external.url/GBFS/vehicle_status.json", 
            "useAssets": ["vehicle_status.vehicle_id"], "status": "IMPLEMENTED" }
        externalStandard3:
          { "method": "GET", "externalType": "NeTEx", "path": "https://data.ndovloket.nl/netex/wsf/NeTEx_WSF_WSF_20231206_20231206.xml.gz", 
            "useAssetTypes": ["Route.id", "RouteLink.id"], "status": "IMPLEMENTED" }        

    error:
      type: object
      description:
        An error that the service may send, e.g. in case of invalid input,
        missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
      additionalProperties: false
      properties:
        errorcode:
          type: integer
          description: The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error.
        type:
          type: string
          description: The category of this type of error.
          maxLength: 20
        title:
          type: string
          description: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language
          maxLength: 100
        status:
          type: integer
          description: The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem, matches Content-Language
          maxLength: 1000
        instance:
          $ref: "#/components/schemas/url"
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.

    extraCosts:
      description: Costs that the TO is charging the MP; credits are negative. Other amounts should be positive
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          additionalProperties: false
          required:
            - category
            - description
            - amount
          properties:
            class:
              type: string
              description: needed for the journalEntry.details, must be 'extraCosts'
              default: "extraCosts"
            category:
              $ref: "#/components/schemas/journalCategory"
            description:
              type: string
              description: free text to describe the extra costs. Mandatory in case of 'OTHER', matches Content-Language
            number:
              type: number
              description: e.g. number of litres, number of kilowatthour, etc
              format: float
              minimum: 0
              maximum: 1000
            numberType:
              type: string
              enum: [ LITER, KILOWATTHOUR, CO2_COMPENSATION, OTHER ]
            account:
              $ref: "#/components/schemas/bankAccount"
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    fare:
      type: object
      description: the total fare is the sum of all parts, except for the 'MAX' farePart. This one descripes the maximum price for the complete leg.
      additionalProperties: false
      required:
        - estimated
        - parts
      properties:
        estimated:
          type: boolean
          description: is this fare an estimation?
        description:
          type: string
          description: user friendly description of the fare (e.g. 'full fare'), should match Content-Language
        class:
          type: string
          description: needed for the discriminator in journal-entry, must be 'fare'
          default: "fare"
        parts:
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/farePart"

    farePart:
      description: this describes a part of the fare (or discount). It contains a for instance the startup costs (fixed) 
       or the flex part (e.g. 1.25 EUR per 2.0 MILES). The amount is tax included. In case of discounts, the values are 
       negative. With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts. 
       The `scale` properties create the ability to communicate scales (e.g. the first 4 kilometers you've to pay 
       EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer).
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          additionalProperties: false
          required:
            - amount
          properties:
            type:
              type: string
              description: type of fare part. If there is only one farepart and this field is missing, it should
                be assumed it is 'FIXED'. In all other situations this field is mandatory.
              enum: [ FIXED, FLEX, MAX ]
              # MAX -> https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            kind:
              type: string
              description: is this the default price or is this an additional part (discount, price surge). In case of a DISCOUNT, the amount
                must always be negative and in case of SURGE it must be positive. This also means, that when you're working with discounts or surges,
                you have to deliver 2 fareparts, one for the default price and one for the discount/surge. This can be used in combination with as
                well the fixed price parts as with the flex price parts.
              enum: [ DEFAULT, DISCOUNT, SURGE ]
              # DISCOUNT, SURGE -> https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1665.htm
            unitType:
              type: string
              description: in case of 'FLEX' mandatory, otherwise not allowed. E.g. 0.5 EUR per HOUR
              enum: [ KM, SECOND, MINUTE, HOUR, MILE, PERCENTAGE ]
              # in case of FLEX using KM, MILE:
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA2/EA1801.htm
                # in case of FIXED using KM, MILE: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA2/EA1804.htm
                # in case of FLEX using SECOND, MINUTE, HOUR: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA4/EA1843.htm
                # in case of FIXED using SECOND, MINUTE, HOUR: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA4/EA1846.htm
            units:
              type: number
              description: the number of km, seconds etc. Mandatory when the type is 'FLEX', otherwise
                not allowed. In case of 0.5 EUR per 15 MINUTES, `units` should contain 15 and `unitType` MINUTES.
              format: float
              minimum: 0
            scaleFrom:
              type: number
              description: in case of scaling, this is the bottom value (f.x. in the first hour 3 CAD, the `scaleFrom` should
                contain 0 and the `scaleType` HOUR). When `scaleTo` is used, but this field is missing, it should be assumed
                it is a 0.
              format: float
              minimum: 0
            scaleTo:
              type: number
              description: the upper value of the scale (f.x. 3 CAD in the first hour, this field should contain 1, 
                `scaleFrom` 0 and `scaleType` HOUR)
              format: float
              minimum: 0
            scaleType:
              type: string
              enum: [ KM, MILE, HOUR, MINUTE ]
            name:
              type: string
              description: an optional description of this fare part.
            class:
              type: string
              description: class of this fare part. Could be FARE or ANCILLARY
              default: "FARE"
              enum: [ "FARE", "ANCILLARY" ]
            minimumAmount:
              type: number
              description: The minimum price, in the same currency as amount. Place in `amount` the most likely value.
              example: 9.00
              format: float
              minimum: 0
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            maximumAmount:
              type: number
              description: The minimum price, in the same currency as amount. Place in `amount` the most likely value.
              example: 11.00
              format: float
              minimum: 0
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            assetState:
              type: string
              description: in case the fare is dependent on being in use or being paused, this field must be used. Default IN_USE
              enum: [ "IN_USE", "PAUSED" ]
              default: "IN_USE"
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    fulfilment:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT
      oneOf:
      - $ref: "#/components/schemas/digitalTicket"
      - $ref: "#/components/schemas/deeplinkAccess"
      - $ref: "#/components/schemas/eKeyAccess"
      - $ref: "#/components/schemas/binaryAccess"
      - $ref: "#/components/schemas/otherAccess"
      discriminator:
        propertyName: fulfilmentType

    fulfilmentType:
      type: object
      description: The fulfilment (e.g. travel ticket) that MaaS clients will display to show their right to travel, or use to access an asset
      additionalProperties: false
      required:
        - validFrom
        - validUntil
        - fulfilmentType
      properties:
        validFrom:
          $ref: "#/components/schemas/dateTime"
        validUntil:
          $ref: "#/components/schemas/dateTime"
        fulfilmentType:
          type: string
          description: The type of data held in this fulfilment
          enum: [ "digitalTicket", "deeplinkAccess", "eKeyAccess", "binaryAccess", "other" ]
        implementation: 
          type: string
          enum:  [ 
            # DIGITAL_TICKET
            QR, AZTEC, BARCODE, PDF, HTML,
            # DEEPLINK_ACCESS
            DEEPLINK, 
            # EKEY
            AXA_EKEY_OTP, 
            # BINARY_ACCESS
            TOMP_API,
            # OTHER
            PHYSICAL_KEY, OVC, EMV, NONE
          ]

    geojsonLine:
      type: array
      description: An array  of WGS84 coordinate pairs
      externalDocs:
        url: https://geojson.org/geojson-spec.html#line
      example: [[6.169639, 52.253279], [6.05623, 52.63473]]
      maxItems: 10000
      items:
        $ref: "#/components/schemas/geojsonPoint"

    geojsonPoint:
      type: array
      description: Geojson Coordinate
      externalDocs:
        url: https://geojson.org/geojson-spec.html#point
      minItems: 2
      maxItems: 2
      items:
        type: number
        format: float
        minimum: 0.0
      example: [4.53432, 55.324523]

    geojsonPolygon:
      type: array
      description: geojson representation of a polygon. First and last point must be equal. See also https://geojson.org/geojson-spec.html#polygon and example https://geojson.org/geojson-spec.html#id4. The order should be lon, lat [[[lon1, lat1], [lon2,lat2], [lon3,lat3], [lon1,lat1]]], the first point should match the last point.
      externalDocs:
        url: https://geojson.org/geojson-spec.html#polygon
      maxItems: 200
      items:
        $ref: "#/components/schemas/geojsonLine"
      example: [[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0,0.0], [1.0, 1.0]]]

    geojsonMultiPolygon:
      type: array
      description: geojson representation of a multi polygon. See also https://geojson.org/geojson-spec.html#multipolygon
      externalDocs:
        url: https://geojson.org/geojson-spec.html#multipolygon
      maxItems: 200
      items:
        $ref: "#/components/schemas/geojsonPolygon"
      example: [[[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0,0.0], [1.0, 1.0]]]]

    geojsonGeometry:
      required:
      - type
      description: 
        geoJSON geometry
      properties:
        type:
          type: string
          enum: [ Point, LineString, Polygon, MultiPolygon ]
        coordinates:
          oneOf: 
            - $ref: "#/components/schemas/geojsonPoint"
            - $ref: "#/components/schemas/geojsonLine"
            - $ref: "#/components/schemas/geojsonPolygon"
            - $ref: "#/components/schemas/geojsonMultiPolygon"
      discriminator:
        propertyName: type

    halLinks:
      type: object
      additionalProperties: false
      externalDocs:
        url: https://en.wikipedia.org/wiki/Hypertext_Application_Language
      properties:
        _links: 
          type: object
          additionalProperties: 
            $ref: "#/components/schemas/halLink"
    
    halLink:
      type: object
      additionalProperties: false
      required:
        - href
      properties:
        rel:
          type: string
          description: a misused field, to indicate the http method.
          enum: [ POST, GET, DELETE ]
        href:
          $ref: "#/components/schemas/url"
        type:
          type: string
          default: "application/hal+json"
        templated: 
          type: boolean
          default: true

    httpDate:
      type: string
      description: A HTTP date string 
      externalDocs:
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
      format: http-date
      example: Wed, 21 Oct 2015 07:28:00 GMT

    information:
      type: object
      description: Information provided to end users
      additionalProperties: false
      properties:
        type:
          type: string
          description: the type of the information provided
          enum: [ URL, IMAGE, PLAIN_TEXT, HTML ]
        url:
          type: string
          description: the internet location of the information, used in case or type `URL` or `IMAGE`
        goal:
          type: string
          description: the purpose of the information
          enum: [ INSTRUCTIONS, SALES ]
        text:
          type: string
          description: free format text or HTML, depending on the type. Not to use in combination with `URL` or `IMAGE` 

    journalEntry:
      type: object
      additionalProperties: false
      properties:
        category:
          $ref: "#/components/schemas/journalCategory"
        journalId:
          description: id of the entry, leg id can be reused
          $ref: "#/components/schemas/uuid"
        journalSequenceId:
          type: string
          description: sequence id of the entry, in combination with journalId unique from TO perspective.
          maxLength: 3
        invoiceId:
          type: string
          description: the number of the invoice. Should be filled in when invoiced.
        invoiceDate:
          $ref: "#/components/schemas/dateTime"
        state:
          $ref: "#/components/schemas/journalState"
        expirationDate:
          $ref: "#/components/schemas/dateTime"
        comment:
          type: string
          maxLength: 2000
        distance:
          type: number
          description: the travelled distance. Only if applicable.
          format: float
          minimum: 0
        distanceType:
          type: string
          enum: [ KM, MILE ]
        usedTime:
          type: integer
          description: the time in seconds that the assed is used. Only if applicable.
          minimum: 0
        rentalStartMileage:
          type: number
          description: the mileage at the start of the rental. 'DistanceType' field is also applicable here
          format: float
          minimum: 0
        vatNumber:
          type: string
          description: VAT identification number.
          maxLength: 100
        bankAccount:
          $ref: "#/components/schemas/bankAccount"
        details:
          description: the specification of the amount; how is it composed.
          oneOf:
            - $ref: "#/components/schemas/fare"
            - $ref: "#/components/schemas/extraCosts"
          discriminator:
            propertyName: class

    journalState:
      type: string
      enum: [ TO_INVOICE, INVOICED ]

    journalCategory:
      type: string
      description: They are there for filtering purposes in the journal entry endpoint. 
      enum: [
        ALL,
        DAMAGE,
        LOSS,
        STOLEN,
        EXTRA_USAGE,
        REFUND,
        FINE,
        OTHER_ASSET_USED,
        CREDIT,
        VOUCHER,
        DEPOSIT,
        OTHER,
        FARE
      ]

    leg:
      type: object
      description: A planned (segment of) a booked trip using one asset type
      additionalProperties: false
      required:
        - from
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2962.htm
        description: LEG
        # https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2958.htm (TRIP PATTERN)
      properties:
        id:
          description: The unique identifier (TO) of this leg
          $ref: "#/components/schemas/uuid"
        sequenceNumber:
          type: integer
          description: The order of the leg in the booking. There can be multiple legs with the same sequence (different user or parallel usage (eg. parking lot and a bike)).
        travelerReferenceNumbers:
          type: array
          description: reference to the travelers field of the request. If missing, it is refering to the first (if any). it is an array to facilitate multiple users on one leg (e.g. using a car). If multiple access informations are needed, please create a leg per used asset.
          maxItems: 50
          items:
            type: string

        from:
          description: The departure location of this leg, using this asset type
          $ref: "#/components/schemas/place"
        to:
          description: The destination of this leg, using this asset type
          $ref: "#/components/schemas/place"

        startTime:
          description: The departure time of this leg. Or, in case of a parking, the start of the usage.
          $ref: "#/components/schemas/dateTime"
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2958.htm
            description: TRIP PATTERN.StartTime
        endTime:
          description: The intended arrival time at the to place. Or, in case of a parking, the end of the usage.
          $ref: "#/components/schemas/dateTime"
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2958.htm
            description: TRIP PATTERN.EndTime
        legState:
          $ref: "#/components/schemas/legState"

        price:
          description: The leg-specific price information, all fares are additive, if the booking does not have price set all legs should
          $ref: "#/components/schemas/fare"

        conditions:
          $ref: "#/components/schemas/conditions"

        assetType:
          description: The asset type used in this leg as determined during booking
          $ref: "#/components/schemas/assetType"
        asset:
          description: The concrete asset used for the execution of the leg
          $ref: "#/components/schemas/asset"

        suboperator:
          $ref: "#/components/schemas/suboperator"

        fulfillment:
          description: The MaaS users proof of their right to travel on this leg (visual representable) OR
            data to open an asset
          $ref: "#/components/schemas/fulfilment"

        userCommunication:
          type: array
          description: Additional information a TO can send to a customer (instructions, sales info, ...)
          maxItems: 100
          items: 
            $ref: "#/components/schemas/information" 

        memo:
          type: string
          maxLength: 1000

    legResponse:
      allOf:
        - $ref: "#/components/schemas/leg"
        - $ref: "#/components/schemas/halLinks"
          example:
            { "leg": { "rel": "GET", "href": "/bookings/{id}/legs/{lid}", "templated": true, "type": "application/hal+json" }
            # only when legState = NOT_STARTED
            , "cancel": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/CANCEL", "templated": true, "type": "application/hal+json" }
            , "prepare": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/PREPARE", "templated": true, "type": "application/hal+json" }
            , "assign_asset": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/ASSIGN_ASSET", "templated": true, "type": "application/hal+json" }
            , "time_postpone": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/TIME_POSTPONE", "templated": true, "type": "application/hal+json" }
            # only when legState = NOT_STARTED OR PREPARING
            , "add_ancillaries": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/ADD_ANCILLARY", "templated": true, "type": "application/hal+json" }
            , "remove_ancillaries": { "rel": "DELETE", "href": "/bookings/{id}/legs/{lid}/operations/REMOVE_ANCILLARY", "templated": true, "type": "application/hal+json" }
            , "set_in_use": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/SET_IN_USE", "templated": true, "type": "application/hal+json" }
            # only when legState = IN_USE
            , "time_extend": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/TIME_EXTEND", "templated": true, "type": "application/hal+json" }
            , "pause": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/PAUSE", "templated": true, "type": "application/hal+json" }
            , "open_trunk": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/OPEN_TRUNK", "type": "application/hal+json" }
            , "start_finishing": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/START_FINISHING", "templated": true, "type": "application/hal+json" }
            , "finish": { "rel": "POST", "href": "/bookings/{id}/legs/{lid}/operations/FINISH", "templated": true, "type": "application/hal+json" }
            }

    legState:
      type: string
      description: status of a leg
      enum: [ NOT_STARTED, PREPARING, IN_USE, PAUSED, FINISHING, FINISHED, ISSUE_REPORTED, CANCELLED ]

    license:
      description: driver or usage license for a specific user. Contains the number and the assetType you're allowed to operate (e.g. driver license for CAR)
      allOf:
        - $ref: "#/components/schemas/licenseType"
        - type: object
          additionalProperties: false
          properties:
            number:
              type: string
              example: "1287948792"
            licenseCode:
              description: in most countries a driver license has also a code. As TO you can exactly verify, based on this code if the license allows to operate it's assets, if the assetType too generic.
              example: D4
              type: string
            validUntil:
              type: string
              format: date

    licenseType:
      type: object
      description: A category of license to use a certain asset class
      additionalProperties: false
      required:
        - assetClass
      properties:
        assetClass:
          $ref: "#/components/schemas/assetClass"
        issuingCountry:
          $ref: "#/components/schemas/country"

    logEntry:
      type: object
      required:
      - operation
      additionalProperties: false
      properties:
        operation:
          type: string
          enum: [ 
            OFFER, BOOK, 
            CANCEL, DENY, COMMIT, EXTEND_EXPIRY_TIME,
            PREPARE, ASSIGN_ASSET, SET_IN_USE, PAUSE, OPEN_TRUNK, START_FINISHING, FINISH, TIME_EXTEND, TIME_POSTPONE, ADDED_ANCILLARY, REMOVED_ANCILLARY, NOTIFY,
            PAY, EXTRA_COSTS
            ]
        legId:
          description: in case it is a leg operation, specify the legId
          $ref: "#/components/schemas/uuid"
        detail:
          $ref: "#/components/schemas/operationRequest"

    offBoardingStep:
      allOf:
        - $ref: "#/components/schemas/information"
        - type: object
          additionalProperties: false
          properties:
            action:
              type: string
              description: these actions are available<br>
                _SEND_START_FINISHING_ - the TO needs to be informed the leg is about to finish<br>
                _PARK_ASSIST_ - user action to park (stop) using the asset<br>
                _UNLOCK_LOCKER_ - user action, could be triggered by the START_FINISH operation<br>
                _CONNECT_CHARGER_ - user action<br>
                _LOCK_ASSET_ - user action, could be triggered by the FINISH operation<br>
                _SEND_OPEN_TRUNK_ - the TO opens the trunk remotely <br>
                _UNLOCK_TRUNK_ - user action <br>
                _STOW_HELMET_ - user action <br>
                _LOCK_TRUNK_ - user action <br>
                _LOCK_LOCKER_ - user action <br>
                _SEND_FINISH_ - the TO wants to be informed about the end of the leg<br>
                _SEND_EVIDENCE_PARKED_ - the TO requires parking evidence<br>
                _SEND_EVIDENCE_HELMET_ - the TO requires evidence of storing the helmet<br>
                _SEND_EVIDENCE_CHARGER_ - the TO requires evidence of correct usage of the charger 
              enum: [
                SEND_START_FINISHING, 
                PARK_ASSIST, 
                UNLOCK_LOCKER,
                CONNECT_CHARGER, 
                LOCK_ASSET,
                SEND_OPEN_TRUNK, 
                UNLOCK_TRUNK,
                STOW_HELMET, 
                LOCK_TRUNK, 
                LOCK_LOCKER,
                SEND_FINISH, 
                SEND_EVIDENCE_PARKED, 
                SEND_EVIDENCE_HELMET, 
                SEND_EVIDENCE_CHARGER
              ]

    onBoardingStep:
      allOf:
        - $ref: "#/components/schemas/information"
        - type: object
          additionalProperties: false
          properties:
            action:
              type: string
              description:
                The possible steps are described here<br>
                _SEND_PREPARE_ - indicate the leg is going to start <br>
                _UNLOCK_LOCKER_ - user action - optionally triggered by the PREPARE operation<br> 
                _DISCONNECT_CHARGER_ - requested user action <br> 
                _SHOW_DAMAGES_ - show known damages to end user <br> 
                _UNLOCK_ASSET_ - requested user action or triggered by SET_IN_USE operation <br> 
                _START_ASSET_ - requested user action <br> 
                _SEND_OPEN_TRUNK_ - request TO to open trunk/helmet case remotely<br> 
                _UNLOCK_TRUNK_ - requested user action <br> 
                _TAKE_HELMET_ - requested user action <br> 
                _SEND_SET_IN_USE_ - request to start leg <br> 
                _SEND_ASSIGN_ASSET_ - request to assign the specified asset to the leg <br> 
                _LOCK_LOCKER_ - requested user action 
              enum: [
                SEND_PREPARE,
                UNLOCK_LOCKER,
                DISCONNECT_CHARGER, 
                SHOW_DAMAGES,
                UNLOCK_ASSET, 
                START_ASSET,
                SEND_OPEN_TRUNK, 
                UNLOCK_TRUNK, 
                TAKE_HELMET, 
                SEND_SET_IN_USE, 
                SEND_ASSIGN_ASSET,
                LOCK_LOCKER
              ]

    oneStopBookingRequest:
      allOf:
      - $ref: "#/components/schemas/tripRequest"
      - type: object
        additionalProperties: false
        properties:
          customer:
            description: The user that wants to make this booking, only to supply when requested in the conditionRequireBookingData
            $ref: "#/components/schemas/customer"
          callbackUrl: 
            $ref: "#/components/schemas/url"
            description: The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST /bookings/{id}/legs/{lid}/operations and POST /bookings/{id}/operations. Only to be provided when this deviates from standard or agreed URL.

    operationRequest:
      type: object
      description: operation during the trip execution 
      required:
        - timestamp
      additionalProperties: false
      properties:
        timestamp:
          description: timestamp of the operation, or in case of notification - ETA, the expected time of arrival.
          $ref: "#/components/schemas/dateTime"

        comment:
          type: string
          description: free text, should match Content-Language. Reason or notification.
          maxLength: 2000

        urls:
          type: array
          description: urls to support the operation e.g. pictures justifying the exit conditions
          maxItems: 10
          items:
            $ref: "#/components/schemas/url"
            
        assetState:
          $ref: "#/components/schemas/assetState"

        origin:
          type: string
          description: This operation can be done on behalf of another party. The MP can act on behalf of the END_USER (cancel this booking for me); to override the default origin. In case this field is missing, it must be assumed that the MP is requesting the operations.
          enum: [ TO, MP, END_USER, OTHER ]

        # for CONFIRMATION purposes
        assetType:
          $ref: "#/components/schemas/assetType"

        # EXTEND_EXPIRY_TIME
        extendReason:
          type: string
          description: in case operation is EXTEND_EXPIRY_TIME, the reason for extension must be supplied here.
          enum: [ BOOKING_PENDING, PAYMENT_PENDING, OTHER ]

        # NOTIFICATIONS
        notificationType:
          type: string
          enum: [ VEHICLE_NOT_AVAILABLE, USER_NO_SHOW, ETA, MESSAGE_TO_DRIVER, MESSAGE_TO_END_USER, USER_OUT_OF_LIMITS, OTHER ]
          example: VEHICLE_NOT_AVAILABLE

        # ANCILLARIES
        category:
          type: string
          maxLength: 2
          pattern: "[A-Z]{2,3}"        
        number:
          type: string
          maxLength: 2
          pattern: "[0-9]{2}"

        # FINANCIAL_TRANSACTION
        transaction:
          $ref: "#/components/schemas/extraCosts"

    otherAccess:
      description: Generic fulfilment, non-standardized (yet)
      allOf:
        - $ref: "#/components/schemas/fulfilmentType"
        - $ref: "#/components/schemas/customProperties"

    pausingStep:
      allOf:
      - $ref: "#/components/schemas/information"
      - type: object
        additionalProperties: false
        properties:
          action:
            type: string
            description: allowed actions<br>
              _SEND_PAUSE_ - send leg operations PAUSE to inform the TO<br>
              _PARK_ASSIST_ - user action, the end user can be informed how and where to park<br>
              _LOCK_ASSET_ - user action, can be triggered by the PAUSE operations<br>
              _SEND_OPEN_TRUNK_ - request TO to open the trunk remotely<br>
              _UNLOCK_TRUNK_ - user action<br>
              _STOW_HELMET_ - user action<br>
              _LOCK_TRUNK_ - user action
            enum: [
              SEND_PAUSE,
              PARK_ASSIST, 
              LOCK_ASSET,
              SEND_OPEN_TRUNK,
              UNLOCK_TRUNK,
              STOW_HELMET, 
              LOCK_TRUNK 
            ]

    phone:
      type: object
      additionalProperties: false
      properties:
        preferred:
          type: boolean
          description: only one phone in this array can have a true in this property
        number:
          type: string
          description: phone number. In case of international usage, always provide the country code.
          pattern: '^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.0-9]*$'
          example: +31-48934758 or +(0075)-834923384 or 020 1234 1234
        kind:
          type: string
          enum: [ LANDLINE, MOBILE ]
        type:
          type: string
          enum: [ PRIVATE, BUSINESS, OTHER ]

    place:
      type: object
      description: a origin or destination of a leg, 3D. lon/lat in WGS84.
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA3/EA184.htm
        description: POINT
      # OR via PLACE https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA9/EA263.htm (.described by ZONE .represented by POINT)
      # coordinates.lat -> located by POINT.locating.Latitude / Coordinates
      # coordinates.lng -> located by POINT.locating.Longitude / Coordinates
      # name -> POINT.name
      # station -> ? (shared modes station - ID)
      # physicalAddress -> located by MODEL::ZONE <= MODEL:PLACE <= ADDRESSABLE PLACE describing ADDRESS <= POSTAL ADDRESS
      required:
        - coordinates
      properties:
        coordinates:
          $ref: "#/components/schemas/coordinates"
        name:
          type: string
          description: Human readable name of the place, could match Content-Language
          maxLength: 1000
        stopReference:
          $ref: "#/components/schemas/stopReference"
        station:
          type: string
          description: reference to a station
        physicalAddress:
          $ref: "#/components/schemas/address"
        extraInfo:
          $ref: "#/components/schemas/customProperties"

    planningStep:
      description: this action allows to publish advertisements together with the proposed leg.
      allOf:
      - $ref: "#/components/schemas/information"
      - type: object
        additionalProperties: false
        properties:
          action:
            type: string
            description: the _RESULT_SHOWN_ action requires the MP to display some information to the customer when it is viewing the proposed legs.
            enum: [ RESULT_SHOWN ]

    processIdentifiers:
      type: object
      additionalProperties: false
      required:
        - operatorInformation
        - booking
        - tripExecution
        - support
        - payment
      properties:
        operatorInformation:
          type: array
          maxItems: 25
          items:
            type: string
        booking:
          type: array
          maxItems: 25
          items:
            type: string
        tripExecution:
          type: array
          maxItems: 25
          items:
            type: string
        support:
          type: array
          maxItems: 25
          items:
            type: string
        payment:
          type: array
          maxItems: 25
          items:
            type: string

    requirement:
      type: object
      description: describes an (dis)ability or ancillary.
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA8/EA254.htm
        description: TYPE OF USER NEED
      # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm (VEHICLE EQUIPMENT PROFILE)
      required:
        - category
        - number
      properties:
        source:
          type: string
          description: if obsolete, it is referencing the travelers' dictionary (https://github.com/TOMP-WG/TOMP-API/blob/master/documents/CROW%20passenger%20characteristics.xlsx)
        category:
          type: string
          description: references to the first column of the specification 
                       initial values [ HR, AV, HV, AB, AER, K, ZR, RR ]
        number:
          type: string
          description: references to the second column of the specification
          minLength: 2
          maxLength: 2
        type:
          type: string
          description: conditionally extra information, referencing to the 3th column
        memo:
          type: string
          description: extra field for detailed information, not standardized
        variableNumber:
          type: integer
          description: in some requirements there is references to '[variable number]' e.g. of meters (like ZR06)
          minimum: 0
          maximum: 1000
        applicableDays:
          type: array
          description: days of week that are applicable
          maxItems: 7
          items: 
            type: string
            enum: [ MO, TU, WE, TH, FR, SA, SU ]

    requirements:
      description: Requirements from the end user side.
      type: object
      additionalProperties: false
      properties:
        abilities: 
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/requirement" 
        bringAlong:
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/requirement" 

    resumingStep:
      allOf:
      - $ref: "#/components/schemas/information"
      - type: object
        additionalProperties: false
        properties:
          action:
            type: string
            description: possible values<br>
              _UNLOCK_VEHICLE_ - user action, could be triggered by SET_IN_USE operations<br>
              _SEND_OPEN_TRUNK_ - request TO to open trunk remotely<br>
              _UNLOCK_TRUNK_ - user action<br>
              _TAKE_HELMET_ - user action<br>
              _LOCK_TRUNK_ - user action<br>
              _START_VEHICLE_ - user action<br>
              _SEND_SET_IN_USE_ - the TO wants to be informed that the leg is resumed. Optionally triggers the unlock of the asset
            enum: [
              UNLOCK_VEHICLE,
              SEND_OPEN_TRUNK,
              UNLOCK_TRUNK, 
              TAKE_HELMET,
              LOCK_TRUNK,
              START_VEHICLE,
              SEND_SET_IN_USE
            ]

    serviceDescription:
      type: object
      description: a complete endpoint description, containing all endpoints, their status, but also the served scenarios and implemented process flows. The identifiers for the process flows can be found at https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers<br>
      additionalProperties: false
      required:
        - endpoints
      properties:
        endpoints:
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/endpoint"
        processIdentifiers:
          $ref: "#/components/schemas/processIdentifiers"
        steps:
          $ref: "#/components/schemas/serviceSteps"

    serviceSteps:
      type: object
      description: The steps can be specified here, when they are uniform over all assets. If some assets should be handled differently, it can be specified as a condition in the booking for that specific asset(type).
      additionalProperties: false
      properties:
        planning:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/planningStep"
        booking:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/bookingStep"
        onboarding:
          type: array
          maxItems: 10
          description: this array should be considered as a sequence!
          items:
            $ref: "#/components/schemas/onBoardingStep"
        offboarding:
          type: array
          maxItems: 10
          description: this array should be considered as a sequence!
          items:
            $ref: "#/components/schemas/offBoardingStep"
        pausing:
          type: array
          maxItems: 10
          description: this array should be considered as a sequence!
          items:
            $ref: "#/components/schemas/pausingStep"
        resuming:
          type: array
          maxItems: 10
          description: this array should be considered as a sequence!
          items:
            $ref: "#/components/schemas/resumingStep"

    stopReference:
      type: object
      description: reference to a stop (can be nation specific). This can help to specific pinpoint a (bus) stop. Extra information about the stop is not supplied; you should find it elsewhere.
      additionalProperties: false
      required:
        - type
        - id
        - country
      properties:
        type:
          type: string
          description: type of external reference (GTFS, CHB).
          enum: [
            GTFS_STOP_ID,
            GTFS_STOP_CODE,
            GTFS_AREA_ID,
            CHB_STOP_PLACE_CODE,
            CHB_QUAY_CODE,
            NS_CODE,
            UIC_CODE
          ]
        id:
          type: string
          description: this field should contain the complete ID. E.g. NL:S:13121110 or BE:S:79640040
        country:
          $ref: "#/components/schemas/country"

    suboperator:
      type: object
      description: The operator of a leg or asset, in case this is not the TO itself but should be shown to the user
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the operator, could match Content-Language
        operatorId:
          type: string
          description: the ID from the operator
        description:
          type: string
          description: short description of the operator, should match Content-Language
        contact:
          type: string
          description: contact information, should match Content-Language

    supportRequest:
      description: request for support
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: the booking id
        supportType:
          type: string
          enum: [
            BROKEN_DOWN, 
            NOT_AT_LOCATION, 
            MISSING_AFTER_PAUSE, 
            NOT_CLEAN, 
            NOT_AVAILABLE, 
            UNABLE_TO_OPEN, 
            UNABLE_TO_CLOSE, 
            API_TECHNICAL, 
            API_FUNCTIONAL, 
            ACCIDENT, 
            OTHER, 
            REPORT_DAMAGE
          ]
        location:
          $ref: '#/components/schemas/place'
        timestamp:
          $ref: "#/components/schemas/dateTime"
        priority:
          type: string
          description: the priority of the support request.
          enum: [ ERROR_CANNOT_CONTINUE,  ERROR_CAN_CONTINUE, DISTURBING_ISSUE, QUESTION, OTHER ]
        contactInformationEndUser:
          type: string
          description: contact information of the end user in case of direct response requests, like phone number
        comment:
          type: string
        requestedResponseTime:
          type: number
          description: time to respond in minutes.
          format: float
          minimum: 0
          maximum: 10000
        urls:
          type: array
          description: urls to clarify the support request e.g. pictures showing damage
          maxItems: 10
          items:
            $ref: "#/components/schemas/url"

    supportTicket:
      type: object
      description: the current status of support
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/supportRequest'
      properties:
        status:
          type: string
          enum: [ 
            PROCESSING, 
            UPDATE_REQUESTED, 
            RESOLVED, 
            CANCELLED 
          ]
          example: PROCESSING
        timeToResolution:
          type: integer
          description: time in minutes to expected resolution of support request
          example: 9
        order:
          type: integer
          description: the sequence number of status of the support issue
          minimum: 0

    traveler:
      type: object
      description: A generic description of a traveler, not including any identifying information
      additionalProperties: false
      properties:
        isValidated:
          type: boolean
          description: Whether this traveler's identity and properties have been verified by the MaaS provider
        age:
          type: integer
          description: Age of the traveler, may be approximate
          minimum: 0
          maximum: 200
        referenceNumber:
          type: string
          description: reference number of the traveler. This number could be used to refer to in the planning result.
        cardTypes:
          type: array
          description: The kind of cards this traveler possesses
          maxItems: 10
          items:
            $ref: "#/components/schemas/cardType"
        licenseTypes:
          type: array
          description: The kind of licenses this traveler possesses
          maxItems: 10
          items:
            $ref: "#/components/schemas/licenseType"
        requirements:
          $ref: "#/components/schemas/requirements"

    tripRequest:
      type: object
      description: A trip planning request, resulting in bookable trip options
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA4/EA5/EA3147.htm
        description: TRIP REQUEST
      # from -> starting at 
      # to -> ending at 
      # startTime / endTime -> TimeOfTravel / TravelTimeConstraint
      ## useAssets -> 
      ## useAssetTypes -> limit to MODEL::MODE
      ## nrOfTravelers ->
      # radius -> limit start leg to TRIP ACCESS CONSTRAINT MaximumDistance
      ## previousLegs ->
      ## estimatedDistance ->
      # travelers -> limit to TRIP REQUEST FILTER limit to TRIP MOBILITY FILTER limit to ACCESSIBILITY ASSESSMENT (see "#/components/schemas/traveler")
      ## userGroups -> 
      required:
        - from
      properties:
        from:
          $ref: "#/components/schemas/place"
        to:
          $ref: "#/components/schemas/place"
        startTime:
          description: The intended departure time. 
            If left out and no endTime is set, the current time should be assumed. 
            If only the arrival time is specified, this is an implicit request for a guaranteed arrival at that time.
          $ref: "#/components/schemas/dateTime"
        endTime:
          description: The intended arrival time, at the `to place`. If not set, the time the user intends to stop using the asset (implicit request for arrival guarantee).
          $ref: "#/components/schemas/dateTime"
        useAssets:
          type: array
          description: The specific asset(s) the user wishes to receive trip options for. See also endpoint.useAssets specification
          maxItems: 25
          items:
            type: string
        useAssetTypes:
          type: array
          description: The specific asset type(s) the user wishes to receive trip options for. See also endpoint.useAssetTypes specification
          maxItems: 5
          items:
            $ref: "#/components/schemas/assetType"
          
        nrOfTravelers:
          type: integer
          description: The number of people that intend to travel. Do not use when *travelers* is used.
          minimum: 1
          maximum: 100
        radius:
          type: integer
          description: Maximum distance in meters a user wants to travel to reach the travel option
          minimum: 0
          maximum: 1000
        previousLegs:
          type: array
          maxItems: 10
          items:
            $ref: "#/components/schemas/connectedLegInfo"
            
        estimatedDistance:
          type: integer
          description: instead of using the from/to construct, it is also possible to give an indication of the distance to travel. 
            The process identifier 'USE_ESTIMATED_DISTANCE' is used to indicate this scenario. Also in meters
          minimum: 0
          maximum: 1000000

        travelers:
          type: array
          description: Extra information about the people that intend to travel if relevant, length must be less than or equal to nrOftravelers.
          maxItems: 50
          items:
            $ref: "#/components/schemas/traveler"
        userGroups:
          type: array
          description: Id(s) of user groups that the user belongs to. This provides access to exclusive assets that are hidden to the public. Id's are agreed upon by TO and MP.
          maxItems: 10
          items:
            type: string
            format: a usergroup id for this operator
        extraInfo:
          $ref: "#/components/schemas/customProperties"

    tripOptionsResponse:
      description: Bookable trip options that fulfil the constraints of the request
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA4/EA5/EA3156.htm
        description: TRIP DELIVERY
      type: object
      additionalProperties: false
      required:
        - validUntil
        - options
      properties:
        validUntil:
          description: The time until which the presented options are (likely) available
          $ref: "#/components/schemas/dateTime"
        options:
          type: array
          maxItems: 100
          items: 
            $ref: "#/components/schemas/bookingResponse"

    url:
      type: string
      description: valid URL
      format: URL

    uuid:
      type: string
      format: UUID
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      example: ae76f51c-a1a6-46af-b9ab-8233564adcae
      externalDocs:
        url: https://en.wikipedia.org/wiki/Universally_unique_identifier
        # also: https://www.ietf.org/rfc/rfc4122.txt

  parameters:
    acceptLanguage:
      in: header
      name: Accept-Language
      required: true
      schema:
        type: string
        format: comma separated language tags
      description: "A comma-separated list of BCP 47 (RFC 5646) language tags and optional weights as described in IETF RFC7231 section 5.3.5. A list of the languages/localizations the user would like to see the results in. For user privacy and ease of use on the TO side, this list should be kept as short as possible"
      example: nl, de;q=0.7
    senderId:
      in: header
      name: sending-id
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
      description: The ID of the sending operator
    receiverId:
      in: header
      name: receiving-id
      required: false
      schema:
        $ref: "#/components/schemas/uuid"
      description: the ID of the intended receiver
    bookingId:
      in: path
      name: id
      description: BOOKING identifier
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    legId:
      in: path
      name: lid
      description: LEG identifier
      required: true
      schema:
        $ref: "#/components/schemas/uuid"

  headers:
    contentLanguage:
      description: The language/localization of user-facing content
      example: nl
      schema:
        type: string
        format: One IETF BCP 47 (RFC 5646) language tag
        pattern: "^[a-zA-Z]+-[a-zA-Z]+$"
      required: true
    expires:
      description: The result is valid until this timestamp (and must be committed unless it is already in state _CONFIRMED_). A pending BOOKING is expired after this timestamp.
      schema:
        description: A HTTP date string
        externalDocs:
          url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
        type: string
        format: http-date
        example: Wed, 21 Oct 2015 07:28:00 GMT
      required: false

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes: {}
    OpenId:
      type: openIdConnect
      openIdConnectUrl: https://unknownserver/.well-known/openid-configuration

  responses:
    204NoContent:
      description: Request was successful, no content to return.
    409Conflict:
      description: The request will not be fulfilled. The request itself is legal, but the content conflicts with the server and might be stale. The user might try again after looking up the current state of the resource.
      headers:
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            type: object
    410Gone:
      description: The requested resource is no longer available. This is permanent.
      headers:
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            type: object
    errorResponse:
      description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
      headers:
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            type: array
            maxItems: 3
            items:
              $ref: "#/components/schemas/error"
