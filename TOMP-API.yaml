openapi: 3.0.0
info:
  title: Transport Operator MaaS Provider API
  description: "<h2>Context</h2>
    <p>This API allows technical communication between Transport Operators (TO) and MaaS providers (MP, and other resellers), to fulfill a complete MaaS user journey<br>
    For more information: <a href='https://github.com/TOMP-WG/TOMP-API/wiki/OpenAPI-entry-page'>TOMP-API wiki</a>, and <a href='https://github.com/TOMP-WG/TOMP-API/wiki/OpenAPI-code-convention'>Coding conventions</a>"
  version: "2.0.0"
  contact:
    name: TOMP working group
    url: https://github.com/TOMP-WG/TOMP-API
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: landing page
    description: landing page, to describe the interface

  - name: offer
    description: This part of the API facilitates in supplying offers.

  - name: purchase
    description: This part of the API facilitates to make a booking (aka purchase an offer).

  - name: execute
    description: This part of the API facilitates changing operational parts of the trip, like starting, stopping or even cancel a package element (leg or fare product).

# security. Allowed methods basic (in header: Authorization: Basic ZGVtbzpwQDU1dzByZA==),
#                           bearer (in header: Authorization: Bearer <token>)
#                           Api-key (in header: X-API-Key: abcdef12345)
#                           OAutb and OpenId are also available
# The exact ways to authenticate will be described in a later version
security:
  - BearerAuth: []
  - ApiKeyAuth: []
  - OAuth: []
  - OpenId: []

servers:
  - url: https://example.to.eu/tomp/v2
    description: example url

paths:
  # landing page
  /:
    get:
      tags:
        - landing page
      operationId: landingPage
      summary: "Landing page"
      description: "Gives a (technical & human readable) output describing how this API must be used. If 
        the parameter f=html is supplied, a human readable page must be responded."
      externalDocs:
        url: https://app.swaggerhub.com/apis/OGC/ogcapi-features-1-example-1/1.0.1
      parameters:
        - $ref: "#/components/parameters/f"
      responses:
        "200":
          description: successful operation
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Version:
              $ref: "#/components/headers/version"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/landingPageResponse"
            text/html:
              schema:
                type: string
        default:
          $ref: "#/components/responses/errorResponse"

  # Offer module
  /collections/offers/items:
    get:
      operationId: requestOffers
      summary: "Request offers (simple)"
      description: Returns offers (purchaseable packages) based a (list of) user(s), and optional start/end (and via) locations and a start time or end time. this
        is a simplified offer request. If you want to publish more advanced offers, use the 'PUT' method, and you can configure more parameters
      parameters:
        - name: from
          in: query
          description: the origin of the trip (gps, or external specified location). The location can be formatted
            using '#/components/schemas/link'. See the documentation how to apply external references here
          required: false
          style: form
          explode: false
          x-example:
           gps:6.234,34.2394
           CHB:NL:S:sptz
          schema:
            $ref: "#/components/schemas/externalReference"
        - name: to
          in: query
          description: the destination of the trip (gps, or external specified location).
          required: false
          style: form
          explode: false
          x-example:
            gps:6.234,34.2394
            CHB:NL:S:sptz
          schema:
            $ref: "#/components/schemas/externalReference"
        - name: via
          in: query
          description: the via points of the trip (gps, or external specified location), comma-separated
          required: false
          style: form
          explode: true
          example:
          - "gps:6.234,34.2394"
          - "CHB:NL:S:sptz"
          schema:
            $ref: "#/components/schemas/externalReference"
        - name: start-time
          in: query
          description: the preferred start-time of the trip. start-time OR end-time (exclusive) must be used
          required: false
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/dateTime"            
        - name: end-time
          in: query
          description: the preferred end-time of the trip. start-time OR end-time (exclusive) must be used
          required: false
          style: form
          explode: false
          schema:
            $ref: "#/components/schemas/dateTime" 
        - name: usage
          in: query
          description: a single usage
          required: false
          schema:
            $ref: "#/components/schemas/usage"
          style: form
          explode: true
          example:
            type: INDIVIDUAL_TRAVELER
            id: 34924-3A334B-C342D
        - name: validity
          in: query
          description: a single validity parameter
          schema: 
            $ref: "#/components/schemas/validityParameter"
          style: form
          explode: true
          example:
            type: SERVICE
            class: FIRST
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/bbox"                   
      tags:
        - offer
      responses:
        "200":
          $ref: "#/components/responses/offerResponse"
        default:
          $ref: "#/components/responses/errorResponse"
    post:
      operationId: advancedRequestOffers
      summary: "Request offers (advanced)"
      description: Returns offers (purchaseable packages) based on user requirements. This is the advanced version of the GET. Implement this only
        when you support more advanced queries.
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/bbox"
      tags:
        - offer
      requestBody:
        description: the initial request, containing a TRAVEL SPECIFICATION and additional parameters per USER PROFILE or USER GROUP
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/offerRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/offerResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /collections/offers/items/{packageId}:
    get:
      operationId: getOffer
      summary: "Retrieve a single offer"
      description: Returns a previous supplied offer. Only applicable when the offers are stored/pre-purchased.
      parameters:
        - $ref: "#/components/parameters/packageId"
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
      tags:
        - offer
      responses:
        "200":
          $ref: "#/components/responses/offerResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  # Purchase module
  /collections/purchases/items/:
    post:
      operationId: oneStopPurchaseOperation
      summary: "Perform an purchase of a package based on external data"
      description: This endpoint **must** be used to purchase a package based on external data.<br>
        `Operation`<br>
        _ONE_STOP_PURCHASE_ - purchase directly based on external data<br>
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
        - $ref: "#/components/parameters/notificationUrl"
        - name: operation
          in: query
          description: when this paramater is not supplied, the default value is 'ONE_STOP_PURCHASE'
          required: false
          schema:
            type: string
            enum: ["ONE_STOP_PURCHASE"]
      tags:
        - purchase
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/packageOperationRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/packageResponse"
        "202":
          description: whenever this is returned, the notification URL will be used
        default:
          $ref: "#/components/responses/errorResponse"
  
  /collections/purchases/items/{packageId}:
    post:
      operationId: purchaseOperation
      summary: "Perform an purchase of a package"
      description: This endpoint **must** be used to purchase a package.<br>
        _PURCHASE_ - purchase an offered package<br>
        _2_PHASE_PURCHASE_ - transactional purchase, requires COMMIT to confirm the purchase<br>
        _EXTEND_EXPIRY_TIME_ - request to extend the expiry time of a 2-phase purchase<br>
        _COMMIT_ - commit the 2 phase purchase<br>
        _RELEASE_ - rollback the 2 phase purchase<br>
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
        - $ref: "#/components/parameters/packageId"
        - $ref: "#/components/parameters/notificationUrl"
        - $ref: "#/components/parameters/purchaseOperation"
      tags:
        - purchase
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/packageOperationRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/packageResponse"
        "202":
          description: whenever this is returned, notification URL will be used
        default:
          $ref: "#/components/responses/errorResponse"

  # Execution module
  /collections/packages/items/{packageId}:
    post:
      operationId: packageOperation
      summary: "Perform an operation on a package"
      description: This endpoint **must** be used to alter the package.<br>
        _CANCEL_ - cancel this package<br>
        _CUSTOMER_ - replace a traveller in the package<br>
        _TRAVELLER_ - add, remove or change a traveller to this package<br>
        _PACKAGE_ELEMENT_ - add a package element. When you want to remove or modify a PACKAGE ELEMENT, please use package element operations.<br>
        When using the NOTIFY extension, the 'notificationUrl' is required, so the TO can notify the MP.
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
        - $ref: "#/components/parameters/packageId"
        - $ref: "#/components/parameters/notificationUrl"
        - $ref: "#/components/parameters/packageOperation"
      tags:
        - execute
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/packageOperationRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/packageResponse"
        "202":
          description: when the processing has been completed, the notification URL will be used 
        default:
          $ref: "#/components/responses/errorResponse"
    get:
      operationId: getPackage
      summary: "Request package details"
      description: Retrieves package details, if the packageElementId is not provided, the complete package is returned, otherwise, 
        only the package element is returned within a 'package shell'.
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
        - $ref: "#/components/parameters/packageId"
        - $ref: "#/components/parameters/optionalPackageElementId"
      tags:
        - execute
      responses:
        "200":
          $ref: "#/components/responses/packageResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /collections/legs/items/{packageId}:
    post:
      operationId: legOperation
      summary: "Perform an operation on a leg"
      description: This endpoint must be used to alter the state of a LEG, using OPERATION requests.
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
        - $ref: "#/components/parameters/packageId"
        - $ref: "#/components/parameters/packageElementId"
        - name: operation
          in: query
          description: OPERATION on a specified leg
          required: false
          schema:
            $ref: "#/components/schemas/legOperation"
      tags:
        - execute
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/legOperationRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/packageElementResponse"
        "202":
          $ref: "#/components/responses/packageElementResponse"
        "503":
          description: In case of temporary malfunctioning, this response can be send (e.g. bluetooth lock jammed). See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
          headers:
            Retry-After:
              description: A date after which to retry. See the Date header for more details on the HTTP date format.
              schema:
                $ref: "#/components/schemas/httpDate"
          $ref: "#/components/responses/errorResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /collections/products/items/{packageId}:
    post:
      operationId: productOperation
      summary: "Perform an operation on a fare product"
      description: This endpoint must be used to alter the state of a FARE PRODUCT, using OPERATION requests.
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/receiverId"
        - $ref: "#/components/parameters/packageId"
        - $ref: "#/components/parameters/packageElementId"
        - name: operation
          in: query
          description: OPERATION on a specified product
          required: true
          schema:
            $ref: "#/components/schemas/productOperation"
      tags:
        - execute
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              required:
              - type
              - timestamp
              properties:
                type:
                  type: string
                  enum: [CANCEL, ACTIVATE, PAUSE, RESUME, END, CUSTOM]
                timestamp:
                  $ref: "#/components/schemas/dateTime"
      responses:
        "200":
          $ref: "#/components/responses/packageElementResponse"
        "202":
          $ref: "#/components/responses/packageElementResponse"
        "503":
          description: In case of temporary malfunctioning, this response can be send (e.g. bluetooth lock jammed). See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
          headers:
            Retry-After:
              description: A date after which to retry. See the Date header for more details on the HTTP date format.
              schema:
                $ref: "#/components/schemas/httpDate"
          $ref: "#/components/responses/errorResponse"
        default:
          $ref: "#/components/responses/errorResponse"

components:
  responses:
    # landing page
    landingPageResponse:
      description: The reponse containing a landing page
      headers:
        Version:
          $ref: "#/components/headers/version"
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/landingPage"

    # Offer module
    offerResponse:
      description: a list of packages, if there is no option, it will return an empty list. Each offered package has a unique identifier, that can be used to purchase it.
      headers:
        Version:
          $ref: "#/components/headers/version"
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
        Expires:
          description: The result is valid until this timestamp. The _PENDING_ package expires after this timestamp.
          schema:
            $ref: "#/components/schemas/httpDate"
          required: false
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/offerResponseBody"

    # Purchase module
    purchaseResponse:
      description: A package was succesfully purchased (PURCHASED), or pending (PENDING, to be confirmed using the package operation CONFIRM).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/packageResponseBody"
      headers:
        Version:
          $ref: "#/components/headers/version"
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
        Expires:
          $ref: "#/components/headers/expires"

    # Execution module
    packageResponse:
      description: a single instance of a package
      headers:
        Version:
          $ref: "#/components/headers/version"
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/packageResponseBody"

    packageElementResponse:
      description: a single instance of a leg, contained in the package.
      headers:
        Version:
          $ref: "#/components/headers/version"
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/packageResponseBody"

    # Generic responses
    availableAssetsResponse:
      description: Available ASSETs for the leg. If no suitable assets are found an empty array is to be returned.
      headers:
        Version:
          $ref: "#/components/headers/version"
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/geojson"

    errorResponse:
      description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
      headers:
        Version:
          $ref: "#/components/headers/version"
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                maxItems: 10
                items:
                  $ref: "#/components/schemas/error"
  
  schemas:
    # major concepts
    package:
      allOf:
      - $ref: "#/components/schemas/geojsonProperties"
      - $ref: "#/components/schemas/geojsonFeatureProperties"
      - type: object
        description: a purchased package is a registration of an agreement between end user and TO, to execute a package (=set of legs) according a specification, including all conditions
        required:
          - type
          - status
          - price
        properties:
          type:
            type: string
            enum: ["package"]
          id:
            type: string
          specification:
            $ref: "#/components/schemas/travelSpecification"
          status:
            $ref: "#/components/schemas/packageStatus"
          packageLabel:
            $ref: "#/components/schemas/packageLabel"
          price:
            $ref: "#/components/schemas/amountOfMoney"
            description: the total price of the package
            externalDocs:
              url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2419.htm - (CUSTOMER PURCHASE PACKAGE PRICE) final price
      example:
        {
          "properties":
            {
              "id": "9fbd553b-defa-45c3-9174-1cc4024693a9",
              "type": "PACKAGE",
              "specification":
                {
                  "from": "RUT:ScheduledStopPoint:2",
                  "to": "RUT:ScheduledStopPoint:28482",
                  "startTime": "2019-10-12T07:20:50.52Z",
                  "endTime": "2019-10-12T07:20:50.52Z",
                },
              "status": "OFFERED",
              "packageLabel": "CHEAPEST",
              "elements":
                [
                  {
                    "product": "ENT:3492:PROD",
                    "legs":
                      [ { "id": "RUT:b0b92661-285c-42ca-bd48-c26c992cf18a", "type": "LEG" }, 
                        { "id": "VJ:2d05f5df-e28c-4410-b61c-2149550ff0ba", "type": "LEG" }
                      ],
                    "parameters":
                      [
                        {
                          "usage":
                            [
                              {
                                "type": "USER_PROFILE",
                                "ageGroup": "ADULT",
                                "id": "ADULT",
                              },
                            ],
                          "validities":
                            [
                              { "type": "SERVICE", "class": "FIRST" },
                              { "type": "SEATING", "spotType": "LUGGAGE_SPOT" },
                            ],
                        },
                      ],
                  },
                ],
              "price": { "amount": 9.95, "currencyCode": "EUR" },
            },
          "links":
            [
              {
                "rel": "purchase",
                "method": "POST",
                "href": "/collections/offers/items?packageId=9fbd553b-defa-45c3-9174-1cc4024693a9&operation=purchase",
                "type": "application/geo+json",
                "templated": true,
              },
              {
                "rel": "pre-purchase",
                "method": "POST",
                "href": "/collections/packages/items?packageId=9fbd553b-defa-45c3-9174-1cc4024693a9operation=pre-purchase",
                "type": "application/geo+json",
                "templated": true,
              },
            ],
        }

    packageElement:
      discriminator:
        propertyName: type
        mapping:
          "leg": "#/components/schemas/leg"
          "product": "#/components/schemas/product"
      properties:
        type:
          type: string
          enum: ["leg", "product"]
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/parameter"

    leg:
      allOf:
        - $ref: "#/components/schemas/packageElement"
        - $ref: "#/components/schemas/geojsonFeatureProperties"
        - type: object
          description: A (planned) consumption of a product within a package
          required:
            - id
            - type
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2962.htm
            description: LEG
          properties:
            id:
              $ref: "#/components/schemas/externalReference"
              description:
                The unique identifier (TO) of this leg. Must always the same as applied in the request URL.
                And when there are not additional legs in the offered or purchased package, the same **id** as the package id.
            type:
              type: string
              enum: [ leg ]
            specification:
              $ref: "#/components/schemas/travelSpecification"
            sequenceNumber:
              $ref: "#/components/schemas/shortInt"
              description: The order of the leg within the package. Mandatory, if there are multiple legs in the package. If there are parallel legs (eg. using parking lot and a renting a bike), it can be the same within one package.
            state:
              $ref: "#/components/schemas/legState"
            price:
              $ref: "#/components/schemas/amountOfMoney"
              description: the final price of the leg
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2419.htm - (CUSTOMER PURCHASE PACKAGE PRICE) final price
            product:
              $ref: "#/components/schemas/product"
              description: The product ('asset type') used to execute this leg
            asset:
              $ref: "#/components/schemas/asset"
              description: The concrete asset used for the execution of the leg
            operator:
              $ref: "#/components/schemas/externalReference"
            memo:
              $ref: "#/components/schemas/longString"
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    product:
      allOf:
        - $ref: "#/components/schemas/packageElement"
        - $ref: "#/components/schemas/geojsonFeatureProperties"
        - type: object
          properties:
            type:
              type: string
              enum: [ product ]
            id: 
              $ref: "#/components/schemas/externalReference"
            fare:
              $ref: "#/components/schemas/fareStructure"
              description: The specific fare structure. The price of a leg can be calculated using all elements.
            conditions:
              type: array
              description: specific conditions for this product
              maxItems: 5
              items:
                $ref: "#/components/schemas/condition"
            guarantees:
              type: array
              items:
                $ref: "#/components/schemas/guarantee"
            productParts:
              type: array
              description: references to products that are contained in this product (to facilitate e.g. travel through)
              items:
                $ref: "#/components/schemas/externalReference"

    packageLabel:
      type: string
      enum:
        [
          CHEAPEST,
          MOST_FLEXIBLE,
          NON_FLEXIBLE,
          MOST_ECO_FRIENDLY,
          FASTEST,
          SHORTEST,
        ]

    packageStatus:
      type: string
      description:
        The life-cycle state of the package (from NEW to ENDED)<br>
        _OFFERED_ the package is offered<br>
        _PENDING_ the purchase of the package is not confirmed (the end user has shown intentions to purchase this offer), must be finalized with the package-confirm operation<br>
        _PURCHASED_ a finalized package ('purchased'). Both parties agreed to deliver services in return of payment<br>
        _CANCELLED_ the package is cancelled before it is executed. The agreement will specify whether there is a refund, or under which conditions<br>
        _EXPIRED_ the MP didn't respond on time, the package offer has been expired<br>
        _STARTED_ the package is started, the <u>trip execution</u> module is needed now to manage the execution of the package<br>
        _ENDED_ the package has ended, the trip has been executed<br>
        _RELEASED_ for internal archiving, the package has not been purchased.<br>
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2420.htm
        description: CUSTOMER PURCHASE STATUS
      enum:
        [
          OFFERED,
          PENDING,
          PURCHASED,
          REJECTED,
          RELEASED,
          EXPIRED,
          CANCELLED,
          STARTED,
          ENDED,
        ]
      example: PURCHASED

    legState:
      type: string
      description: status of a leg<br>
        _NOT_STARTED_ the leg is not started, initial state<br>
        _PREPARING_ the _PREPARE_ operation has been received<br>
        _PREPARED_ the leg is ready to use<br>
        _IN_USE_ the travelers are on their way<br>
        _PAUSED_ the asset is paused<br>
        _ENDED_ the travelers have arrived at their destination<br>
        _ISSUE_REPORTED_ due to an issue, there is (temporarily) no progress to report, when the issue isn't solved, this is a final state<br>
        _CANCELLED_ the leg has been cancelled, before execution<br>
        _ABENDED_ the leg is abnormally ended (e.g. due to an issue)
      enum:
        [
          NOT_STARTED,
          PREPARING,
          PREPARED,
          IN_USE,
          PAUSED,
          ENDED,
          ISSUE_REPORTED,
          CANCELLED,
          ABENDED
        ]

    # landing page
    landingPage:
      type: object
      description: a complete endpoint description, containing all endpoints, their status, but also the served scenarios and implemented process flows. The identifiers for the process flows can be found at https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers<br>
      additionalProperties: false
      required:
        - title
        - description
        - links
      properties:
        title:
          type: string
        description:
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        dataSources:
          type: array
          items:
            $ref: "#/components/schemas/link"
          example:
            [
              {
                "rel": "GBFS:vehicles",
                "type": "application/json",
                "href": "/v2/GBFS/vehicles.json",
                "method": "GET",
              },
              {
                "rel": "ARR:ScheduledStopPoint",
                "type": "application/xml+netex",
                "href": "https://data.ndovloket.nl/netex/arr/NeTEx_ARR_NL_20240903_20240904_1420.xml.gz#NeTEx_ARR_NL_20240903_20240904_1420.xml",
                "method": "GET",
              },
            ]
        processIdentifiers:
          type: array
          description: an array with 'care labels', indiacting how this implementation wants to be treated.
          maxItems: 10
          externalDocs:
            url: https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers
            description: overview of all existing process identifiers, clarifying how this implementation of the API should be used.
          items:
            $ref: "#/components/schemas/processIdentifier"
          example:
            [
              {
                "module": "PACKAGE_ELEMENTS",
                "identifiers": [ "ACCESS_CODE_AZTEC" ] ,
              },
            ]

    processIdentifier:
      type: object
      required:
        - module
        - identifiers
      properties:
        module:
          type: string
          enum: [OFFERS, PACKAGES, PACKAGE_ELEMENTS, SUPPORT, PAYMENTS, DATA_SPACES, DISCOVERY, TECH]
        identifiers:
          type: array
          maxItems: 25
          items:
            $ref: "#/components/schemas/shortString"

    # Offer module
    offerRequestBody:
      type: object
      description: A package planning request, resulting in package options
      properties:
        specification:
          $ref: "#/components/schemas/travelSpecification"
        parameters:
          type: array
          maxItems: 10
          minItems: 1
          items:
            $ref: "#/components/schemas/parameter"
      example:
        {
          "specification":
            {
              "from": "gps:6.234,51.6923",
              "via": ["NSR:Quay:108842"],
              "to": "RUT:ScheduledStopPoint:28482",
              "startTime": "2019-10-12T07:20:50.52Z",
              "endTime": "2019-10-12T07:20:50.52Z",
            },
          "parameters":
            [
              {
                "usage":
                  [ { "type": "USER_PROFILE", "ageGroup": "ADULT" },
                    { "type": "ENTITLEMENT", "entitlementType": "NO:MILITARY" },
                    { "type": "COMMERCIAL_PROFILE", "code": "VX34-348J-EI7y" },
                    { "type": "LICENSE_TYPE", "modes": [ "CAR" ] },
                    { "type": "INDIVIDUAL_TRAVELLER", "id": "34924-3A334B-C342D" },
                  ],
                "validities":
                  [ { "type": "SERVICE", "class": "FIRST" },
                    { "type": "SEATING", "spotType": "LUGGAGE_SPOT" },
                  ],
              },
            ],
        }

    offerResponseBody:
      description: Offers, purchaseable package options that fulfil the constraints of the request. The
        `properties` field contains always an offerSummary object.
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/geojson"
        - type: object
          properties:
            unavailable:
              type: array
              items:
                $ref: "#/components/schemas/validityParameter"
      example:
        {
          "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "geometry": {
                "type": "LineString",
                "geometry": [
                  [
                    3.2343,
                    43.342
                  ],
                  [
                    3.3242,
                    43.939
                  ]
                ]
              },
              "properties": {
                "type": "package",
                "specification": { "from": "gps:6.169639,42.3943" }
              },
              "id": "376e1083-92df-44e5-a1bf-d5570507b8ff",
              "links": [ { "rel": "details",
                           "method": "GET", 
                           "description": "More ...",
                           "href": "/collections/offers/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff",
                         },
                         { "rel": "purchase", 
                           "method": "POST", 
                           "description": "Immediately purchase this ticket",
                           "href": "/collections/purchases/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff&operation=purchase",
                         },
                         { "rel": "pre-purchase", 
                           "method": "POST", 
                           "description": "Take an option on this package, so you can alter it before purchasing it",
                           "href": "/collections/purchases/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff&operation=pre-purchase",
                         } 
                       ]
            } ],
          "properties": { "type": "offers" },
          "unavailable": [ { "type": "SERVICE",
                             "serviceJourney": "RUT:ServiceJourney:34929",
                            } ]
        }

    offerSummary:
      allOf:
        - $ref: "#/components/schemas/geojsonProperties"
        - type: object
          additionalProperties: true

    # operations on package level
    packageOperationRequestBody:
      type: object
      description: operation request for the (pre-)purchase, trip execution or after sales phase
      discriminator:
        propertyName: type
        # PURCHASE, 2_PHASE_PURCHASE, ONE_STOP_PURCHASE
        # CONFIRM, CANCEL, EXTEND_EXPIRY_TIME, CUSTOMER, TRAVELLER, PACKAGE_ELEMENT
        mapping:
          # purchase module operations
          PURCHASE: "#/components/schemas/purchaseRequestBody" 
          2_PHASE_PURCHASE: "#/components/schemas/purchaseRequestBody" 
          ONE_STOP_PURCHASE: "#/components/schemas/oneStopPurchaseRequestBody" 
          CONFIRM: "#/components/schemas/packageOperationRequestBody"
          CANCEL: "#/components/schemas/packageOperationRequestBody"
          EXTEND_EXPIRY_TIME: "#/components/schemas/extendExpiryTimeRequestBody"
          # execution module operations: modify the package
          CUSTOMER: "#/components/schemas/customerRequestBody"
          TRAVELLER: "#/components/schemas/travellerRequestBody"
          PACKAGE_ELEMENT: "#/components/schemas/packageElementRequestBody"
      required:
        - type
        - timestamp
      properties:
        type:
          type: string
        timestamp:
          $ref: "#/components/schemas/dateTime"
        comment:
          $ref: "#/components/schemas/longString"
          description: free text, should match Content-Language.

    # Purchase module
    purchaseRequestBody:
      allOf:
        - $ref: "#/components/schemas/packageOperationRequestBody"
        - type: object
          properties:
            customer:
              $ref: "#/components/schemas/customer"
              description: The user that wants to purchase this package, only to supply when requested in the conditions
            customerId:
              $ref: "#/components/schemas/externalReference"
            usage:
              type: array
              description: this describes the travelling party details, that should be available only at booking time, 
                like a driver license number.
              items:
                $ref: "#/components/schemas/usage"

    oneStopPurchaseRequestBody:
      allOf:
        - $ref: "#/components/schemas/packageOperationRequestBody"
        - $ref: "#/components/schemas/offerRequestBody"
        - type: object
          properties:
            customer:
              $ref: "#/components/schemas/customer"
              description: The user that wants to purchase this package, only to supply when requested in the conditions
            customerId:
              $ref: "#/components/schemas/externalReference"

    extendExpiryTimeRequestBody:
      allOf:
        - $ref: "#/components/schemas/packageOperationRequestBody"
        - type: object
          properties:
            extensionReason:
              type: string
              description:
                in case operation is EXTEND_EXPIRY_TIME, the reason for extension must be supplied here.<br>
                _PURCHASE_PENDING_ - The internal purchase process on the MP side is not yet finished<br>
                _PAYMENT_PENDING_ - The customer is in the payment process<br>
                _OTHER_ - unspecified
              enum: [PURCHASE_PENDING, PAYMENT_PENDING, OTHER]

    packageResponseBody:
      $ref: "#/components/schemas/geojson"
      example:
        {
          "type": "FeatureCollection",
          "id": "376e1083-92df-44e5-a1bf-d5570507b8ff",
          "features":
            [
              {
                "type": "Feature",
                "properties":
                  {
                    "id": "376e1083-92df-44e5-a1bf-d5570507b8",
                    "type": "leg",
                    "assetType": "GBFS:vehicle_types:SMALL_CAR",
                  },
                "geometry":
                  {
                    "type": "LineString",
                    "coordinates": [[23.343, 51.6923], [34.233, 42.3943]],
                  },
                "id": "376e1083-92df-44e5-a1bf-d5570507b8",
                "links":
                  [
                  ],
              },
            ],
          "properties":
            {
              "type": "package",
              "id": "376e1083-92df-44e5-a1bf-d5570507b8ff",
              "specification": { "from": "...", "startTime": "..." },
            },
          "links": [
                    {
                      "rel": "confirm",
                      "method": "POST",
                      "href": "/collections/offers/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff&operation=confirm",
                      "type": "application/geo+json",
                    },
                    {
                      "rel": "withdraw",
                      "method": "POST",
                      "href": "/collections/offers/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff&operation=withdraw",
                      "type": "application/geo+json",
                    },
                    {
                      "rel": "extend_expiry_time",
                      "method": "POST",
                      "href": "/collections/offers/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff&operation=extend_expiry_time",
                      "type": "application/geo+json",
                    },
                   ],
        }

    # Modify travellers/customer
    travellerRequestBody:
      allOf:
        - $ref: "#/components/schemas/packageOperationRequestBody"
        - type: object
          required:
            - operation
            - parameters
          properties:
            operation:
              type: string
              enum: [ADD, REMOVE, UPDATE]
            parameters:
              type: array
              items:
                $ref: "#/components/schemas/parameter"
      example:
        {
          "type": "TRAVELLER",
          "timestamp": "2019-10-12T07:20:50.52Z",
          "operation": "ADD",
          "parameters":
            [
              {
                "usage":
                  [
                    {
                      "type": "INDIVIDUAL_TRAVELLER",
                      "id": "34924-3A334B-C342D",
                      "fullName": "J. Doe",
                    },
                  ],
                "validities":
                  [
                    { "type": "SERVICE", "class": "FIRST" },
                    { "type": "DISTRIBUTION", "fulfilmentMethod": "PDF" },
                  ],
              },
            ],
        }

    customerRequestBody:
      description: update the customer with the supplied information
      allOf:
        - $ref: "#/components/schemas/packageOperationRequestBody"
        - type: object
          required:
            - customer
          properties:
            customer:
              $ref: "#/components/schemas/customer"
      example:
        {
          "type": "CUSTOMER",
          "timestamp": "2019-10-12T07:20:50.52Z",
          "requestOffers": false,
          "customer":
            { "id": "ABT-3942349-DFRK", "email": "j.doe@newmail.com" },
        }

    # Modify a legs
    legOperationRequestBody:
      type: object
      discriminator:
        propertyName: type
        # CANCEL, ASSIGN_ASSET, CHANGE_TIME, CHANGE_TIME, ANCILLARY, PREPARE,
        # START, PAUSE, START_ENDING, END, SEND_EVIDENCE
        mapping:
          CANCEL: "#/components/schemas/legOperationRequestBody"
          ASSIGN_ASSET: "#/components/schemas/assetRequestBody"
          CHANGE_TIME: "#/components/schemas/timeRequestBody"
          ANCILLARY: "#/components/schemas/ancillaryRequestBody"
          START: "#/components/schemas/tripExecutionRequestBody"
          PAUSE: "#/components/schemas/tripExecutionRequestBody"
          RESUME: "#/components/schemas/tripExecutionRequestBody"
          END: "#/components/schemas/tripExecutionRequestBody"
          SEND_EVIDENCE: "#/components/schemas/evidenceRequestBody"
          CUSTOM: "#/components/schemas/tripExecutionRequestBody"
      required:
        - type
        - timestamp
      properties:
        type:
          type: string
        timestamp:
          $ref: "#/components/schemas/dateTime"

    timeRequestBody:
      allOf:
        - $ref: "#/components/schemas/legOperationRequestBody"
        - type: object
          properties:
            start_time:
              $ref: "#/components/schemas/dateTime"
            end_time:
              $ref: "#/components/schemas/dateTime"

    tripExecutionRequest:
      allOf:
        - $ref: "#/components/schemas/legOperationRequestBody"
        - type: object
          properties:
            location:
              $ref: "#/components/schemas/externalReference"
              description: location of the user
      example:
        {
          "type": "START",
          "timestamp": "2019-10-12T07:20:50.52Z",
          "location": "gps:6.169639,52.253279"
        }

    evidenceRequestBody:
      allOf:
        - $ref: "#/components/schemas/legOperationRequestBody"
        - $ref: "#/components/schemas/evidence"

    evidence:
      type: object
      properties:
        evidenceFor: 
          type: string
          enum: [ PARKED, HELMET_STOWED, CHARGER_CONNECTED, MAL_PERFORMANCE, MISSED_DUE_TO_DELAY ]
        urls:
          type: array
          description: urls to support the operation e.g. pictures justifying the exit conditions
          maxItems: 10
          items:
            $ref: "#/components/schemas/url"

    ancillaryRequestBody:
      allOf:
        - $ref: "#/components/schemas/legOperationRequestBody"
        - type: object
          required:
            - operation
            - parameters
          properties:
            operation:
              type: string
              enum: [ADD, REMOVE]
            parameters:
              type: array
              items:
                $ref: "#/components/schemas/validityParameter"
      example:
        {
          "type": "ANCILLARY",
          "timestamp": "2019-10-12T07:20:50.52Z",
          "operation": "ADD",
          "parameters": [ { "type": "EQUIPMENT",
                            "id": "CROW:SA-04:HELMET-#349",
                            "name": "Bike helmet, adult M" } ]
        }

    assetRequestBody:
      allOf:
        - $ref: "#/components/schemas/legOperationRequestBody"
        - type: object
          description: when the 'asset' field is missing in the request, a geojson must be returned, containing all 
            avaibale assets. Each 'properties' field must contain an availableAsset object, the links must contain a link
            to assign that specific asset.
          properties:
            asset:
              $ref: "#/components/schemas/externalReference"
      example:
        {
          "type": "assign_asset",
          "timestamp": "2019-10-12T07:20:50.52Z",
          "asset": "GBFS:vehicles:eriwo-3489"
        }

    availableAsset:
      allOf:
      - $ref: "#/components/schemas/geojsonFeatureProperties"
      - type: object
        properties:
          id:
            $ref: "#/components/schemas/externalReference"
          type:
            type: string
            enum: [available_asset]
          state:
            $ref: "#/components/schemas/assetState"
          fare:
            $ref: "#/components/schemas/fareStructure"
          location:
            $ref: "#/components/schemas/externalReference"
          damages:
            type: array
            description: List of known asset damages.
            maxItems: 100
            items:
              $ref: "#/components/schemas/damage"
        example:
            {
              "id": "GBFS:vehicles:7935d555-cdab-4932-99f4-a8674e52dc7d",
              "type": "available_asset",
              "location": "GBFS:stations:ZWOLLE_3",
              "damages": []
            }

    # modify a product
    packageElementRequestBody:
      allOf:
        - $ref: "#/components/schemas/packageOperationRequestBody"
        - type: object
          required:
            - operation
            - parameters
          properties:
            operation:
              type: string
              enum: [ADD, UPDATE, REMOVE]
            parameters:
              type: array
              items:
                $ref: "#/components/schemas/validityParameter"

    packageElementResponse:
      allOf:
        - $ref: "#/components/schemas/geojsonFeature"
        - $ref: "#/components/schemas/links"
      example:
        {
          "type": "feature",
          "geometry": { "type": "LineString" },
          "id": "0bb49b0e-f33b-4e14-843b-aec78eeb7135",
          "properties":
            {
              "id": "0bb49b0e-f33b-4e14-843b-aec78eeb7135",
              "type": "leg",
              "specification":
                {
                  "from": "gps:6.234,42.3943",
                  "startTime": "2024-04-22T11:34:00Z",
                },
              "state": "ENDED",
              "price": { "amount": 3.53, currencyCode: "USD" },
              "assetType": "GTFS:trips:GT3492",
              "operator": "GTFS:agency:NY_PT01",
            },
          "links": [
              {
                "rel": "self",
                "method": "GET",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135",
                "type": "application/geo+json",
              },
              # only when legState = NOT_STARTED
              {
                "rel": "cancel",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=CANCEL",
                "type": "application/geo+json",
              },
              {
                "rel": "prepare",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=PREPARE",
                "type": "application/geo+json",
              },
              {
                "rel": "assign_asset",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=ASSIGN_ASSET",
                "type": "application/geo+json",
              },
              {
                "rel": "change_time",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=CHANGE_TIME",
                "type": "application/geo+json",
              },
              # only when legState = NOT_STARTED OR PREPARING
              {
                "rel": "add_ancillaries",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=ADD_ANCILLARY",
                "type": "application/geo+json",
              },
              {
                "rel": "remove_ancillaries",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=REMOVE_ANCILLARY",
                "type": "application/geo+json",
              },
              {
                "rel": "start",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=START",
                "type": "application/geo+json",
              },
              # only when legState = IN_USE
              {
                "rel": "pause",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=PAUSE",
                "type": "application/geo+json",
              },
              {
                "rel": "open_trunk",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=OPEN_TRUNK",
                "type": "application/geo+json",
              },
              {
                "rel": "start_ending",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=START_ENDING",
                "type": "application/geo+json",
              },
              {
                "rel": "end",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=END",
                "type": "application/geo+json",
              },
              # when legState not in ENDED or ENDING
              {
                "rel": "change_times",
                "method": "POST",
                "href": "/collections/legs/items?packageId=2bcb15a7-084a-40d6-a93d-2c0780d174f1&legId=0bb49b0e-f33b-4e14-843b-aec78eeb7135&operation=CHANGE_TIME",
                "type": "application/geo+json",
              },
            ],
        }

    # Offer module objects
    usage:
      type: object
      discriminator:
        propertyName: type
        mapping:
          INDIVIDUAL_TRAVELLER: "#/components/schemas/individualTraveller"
          USER_PROFILE: "#/components/schemas/userProfile"
          GROUP_PROFILE: "#/components/schemas/groupProfile"
          COMPANION_PROFILE: "#/components/schemas/companionProfile"
          COMMERCIAL_PROFILE: "#/components/schemas/commercialProfile"
          ENTITLEMENT: "#/components/schemas/entitlementGiven"
          CARD_TYPE: "#/components/schemas/cardType"
          CARD: "#/components/schemas/card"
          LICENSE_TYPE: "#/components/schemas/licenseType"
          LICENSE: "#/components/schemas/license"
          ASSET: "#/components/schemas/asset"
      required:
        - type
      properties:
        type:
          type: string

    userProfile:
      allOf:
        - $ref: "#/components/schemas/usage"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/shortString"
            type:
              type: string
              enum: [USER_PROFILE]
            minimumAge:
              $ref: "#/components/schemas/shortInt"
            maximumAge:
              $ref: "#/components/schemas/shortInt"
            monthDayOnWhichAgeApplies:
              $ref: "#/components/schemas/shortInt"
            ageGroup:
              type: string
              enum: [ANYONE, INFANT, CHILD, YOUTH, ADULT, SENIOR]
            minimumHeight:
              $ref: "#/components/schemas/shortInt"
            maximumHeight:
              $ref: "#/components/schemas/shortInt"
            localResident:
              type: boolean
            genderLimitation:
              type: boolean

    companionProfile:
      allOf:
        - $ref: "#/components/schemas/usage"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/shortString"
            type:
              type: string
              enum: [COMPANION_PROFILE]
            minimumNumberAllowed:
              $ref: "#/components/schemas/shortInt"
            maximumNumberAllowed:
              $ref: "#/components/schemas/shortInt"

    groupProfile:
      allOf:
        - $ref: "#/components/schemas/usage"
        - type: object
          externalDocs:
            url: https://transmodel/GroupTicket
          properties:
            id:
              $ref: "#/components/schemas/shortString"
            type:
              type: string
              enum: [GROUP_PROFILE]
            name:
              $ref: "#/components/schemas/normalString"
            profiles:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/userProfile"
                  - type: object
                    required:
                      - quantity
                    properties:
                      quantity:
                        $ref: "#/components/schemas/shortInt"

    commercialProfile:
      allOf:
        - $ref: "#/components/schemas/usage"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/shortString"
            type:
              type: string
              enum: [COMMERCIAL_PROFILE]
            code:
              $ref: "#/components/schemas/shortString"
            name:
              $ref: "#/components/schemas/normalString"

    entitlementGiven:
      allOf:
        - $ref: "#/components/schemas/usage"
        - type: object
          required:
            - entitlementType
          properties:
            id:
              $ref: "#/components/schemas/shortString"
              description: a unique ID for this usage. Especially required when it is a USER PROFILE or an INDIVIDUAL TRAVELLER. Other concepts might refer to this ID.
            type:
              type: string
              enum: [ENTITLEMENT]
            entitlementType:
              $ref: "#/components/schemas/normalString"

    travelSpecification:
      type: object
      required:
        - from
      properties:
        from:
          $ref: "#/components/schemas/externalReference"
          description: use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'
          example: "gps:6.234,51.6923"
        via:
          type: array
          minItems: 0
          maxItems: 3
          items:
            $ref: "#/components/schemas/externalReference"
          description: use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'
          example: [ "NSR:Quay:108842" ]
        to:
          $ref: "#/components/schemas/externalReference"
          description: use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'
          example: "RUT:ScheduledStopPoint:28482"
        startTime:
          $ref: "#/components/schemas/dateTime"
          description: The intended departure time.
            If left out and no endTime is set, the current time should be assumed.
            If only the arrival time is specified, this is an implicit request for a guaranteed arrival at that time.
        endTime:
          $ref: "#/components/schemas/dateTime"
          description: The intended arrival time, at the `to place`. When the **startTime** is not set, and **endTime** is set, it is an implicit request for an arrival time guarantee.
        placeDefinitions:
          description: Places that are not specified in an external data source (like a home address)
          type: array
          minItems: 0
          maxItems: 3
          items:
            $ref: "#/components/schemas/postalAddress"

    parameter:
      type: object
      properties:
        usage:
          type: array
          description: this describes the travelling party, the users (when purchasing or later, when anonymous travelling is not applicable) or user profiles (during the offers)
          items:
            $ref: "#/components/schemas/usage"
          example:
            [
              { "type": "USER_PROFILE", "ageGroup": "ADULT", "id": "ADULT" },
              {
                "type": "ENTITLEMENT",
                "entitlementType": "NO:MILITARY",
                "user": "ADULT",
              },
              {
                "type": "COMMERCIAL_PROFILE",
                "code": "VX34-348J-EI7y",
                "user": "ADULT",
              },
              { "type": "LICENSE_TYPE", "modes": ["CAR"], "user": "ADULT" },
              { "type": "INDIVIDUAL_TRAVELLER", "id": "34924-3A334B-C342D" },
            ]
        validities:
          type: array
          items:
            $ref: "#/components/schemas/validityParameter"
          example:
            [
              { "type": "SERVICE", "class": "FIRST" },
              { "type": "SEATING", "spotType": "LUGGAGE_SPOT" },
            ]

    validityParameter:
      type: object
      discriminator:
        propertyName: type
        mapping:
          ORGANISATIONAL: "#/components/schemas/organisationalValidityParameter"
          SEATING: "#/components/schemas/seatingValidityParameter"
          DISTRIBUTION: "#/components/schemas/distributionValidityParameter"
          NETWORK: "#/components/schemas/networkValidityParameter"
          ROUTING: "#/components/schemas/routingValidityParameter"
          SERVICE: "#/components/schemas/serviceValidityParameter"
          TEMPORAL: "#/components/schemas/temporalValidityParameter"
          EQUIPMENT: "#/components/schemas/equipmentValidityParameter"
      required:
      - type
      properties:
        type:
          type: string

    equipmentValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          id:
            $ref: "#/components/schemas/shortString"
          name:
            $ref: "#/components/schemas/shortString"
          description:
            $ref: "#/components/schemas/longString"
          infoLink:
            $ref: "#/components/schemas/url"
          image:
            $ref: "#/components/schemas/url"

    temporalValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          startTime:
            $ref: "#/components/schemas/dateTime"
          endTime:
            $ref: "#/components/schemas/dateTime"
          duration:
            $ref: "#/components/schemas/normalInt"
          dayType:
            $ref: "#/components/schemas/day"

    seatingValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          spotType:
            type: string
            enum: [VEHICLE_SPOT, PASSENGER_SPOT, LUGGAGE_SPOT]
          deck:
            $ref: "#/components/schemas/shortString"
          space:
            $ref: "#/components/schemas/shortString"
          spot:
            $ref: "#/components/schemas/shortString"

    networkValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          location:
            $ref: "#/components/schemas/externalReference"
          line:
            $ref: "#/components/schemas/externalReference"
          zones:
            type: array
            items:
              $ref: "#/components/schemas/externalReference"

    routingValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          journeyPattern:
            type: array
            items:
              $ref: "#/components/schemas/externalReference"

    serviceValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          product:
            $ref: "#/components/schemas/externalReference"
          asset:
            $ref: "#/components/schemas/externalReference"
          serviceJourney:
            $ref: "#/components/schemas/externalReference"
          userNeeds:
            type: array
            items:
            $ref: "#/components/schemas/externalReference"
          class:
            $ref: "#/components/schemas/classOfUse"
          facilities:
            type: array
            items:
              $ref: "#/components/schemas/facility"

    onboardStay:
      allOf:
      - $ref: "#/components/schemas/facility"
      - type: object
        required:
          - type
        description: Permission to board early before the journey or stay on board after the journey.
        properties:
          description:
            $ref: "#/components/schemas/longString"
          classOfUse:
            $ref: "#/components/schemas/classOfUse"
          permission:
            type: boolean
          duration:
            $ref: "#/components/schemas/shortString"

    accommodation:
      allOf:
      - $ref: "#/components/schemas/facility"
      - type: object
        description: A combination of accommodation characteristics available on a service, e.g. "First Class Couchette with shower and 2 bunks".
        properties:
          description:
            $ref: "#/components/schemas/longString"
          classOfUse:
            $ref: "#/components/schemas/classOfUse"
          name:
            $ref: "#/components/schemas/shortString"
          gender:
            type: string
            enum: [M, F, X, U]
          berthType:
            type: string
            enum: [SLEEPER]
          nuisanceFacility:
            type: array
            items:
              $ref: "#/components/schemas/shortString"

    facility:
      type: object
      discriminator:
        propertyName: type
        mapping:
          ONBOARD_STAY: "#/components/schemas/onboardStay"
          ACCOMODATION: "#/components/schemas/accommodation"
      required:
      - type
      properties:
        type:
          type: string
          enum: [ONBOARD_STAY, ACCOMODATION]

    distributionValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          fulfilmentMethod:
            $ref: "#/components/schemas/normalString"
          distributionChannel:
            $ref: "#/components/schemas/normalString"

    organisationalValidityParameter:
      allOf:
        - $ref: "#/components/schemas/validityParameter"    
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/shortString"
            type:
              type: string
              enum: [ORGANISATIONAL]
            name:
              $ref: "#/components/schemas/normalString"
            legalName:
              $ref: "#/components/schemas/normalString"

    classOfUse:
      type: string
      description: A classification of fare and other service classes by category of user entitled to use them.
      enum:
        [
          FIRST_CLASS,
          SECOND_CLASS,
          THIRD_CLASS,
          ECONOMY_CLASS,
          BUSINESS_CLASS,
          TURISTA,
          PREFERENTE,
          PREMIUM_CLASS,
          ANY,
          UNKNOWN,
        ]

    # operations
    purchaseOperation:
      type: string
      description:
        _PURCHASE_ - purchase an offered package<br>
        _2_PHASE_PURCHASE_ - transactional purchase, COMMIT to confirm the purchase<br>
        _EXTEND_EXPIRY_TIME_ - entend the expiry time of a 2-phase purchase<br>
        _CONFIRM_ - commit the 2 phase purchase<br>
        _RELEASE_ - rollback the 2 phase purchase<br>
      enum:
        [
          PURCHASE,
          2_PHASE_PURCHASE,
          EXTEND_EXPIRY_TIME,
          CONFIRM,
          RELEASE,
        ]

    packageOperation:
      type: string
      description:
        _CANCEL_ - Cancels a purchased package, it returns a package in a cancelled state.<br>
        _TRAVELLER_ - request to add, remove or change one of the travelers. Can be refused if contractual or financial changes are requested<br>
        _CUSTOMER_ - request a change of the customer. Can be refused if contractual or financial changes are requested<br>
        _PACKAGE_ELEMENT_ request to add or remove a package element to the package
      enum:
        [
          CANCEL,
          CUSTOMER,
          TRAVELLER,
          PACKAGE_ELEMENT,
        ]

    legOperation:
      type: string
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA4/EA2/EA4/EA1162.htm
        description: TYPE OF EVENT
      description: -|
        The list below contains all formalized operations. Other operations are allowed as well, but have one restriction - the external status of the leg cannot not be changed.<br>
        This allows for instance to introduce a 'OPEN_TRUNK' operation. The links collection can be altered depending on the operations that have been performed.<br>
        Communication from TO towards MP is handled in the 'notify' extension.<br>

        Operations:<br>
        _ASSIGN_ASSET_ [Prepurchase, trip execution] - can assign an ASSET to a LEG. Can be used to replace an ASSET, or as first step in the trip execution process [ONBOARDING STEP]<br>
        If assigning an ASSET is not allowed for this package 403 should be returned. If the package is unknown, 404 should be returned.<br>
        _CHANGE_TIMES_ [Prepurchase, trip execution] will be used to request a changed end or start time<br>
        _CANCEL_ [Prepurchase, after sales] will cancel this LEG. Only allowed when multiple LEGs are included in the package, otherwise the complete package should be cancelled<br>

        _ANCILLARIES_ [Prepurchase, trip execution] requests to add or remove the specified ANCILLARY to the LEG<br>

        _START_ will activate the LEG or resume the LEG [ONBOARDING STEP, RESUMING STEP]<br>
        _PAUSE_ will pause the LEG [PAUSING STEP]<br>
        _RESUME_ will resume the LEG [RESUMING STEP]<br>
        _END_ will end this LEG [OFFBOARDING STEP]<br>
        _CANCEL_ will cancel this LEG. Only allowed when multiple LEGs are included in the package, otherwise the complete package should be cancelled<br>

        _SEND_EVIDENCE_ sends pictures (in url field) to prove that the ASSET is parked correctly<br>
        _CUSTOM_ Custom operation
        _REVOKE_TICKET_ Revocation of a ticket
      enum: [
          CANCEL,
          ASSIGN_ASSET,
          CHANGE_TIME,
          ANCILLARIES,
          START,
          PAUSE,
          RESUME,
          END,
          SEND_EVIDENCE,
          CUSTOM,
          REVOKE_TICKET
        ]

    productOperation:
      type: string
      description: -|
          CANCEL - to cancel this product (package element), optionally to reimburse
          ACTIVATE - activate the product
          PAUSE - pause the product
          RESUME - resume the product
          END - end the product
          INITIATE - initate a new leg
          CUSTOM - custom operations
      enum:
        - CANCEL
        - ACTIVATE
        - PAUSE
        - RESUME
        - END
        - INITIATE
        - CUSTOM

    # terms & conditions
    cancellationCondition:
      description: conditions regarding cancellation of a purchased package
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2179.htm
        description: (CANCELLING)
      type: object
      properties:
        cancellationAllowed:
          type: boolean
          description: is it possible to cancel this package?
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2177.htm
            description: CANCELLING.cancellationAllowed
        cancellationFee:
          $ref: "#/components/schemas/amountOfMoney"
          description: amount of money you have to pay when you cancel this purchased package
        cancellationFeePercentage:
          $ref: "#/components/schemas/float"
          description: percentage of the offered price you have to pay when you cancel this purchased package

    condition:
      discriminator:
        propertyName: type
        mapping:
          PAYMENT: "#/components/schemas/paymentCondition"
          CANCELLATION: "#/components/schemas/cancellationCondition"
          PURCHASE: "#/components/schemas/purchaseCondition"
          EXECUTION: "#/components/schemas/packageExecutionCondition"
      oneOf:
        - $ref: "#/components/schemas/paymentCondition"
        - $ref: "#/components/schemas/cancellationCondition"
        - $ref: "#/components/schemas/purchaseCondition"
        - $ref: "#/components/schemas/packageExecutionCondition"
      required:
        - type
        - id
      properties:
        type:
          type: string
          description: The specific subclass of condition
          enum:
            [REQUIRED_INTERACTIONS, PAYMENT, CANCELLATION, PURCHASE, EXECUTION]
        id:
          $ref: "#/components/schemas/shortString"
          description: An identifier for this condition that can be used to refer to this condition
          example: deposit50eu

    guarantee:
      type: object
      properties:
        id:
          type: string
        organisation:
          type: string
        type:
          type: string
          description:
            _ARRIVAL_TIME_ - the TO guarantees that you will - under normal circumstances - will arrive at the destination of the leg  <br>
            _GUARANTEED_CONNECTION_ - the TO will arrange an alternative for the missed connection
            _REFUND_UNUSED_ANCILLARIES_ - unused ancillaries will be refunded
            _REFUND_WHEN_CANCELLED_ - when cancelled, no costs will be charged when package not started.
            _OTHER_ - textual, free format
          enum:
            [
              ARRIVAL_TIME,
              GUARANTEED_CONNECTION,
              REFUND_UNUSED_ANCILLARIES,
              REFUND_WHEN_CANCELLED,
              OTHER
            ]
        other:
          type: string
        redresses:
          type: array
          description: these redresses can also contain the subclass 'paymentDetail' (from the Payment extension)
          items:
            $ref: "#/components/schemas/fareStructure"

    paymentCondition:
      description: conditions regarding payment<br>
        _DEPOSIT_ - in case the TO demands a deposit before usage. Requesting and refunding should be done using the /collection/payments?packageId={id}&legId={id} endpoint. The requests are initiated by the TO (calling the MP)<br>
        _PAY_WHEN_FINISHED_ - in case the TO demands a direct payment after usage, automatically done by the MP<br>
        _UPFRONT_ - in case the TO demands a upfront payment before usage. The payment should be made in the purchase phase. Additional costs could be relevant, e.g. when using the _TIME_EXTEND_ operation is executed.
        The MP must settle the payment before the package can be started (using START).
      type: object
      required:
        - momentOfPayment
      properties:
        momentOfPayment:
          type: string
          enum: [DEPOSIT, PAY_WHEN_FINISHED, UPFRONT, SUBSCRIPTION]
        deposit:
          $ref: "#/components/schemas/amountOfMoney"
          description: the amount of money to pay as a deposit.

    purchaseCondition:
      description: specify required information to complete a purchase
      type: object
      required:
        - requiredFields
      properties:
        maximumPeriodBeforeDeparture:
          $ref: "#/components/schemas/longInt"
          description: Maximum time in minutes that an asset can be reserved before a rental begins.
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2177.htm
            description: PURCHASE WINDOW.MaximumPeriodBeforeDeparture

    packageExecutionCondition:
      description: conditions during the package
      type: object
      properties:
        codeOfConduct:
          type: array
          description: code of conduct items during traveling<br>
            _NO_PETS_ - no pets are allowed in the asset<br>
            _NO_SMOKING_ - smoking is not allowed in the asset<br>
            _NO_TRAVEL_ABROAD_ - it is not allowed to enter another country with this asset<br>
            _NO_UNDERGROUND_PARKING_ - it is not allowed to park the asset underground
          maxItems: 5
          items:
            type: string
            enum:
              [NO_PETS, NO_SMOKING, NO_TRAVEL_ABROAD, NO_UNDERGROUND_PARKING]
        returnBefore:
          $ref: "#/components/schemas/dateTime"
          description: the ultimate return time.
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA5/EA2121.htm
            description: USAGE validITY PERIOD.EndDate & EndTime
        returnStations:
          type: array
          description: to one of these stations the asset must be returned
          maxItems: 10
          items:
            $ref: "#/components/schemas/externalReference"
        returnAreas:
          type: array
          description: in one of these areas the asset must be returned
          maxItems: 10
          items:
            $ref: "#/components/schemas/geojsonGeometry"
        returnZones:
          type: array
          description: in one of these externally described zones the asset must be returned
          maxItems: 10
          items:
            $ref: "#/components/schemas/externalReference"
        requiredLicenseTypes:
          type: array
          description: ONE of these licenses is required to operate the asset
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA7/EA2152.htm
            description: ENTITLEMENT REQUIRED
          maxItems: 5
          items:
            $ref: "#/components/schemas/licenseType"
        requiredAncillaries:
          type: array
          description: required ancillaries to operate the asset (like a helmet, TYPE=ANCILLARY)
          maxItems: 25
          items:
            $ref: "#/components/schemas/externalReference"
        maxBounds:
          $ref: "#/components/schemas/geojsonGeometry"
          description: the maximum bounds of movement, can be an (multi)polygon (for bike sharing) or a line, a trajectory (for conventional public transport)
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA5/EA2119.htm
            description: ROUTING.CrossBorder possible, TOMP allowing more use cases.
        timeLimits:
          type: array
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA5/EA2121.htm
            description: USAGE validITY PERIOD, except TM tells when it is allowed, TOMP tells when it is not allowed or when there is a reduction.
          items:
            $ref: "#/components/schemas/timeRestriction"

    # asset related concepts
    asset:
      allOf:
        - $ref: "#/components/schemas/usage"
        - description: the asset that can by applied to execute a leg.
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3578.htm
            description: VEHICLE
            # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA2/EA3719.htm (PARKING BAY)
            # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA3/EA1/EA3735.htm (CYCLE STORAGE EQUIPMENT)
            # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA3/EA2/EA3742.htm (VEHICLE CHARGING EQUIPMENT)
            # OR PASSENGER SPOT
          properties:
            type:
              type: string
              enum: [asset]
            id:
              $ref: "#/components/schemas/shortString"
              description: Identifier of an asset. Preferably UUID.
            externalReference:
              $ref: "#/components/schemas/externalReference"
            visualId:
              $ref: "#/components/schemas/shortString"
              description: for instance, a license plate or seat number.

            product:
              $ref: "#/components/schemas/externalReference"
            mode:
              $ref: "#/components/schemas/mode"
            subMode:
              $ref: "#/components/schemas/normalString"
              description:
                a more precise classification of the asset, like 'cargo bike', 'public bus', 'coach bus', 'office bus', 'water taxi',  'segway'.
                This is mandatory when using 'OTHER' as class.
            eco:
              $ref: "#/components/schemas/ecoValues"
            cargo:
              $ref: "#/components/schemas/cargoLimits"
            appSupport:
              $ref: "#/components/schemas/appSupport"
            equipment:
              type: array
              description: list of external references
              maxItems: 100
              items:
                $ref: "#/components/schemas/externalReference"
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    assetState:
      type: object
      description: the state of the asset, where is it, etc
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      properties:
        mileage:
          $ref: "#/components/schemas/float"
          description: the current mileage of the asset, in km
        stateOfCharge:
          $ref: "#/components/schemas/shortInt"
          description: percentage of charge available (battery, petrol tank)
        maxRange:
          $ref: "#/components/schemas/float"
          description: maximum range in meters

    cargoLimits:
      type: object
      description: applicable properties to specify cargo space/loads
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      properties:
        description:
          $ref: "#/components/schemas/longString"
          description: describes options to carry cargo, should match Content-Language
        volume:
          $ref: "#/components/schemas/normalInt"
          description: the volume in liters of the cargo
        weight:
          $ref: "#/components/schemas/normalInt"
          description: the weight in kilograms of the cargo

    damage:
      type: object
      description: A damage of the asset.
      additionalProperties: false
      required:
        - assetComponent
        - description
      properties:
        assetComponent:
          type: string
          description: Part/Component of the asset affected. If OTHER is specified the description needs to provide more detail as to what part/component is affected.<br>
          enum:
            [
              FRONT,
              REAR,
              LEFT,
              RIGHT,
              TOP,
              BOTTOM,
              INTERIOR,
              TIRE,
              ANCILLARY,
              OTHER,
            ]
        description:
          $ref: "#/components/schemas/longString"
          description: Description of the damage.
        pictures:
          type: array
          description: URL where pictures of the damage can be accessed. Any special characters in the URL must be correctly escaped.
          maxItems: 10
          items:
            $ref: "#/components/schemas/url"

    ecoValues:
      type: object
      description: applicable properties to specify ecological/environmental aspects. Derived from GBFS.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      properties:
        energyLabel:
          type: string
          description: Energy efficiency label
          enum: [A, B, C, D, E]
        ecoLabel:
          type: array
          description: see https://github.com/MobilityData/gbfs/blob/v2.3/gbfs.md
          maxItems: 3
          items:
            type: object
            properties:
              ecoSticker:
                $ref: "#/components/schemas/shortString"
              countryCode:
                $ref: "#/components/schemas/country"
        co2Emission:
          $ref: "#/components/schemas/float"
          description: the emission of grammes CO2 per km

    mode:
      type: string
      description: These classes are taken from the NeTeX standard, but ALL and UNKNOWN are removed. On the other hand OTHER and PARKING are added.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA1/EA284.htm
        description: MODE
      enum:
        [
          AIR,
          BUS,
          TROLLEYBUS,
          TRAM,
          COACH,
          RAIL,
          INTERCITYRAIL,
          URBANRAIL,
          METRO,
          WATER,
          CABLEWAY,
          FUNICULAR,
          TAXI,
          SELFDRIVE,
          FOOT,
          BICYCLE,
          MOTORCYCLE,
          CAR,
          SHUTTLE,
          OTHER,
          PARKING,
          MOPED,
          STEP,
          FERRY,
        ]

    # traveler / customer concepts
    card:
      allOf:
        - $ref: "#/components/schemas/cardType"
        - type: object
          description: Any kind of card that isn't a license, only provide the cards that are required
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA3/EA2368.htm
            description: CUSTOMER PAYMENT MEANS
            # MISSING: Identification/Passport
            # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA4/EA2300.htm (MEDIUM ACCESS DEVICE)
          required:
            - number
            - endvalidity
          properties:
            type:
              type: string
              enum: [CARD]
            traveller:
              $ref: "#/components/schemas/shortString"
              description: refers to the id-field of one of the travellers
            number:
              $ref: "#/components/schemas/externalReference"
              description: number of the card, like ID number, credit card or bank account number
            description:
              $ref: "#/components/schemas/shortString"
              description: description of the card
            additionalNumber:
              $ref: "#/components/schemas/shortString"
              description: additional number, like CVC code or IBAN code
            endValidity:
              $ref: "#/components/schemas/date"
              description: this card is valid until this date
            country:
              $ref: "#/components/schemas/country"

    cardType:
      allOf:
        - $ref: "#/components/schemas/usage"
        - type: object
          description: A generic description of a CARD
          additionalProperties: true
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA7/EA3626.htm
            description: TYPE OF PAYMENT METHOD
            # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA4/EA2300.htm (MEDIUM ACCESS DEVICE)
            #      https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA4/EA2302.htm (EMV CARD)
          required:
            - type
          properties:
            id:
              $ref: "#/components/schemas/externalReference"
              description: external reference to address the card used.
            type:
              type: string
              enum: [CARD_TYPE]
            cardType:
              type: string
              description: The broad category of card<br>
                DISCOUNT - discount card, can be applied in the purchase process to get rebate<br>
                TRAVEL - (external) travel card, possibly paid for in other context, but also monthly, weekly or day-cards<br>
                BANK - bank card<br>
                CREDIT - credit card<br>
                ID - identification card, like an ID card<br>
                PASSPORT - passport to identify yourself<br>
                OTHER - unspecified
              enum: [DISCOUNT, TRAVEL, BANK, CREDIT, ID, PASSPORT, OTHER]
            subType:
              $ref: "#/components/schemas/shortString"
              description: For use in case of OTHER. Can be used in bilateral agreements.
            relatedProduct:
              $ref: "#/components/schemas/externalReference"
            transportOrganisations:
              type: array
              maxItems: 15
              description: references to accepting parties, only if applicable
              items:
                $ref: "#/components/schemas/externalReference"

    customer:
      description: A MaaS user that wishes to purchase a package, only use the fields required by purchase conditions
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA1/EA2333.htm
        description: TRANSPORT CUSTOMER
        # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA1/EA2335.htm (CUSTOMER ACCOUNT)
      type: object
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/externalReference"
          description: The identifier the MP uses to identify the customer. Could be an external referenced ID, like a ABT account number
          example: "A0-123456"
        initials:
          $ref: "#/components/schemas/tinyString"
          description: Initials of the customer
        firstName:
          $ref: "#/components/schemas/shortString"
          description: First name of the customer
          example: John
        lastName:
          $ref: "#/components/schemas/shortString"
          description: Last name of the customer
          example: Doe
        middleName:
          $ref: "#/components/schemas/tinyString"
          description: Middle name of the customer
          example: von
        prefix:
          $ref: "#/components/schemas/tinyString"
          description: prefix of the customer, like titles
        postfix:
          $ref: "#/components/schemas/tinyString"
          description: postfix of the customer, like titles
        phoneNumber:
          $ref: "#/components/schemas/normalString"
        email:
          $ref: "#/components/schemas/normalString"
          description: the email address of the customer
        dateOfBirth:
          $ref: "#/components/schemas/date"
        placeOfBirth:
          $ref: "#/components/schemas/shortString"
        countryOfBirth:
          $ref: "#/components/schemas/shortString"
        address:
          $ref: "#/components/schemas/postalAddress"
        photo:
          $ref: "#/components/schemas/longString"
          description: base64 encoded
          format: byte-array
        extraInfo:
          $ref: "#/components/schemas/customProperties"

    license:
      allOf:
        - $ref: "#/components/schemas/licenseType"
        - type: object
          description: driver or usage license for a specific user. Contains the number and the assetType you're allowed to operate (e.g. driver license for CAR)
          required:
            - traveller
            - number
          properties:
            type:
              type: string
              enum: [LICENSE]
            traveller:
              $ref: "#/components/schemas/externalReference"
              description: refers to the id-field of one of the travellers
            number:
              $ref: "#/components/schemas/shortString"
              example: "1287948792"
            endvalidity:
              $ref: "#/components/schemas/date"

    licenseType:
      allOf:
        - $ref: "#/components/schemas/usage"
        - type: object
          description: A category of license to use a certain asset class
          additionalProperties: true
          required:
            - mode
          properties:
            id:
              $ref: "#/components/schemas/shortString"
              description: a unique ID for this usage. Especially required when it is a USER PROFILE or an INDIVIDUAL TRAVELLER. Other concepts might refer to this ID.
            type:
              type: string
              enum: [LICENSE_TYPE]
            modes:
              type: array
              items:
                $ref: "#/components/schemas/mode"
            licenseCode:
              $ref: "#/components/schemas/shortString"
              description: in most countries a driver license has also a code. As TO you can exactly verify, based on this code if the license allows to operate it's assets, if the assetType too generic.
              example: D4
            issuingCountry:
              $ref: "#/components/schemas/country"

    individualTraveller:
      allOf:
        - $ref: "#/components/schemas/usage"
        - type: object
          required:
            - id
            - type
          description: A generic description of a traveler, not including any identifying information
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA6/EA3/EA2/EA1/EA1/EA3977.htm
            description: INDIVIDUAL TRAVELLER
          additionalProperties: true
          properties:
            id:
              $ref: "#/components/schemas/externalReference"
            type:
              type: string
              enum: [INDIVIDUAL_TRAVELLER]
            isValidated:
              type: boolean
              description: Whether this traveler's identity and properties have been verified by the MaaS provider
            age:
              $ref: "#/components/schemas/shortInt"
              minimum: 0
              description: Age of the traveler, may be approximate
            fullName:
              $ref: "#/components/schemas/normalString"
              description: the name of the traveller, can be used to validate against ID cards
            profileReference:
              $ref: "#/components/schemas/shortString"
            customerRefefence:
              $ref: "#/components/schemas/externalReference"

    # fares & payment concepts
    fareStructure:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA6/EA1889.htm
        description: TARIFF
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          description: the total fare is the sum of all parts, except for the 'MAX' fareStructureElement. This one descripes the maximum price for the complete leg.
          additionalProperties: true
          required:
            - estimated
            - elements
          properties:
            estimated:
              type: boolean
              description: is this fare an estimation?
            description:
              $ref: "#/components/schemas/normalString"
              description: user friendly description of the fare (e.g. 'full fare'), should match Content-Language
            elements:
              type: array
              maxItems: 25
              items:
                $ref: "#/components/schemas/fareStructureElement"

    fareStructureElement:
      description:
        this describes a part of the fare (or discount). It contains a for instance the startup costs (fixed)
        or the flex part (e.g. 1.25 EUR per 2.0 MILES). The amount is tax included. In case of discounts, the values are
        negative. With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts.
        The `scale` properties create the ability to communicate scales (e.g. the first 4 kilometers you've to pay
        EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer).
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA4/EA1844.htm
        description:
          "TIME INTERVAL PRICE - type: FLEX scaled: yes unit: time-based
          OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA4/EA1847.htm (TIME UNIT PRICE)  - type: FIXED unit: time-based
          OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA2/EA1805.htm (GEOGRAPHICAL UNIT PRICE) - type: FIXED unit: distance-based
          OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA2/EA1802.htm (GEOGRAPHICAL INTERVAL PRICE) - type: FLEX scaled: yes unit: distance-based"
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              description:
                type of fare structure element. If there is only one fare structure elements and this field is missing, it should
                be assumed it is 'FIXED'. In all other situations this field is mandatory.<br>
                _FIXED_ fixed element, independend on the duration or distance traveled.
                _FLEX_ flex element, dependend on the duration or distance of the package. Can be tiered.
                _MAX_ capping mechanism. Calculate the price using the sum of the FIXED and FLEX elements, cap it using this rule. Max 1 per fare structure.
              enum: [FIXED, FLEX, MAX]
            priceLevel:
              type: string
              description:
                is this the default price or is this an additional part (discount, price surge). <br>
                _DEFAULT_ the default price for this price part<br>
                _DISCOUNT_ the amount must always be negative <br>
                _SURGE_ the amount must always be positive <br>
                This also means, that when you're working with discounts or surges, you have to deliver 2 fare structure elements, one for the default price and one for the discount/surge. This can be used in combination with as
                well the fixed price parts as with the flex price parts.
              enum: [DEFAULT, DISCOUNT, SURGE]
            units:
              type: string
              description: in case of 'FLEX' mandatory, otherwise not allowed. E.g. 0.5 EUR per HOUR
              enum: [KM, SECOND, MINUTE, HOUR, MILE, PERCENTAGE]
            amountOfUnits:
              $ref: "#/components/schemas/float"
              description:
                the number of km, seconds etc. Mandatory when the type is 'FLEX', otherwise
                not allowed. In case of 0.5 EUR per 15 MINUTES, the amount is 0.5, the `amountOfUnits` must contain 15 and `units` MINUTES.
            interval:
              $ref: "#/components/schemas/interval"
            validity:
              $ref: "#/components/schemas/timeWindow"
            name:
              $ref: "#/components/schemas/normalString"
              description: an optional description of this fare structure element.
            class:
              type: string
              description:
                class of this fare structure element. Could be FARE or ANCILLARY<br>
                _FARE_ this fare structure element is related to the distance or time of usage.<br>
                _ANCILLARY_ this fare structure element is related to the rental of one or more ancillaries.
              default: "FARE"
              enum: [FARE, ANCILLARY]
            minimumAmount:
              $ref: "#/components/schemas/float"
              description: The minimum price, in the same currency as amount. Place in `amount` the most likely value.
              example: 9.00
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            maximumAmount:
              $ref: "#/components/schemas/float"
              description: The minimum price, in the same currency as amount. Place in `amount` the most likely value.
              example: 11.00
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            assetState:
              type: string
              description: in case the fare is dependent on being in use or being paused, this field must be used. Default IN_USE
              enum: [IN_USE, PAUSED]
              default: IN_USE
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    interval:
      type: object
      required:
        - from
        - to
      properties:
        from:
          $ref: "#/components/schemas/float"
          description:
            in case of scaling, this is the bottom value (f.x. in the first hour 3 CAD, the `interval.from` should
            contain 0 and the `interval.units` HOUR). When `to` is used, but this field is missing, it should be assumed
            it is a 0.
        to:
          $ref: "#/components/schemas/float"
          description:
            the upper value of the scale (f.x. 3 CAD in the first hour, this field should contain 1,
            `interval.from` 0 and `interval.units` HOUR)
        units:
          type: string
          description: the units is normally the same as the **interval.units**, but it doesn't have to be. For instance, you could pay 1 EUR per kilometer for the first hour.
          enum: [KM, MILE, HOUR, MINUTE]

    # address concepts
    postalAddress:
      type: object
      description: address parts, where addressLine1 and 2 should contain the complete address, matches Content-Language
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA5/EA319.htm
        description: POSTAL ADDRESS
      required:
        - addressLine1
        - addressLine2
      properties:
        addressLine1:
          $ref: "#/components/schemas/longString"
          description: contains street, housenumber & additions
          example: example street 18, 2nd floor, 18-B33
        addressLine2:
          $ref: "#/components/schemas/longString"
          description: city or town, principal subdivision such as province, state or county
          example: Smallcity, Pinetree county
        street:
          $ref: "#/components/schemas/normalString"
          description: street, consistent with addressLine1
        houseNumber:
          $ref: "#/components/schemas/normalInt"
          description: house number, consistent with addressLine1
          minimum: 1
        houseNumberAddition:
          $ref: "#/components/schemas/tinyString"
          description: the additional part of the house number (f.x. 13bis, where 'bis' is the additional part), consistent with addressLine1
        postalCode:
          $ref: "#/components/schemas/shortString"
          description: the postal code, whenever available
        city:
          $ref: "#/components/schemas/shortString"
          description: specified city or town, consistent with addressLine2
        province:
          $ref: "#/components/schemas/shortString"
          description: province or region, consistent with addressLine2
        state:
          $ref: "#/components/schemas/shortString"
          description: state, consistent with addressLine2
        country:
          $ref: "#/components/schemas/country"
        additionalInfo:
          $ref: "#/components/schemas/longString"
          description: additional information to find the address (f.x. just around the corner)
      example:
        {
          "id": "PA:fdb151f2-bcd6-4b2a-9998-6c6a2ca8b66d",
          "type": "POSTAL_ADDRESS",
          "addressLine1": "Clearwater road 18",
          "addressLine2": "Muddycity X2433",
        }

    # app concepts
    appSupport:
      type: object
      description: attributes to display/use in an external app.
      properties:
        displayName:
          $ref: "#/components/schemas/shortString"
          description: displayable name for this asset
        description:
          $ref: "#/components/schemas/longString"
          description: the description of the asset
        image:
          $ref: "#/components/schemas/url"
          description: Link to an image of the asset
          example: "https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg"
        icon:
          $ref: "#/components/schemas/url"
          description: Link to an icon of the asset
        accessMethods:
          type: array
          items:
            $ref: "#/components/schemas/typeOfTravelDocument"
          description: how this asset can be opened

    binaryAccessInfo:
      description: Binary information, like a image or certificate
      allOf:
        - $ref: "#/components/schemas/travelDocument"
        - type: object
          required:
            - base64
          properties:
            base64:
              $ref: "#/components/schemas/longString"
              description: base 64 QR code
            version:
              $ref: "#/components/schemas/tinyString"

    deeplink:
      description: deeplink info
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT (?)
      allOf:
        - $ref: "#/components/schemas/travelDocument"
        - type: object
          required:
            - url
          properties:
            url:
              description:
                the base deeplink url for the MP app. Can be extended by
                the 'knownParamaters'. Including the scheme.
              example: mp1.app://something/?auth=sdfkjhrkjsdf003df38=dfsdf
              $ref: "#/components/schemas/url"
            knownParameters:
              type: array
              maxItems: 25
              items:
                $ref: "#/components/schemas/shortString"
              example:
                ["return-url", "error-url", "error-code", "error-description"]

    digitalTicket:
      description: Arbitrary data the TO may pass along the ticket to the client
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT
      allOf:
        - $ref: "#/components/schemas/travelDocument"
        - type: object
          required:
            - url
          properties:
            url:
              $ref: "#/components/schemas/url"
              description: download url for html/pdf

    eKey:
      description: Axa EKey information
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT (?)
      allOf:
        - $ref: "#/components/schemas/travelDocument"
        - type: object
          required:
            - ekey
            - lock
          properties:
            ekey:
              type: object
              additionalProperties: false
              properties:
                key:
                  $ref: "#/components/schemas/longString"
                  description: certificate
                passkey:
                  $ref: "#/components/schemas/longString"
                  description: one time pass key
            lock:
              type: object
              additionalProperties: false
              properties:
                bdAddress:
                  $ref: "#/components/schemas/longString"
                  description: physical address
                deviceName:
                  $ref: "#/components/schemas/normalString"
                  description: how it advertises itself

    otherAccessInfo:
      description: Generic travelDocument, non-standardized (yet)
      $ref: "#/components/schemas/customProperties"

    travelDocument:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT
      type: object
      discriminator:
        propertyName: travelDocumentType
        mapping:
          PDF: "#/components/schemas/digitalTicket"
          HTML: "#/components/schemas/digitalTicket"
          DEEPLINK: "#/components/schemas/deeplink"
          AXA_EKEY_OTP: "#/components/schemas/eKey"
          BLUETOOTH: "#/components/schemas/otherAccessInfo"
          NFC: "#/components/schemas/otherAccessInfo"
          QR: "#/components/schemas/binaryAccessInfo"
          AZTEC: "#/components/schemas/binaryAccessInfo"
          BARCODE: "#/components/schemas/binaryAccessInfo"
          CERTIFICATE: "#/components/schemas/binaryAccessInfo"
          PHYSICAL_KEY: "#/components/schemas/otherAccessInfo"
          TOMP_API: "#/components/schemas/otherAccessInfo"
          EXTERNAL_CARD: "#/components/schemas/otherAccessInfo"
          NONE: "#/components/schemas/otherAccessInfo"
      #oneOf:
      #- $ref: "#/components/schemas/digitalTicket"
      #- $ref: "#/components/schemas/deeplink"
      #- $ref: "#/components/schemas/eKey"
      #- $ref: "#/components/schemas/otherAccessInfo"
      #- $ref: "#/components/schemas/binaryAccessInfo"
      required:
        - startvalidity
        - endvalidity
        - travelDocumentType
      properties:
        startvalidity:
          $ref: "#/components/schemas/dateTime"
        endvalidity:
          $ref: "#/components/schemas/dateTime"
        travelDocumentType:
          $ref: "#/components/schemas/typeOfTravelDocument"

    typeOfTravelDocument:
      type: string
      description: how this type is implemented?<br>
      enum: [
          PDF,
          HTML, # digitalTicket
          DEEPLINK, # deeplink
          AXA_EKEY_OTP,
          BLUETOOTH,
          NFC, # proprietary
          QR,
          AZTEC,
          BARCODE,
          CERTIFICATE, # binaryAccessInfo
          TOMP_API,
          PHYSICAL_KEY,
          EXTERNAL_CARD,
          NONE, # OTHER
        ]
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA3/EA2286.htm
        description: TYPE OF TRAVEL DOCUMENT

    externalReference:
      $ref: "#/components/schemas/normalString"

    # GeoJSON specs, in contradiction to the convention starting with a capital. Reason: compatibility with GeoJSON specification (types are named this way)
    basePoint:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
        format: float
        minimum: 0.0
      example: [4.53432, 55.324523]

    geojsonPoint:
      type: object
      description: Geojson Coordinate
      allOf:
        - $ref: "#/components/schemas/geojsonGeometry"
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              $ref: "#/components/schemas/basePoint"

    geojsonLine:
      type: object
      description: An array of WGS84 coordinate pairs
      allOf:
        - $ref: "#/components/schemas/geojsonGeometry"
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              example: [[6.169639, 52.253279], [6.05623, 52.63473]]
              items:
                $ref: "#/components/schemas/basePoint"

    geojsonPolygon:
      type: object
      description: geojson representation of a polygon. First and last point must be equal. See also https://geojson.org/geojson-spec.html#polygon and example https://geojson.org/geojson-spec.html#id4. The order should be lon, lat [[[lon1, lat1], [lon2,lat2], [lon3,lat3], [lon1,lat1]]], the first point should match the last point.
      allOf:
        - $ref: "#/components/schemas/geojsonGeometry"
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              example:
                [[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0, 0.0], [1.0, 1.0]]]
              items:
                type: array
                example: [[6.169639, 52.253279], [6.05623, 52.63473]]
                items:
                  $ref: "#/components/schemas/basePoint"

    geojsonMultiPolygon:
      type: object
      description: geojson representation of a multi polygon. See also https://geojson.org/geojson-spec.html#multipolygon
      allOf:
        - $ref: "#/components/schemas/geojsonGeometry"
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              example:
                [[[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0, 0.0], [1.0, 1.0]]]]
              items:
                type: array
                example:
                  [[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0, 0.0], [1.0, 1.0]]]
                items:
                  type: array
                  example: [[6.169639, 52.253279], [6.05623, 52.63473]]
                  items:
                    $ref: "#/components/schemas/basePoint"

    geojsonGeometry:
      type: object
      discriminator:
        propertyName: type
        mapping:
          Point: "#/components/schemas/geojsonPoint"
          LineString: "#/components/schemas/geojsonLine"
          Polygon: "#/components/schemas/geojsonPolygon"
          MultiPolygon: "#/components/schemas/geojsonMultiPolygon"
      description: geoJSON geometry
      required:
        - type
      properties:
        type:
          type: string
          enum: ["Point", "LineString", "Polygon", "MultiPolygon"]
      example:
        {
          "type": "LineString",
          "geometry": [[3.2343, 43.342], [3.3242, 43.939]]
        }

    geojsonCustomFeatureProperties:
      allOf:
      - $ref: "#/components/schemas/geojsonFeatureProperties"
      - $ref: "#/components/schemas/customProperties"
      - type: object
        required:
          - type
        properties:
          type:
            type: string

    geojsonFeatureProperties:
      discriminator:
        propertyName: type
        mapping:
          package: "#/components/schemas/package"
          leg: "#/components/schemas/leg"
          product: "#/components/schemas/product"
          custom: "#/components/schemas/geojsonCustomFeatureProperties"
          start_location: "#/components/schemas/geojsonCustomFeatureProperties"
          end_location: "#/components/schemas/geojsonCustomFeatureProperties"
          via_point: "#/components/schemas/geojsonCustomFeatureProperties"
          progress: "#/components/schemas/geojsonCustomFeatureProperties"
          station: "#/components/schemas/geojsonCustomFeatureProperties"
          stop: "#/components/schemas/geojsonCustomFeatureProperties"
          available_asset: "#/components/schemas/availableAsset"
          poi: "#/components/schemas/geojsonCustomFeatureProperties"
          area: "#/components/schemas/geojsonCustomFeatureProperties"
        properties:
          type:
            type: string

    geojsonFeature:
      type: object
      properties:
        type:
          type: string
          enum: ["Feature"]
        geometry:
          $ref: "#/components/schemas/geojsonGeometry"
        properties:
          $ref: "#/components/schemas/geojsonFeatureProperties"          
        id:
          $ref: "#/components/schemas/externalReference"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"

    geojsonProperties:
      description: the 'properties' object of the geojson collection
      additionalProperties: true
      discriminator:
        propertyName: type
        mapping:
          offers: "#/components/schemas/offerSummary"
          package: "#/components/schemas/package"
          available_assets: "#/components/schemas/offerSummary"
      properties:
        type:
          type: string
          enum: [offers, package, available_assets]

    geojson:
      type: object
      properties:
        type:
          type: string
          enum: ["FeatureCollection"]
        features:
          type: array
          items:
            $ref: "#/components/schemas/geojsonFeature"
        properties:
          $ref: "#/components/schemas/geojsonProperties"
        numberMatched:
          type: number
        numberReturned:
          type: number
        links:
          type: array
          description:
            actions that can be performed on this package, but also alternative (rel=alternative+1, alternative+2) offers or references to other resources
            In case it is an alternative, specify clearly in the description what the financial consequences are.
          items:
            $ref: "#/components/schemas/link"
          example:
            [
              {
                "rel": "alternative+1",
                "type": "application/geo+json",
                "url": "/collections/package/items/4394234",
                "method": "GET",
              },
              {
                "rel": "alternative+2",
                "type": "application/geo+json",
                "url": "/collections/package/items/4394235",
                "method": "GET",
              },
              {
                "rel": "android",
                "type": "application/vnd.android.ota",
                "url": "app://yourbrand.go.link?product=4394234",
                "method": "GET",
              },
              {
                "rel": "apple",
                "type": "application/vnd.apple.installer+xml",
                "url": "https://yourbrand.go.link?product=4394234",
                "method": "GET",
              },
            ]

    # links
    links:
      type: object
      externalDocs:
        url: https://en.wikipedia.org/wiki/Hypertext_Application_Language
      properties:
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"

    link:
      type: object
      additionalProperties: false
      externalDocs:
        url: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml
      required:
        - href
      properties:
        rel:
          type: string
          description: the action that can be performed OR part of the URI 
            (e.g. NETEX:StopPoint:342, where the location of the NETEX file can be specified)
          example: purchase
        method:
          type: string
          description: to indicate the http method.
          enum: [ POST, GET, DELETE, PATCH ]
        description:
          type: string
          description: the description of the external data source
        body:
          type: object
          description: the (prefilled) body for the request
          example:
            {
              "from": "NSR:Quay:108842",
              "startTime": "2019-10-12T07:20:50.52Z",
              "parameters":
                [
                  {
                    "usage": [{ "type": "INDIVIDUAL_TRAVELLER", "fullName", "" }],
                    "validities": [{ "type": "SERVICE", "class": "FIRST" }],
                  },
                ],
            }
        required:
          type: array
          description: the required fields in the body, using JSONPath to identify the fields, these items
            start with a '$.'. If a header field is required, it must start with 'header.headername' Required parameters
            must start with 'parameter.parametername'
          minItems: 0
          maxItems: 50
          items:
            type: string
          example: ["$.parameters[0].usage[0].fullName", "header.Autorization", "parameter.featureId"]
        headers:
          type: object
          additionalProperties:
            type: string
          example: { "Autorization": "Token 3042-3402-3428" }
        parameters:
          type: object
          description: possible parameters, but fixed parameters can be added in the href. It is 
            not mandatory to enlist them in this object. In practice, this object will contain
            optional parameters and required parameters that have to be completed.
          additionalProperties:
            type: string
        href:
          $ref: "#/components/schemas/url"
        type:
          $ref: "#/components/schemas/shortString"
          default: "application/geo+json"
        validity:
          $ref: "#/components/schemas/temporalValidityParameter"

    # complex data types
    amountOfMoney:
      type: object
      description: an amount of money, usable in fares, fare calculations or in extra costs.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA2/EA1688.htm
        description: FARE PRICE
      required:
        - amount
      properties:
        amount:
          type: number
          format: float
          description: This should be in the base unit as defined by the ISO 4217 currency code with the appropriate number of decimal places and omitting the currency symbol. e.g. if the price is in US Dollars the price would be 9.95. This is inclusive VAT
          example: 9.95
        taxPercentageUsed:
          $ref: "#/components/schemas/float"
          description: value added tax rate (percentage of amount)
          example: 21.0
        currencyCode:
          $ref: "#/components/schemas/currencyCode"
        vatCountryCode:
          $ref: "#/components/schemas/country"

    country:
      type: string
      description: two-letter country codes according to ISO 3166-1
      maxLength: 2
      minLength: 2
      pattern: "[A-Z]{2}"
      example: NL

    currencyCode:
      type: string
      description: ISO 4217 currency code
      minLength: 3
      maxLength: 3
      pattern: "[a-zA-Z]{3}"

    customProperties:
      type: object
      description: dictionary for extra fields (bilatural agreements)
      additionalProperties:
        maxLength: 1000
        maxProperties: 20

    error:
      type: object
      additionalProperties: false
      externalDocs:
        url: https://jsonapi.org/examples/#error-objects
        description: Error object, https://tools.ietf.org/html/rfc7807
      description:
        An error that the service may send, e.g. in case of invalId input,
        missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
      required:
        - errorcode
        - title
      properties:
        errorcode:
          $ref: "#/components/schemas/tinyInt"
          description: The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error.
        type:
          $ref: "#/components/schemas/tinyString"
          description: The category of this type of error.
        title:
          $ref: "#/components/schemas/shortString"
          description: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language
        status:
          $ref: "#/components/schemas/tinyInt"
          description: The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        detail:
          $ref: "#/components/schemas/longString"
          description: A human-readable explanation specific to this occurrence of the problem, matches Content-Language
        instance:
          $ref: "#/components/schemas/url"
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.

    timeRestriction:
      allOf:
        - $ref: "#/components/schemas/timeWindow"
        - type: object
          required:
            - limitType
          properties:
            limitType:
              type: string
              enum: [NOT_ALLOWED, REDUCTION]
            reductionPercentage:
              $ref: "#/components/schemas/shortInt"

    timeWindow:
      type: object
      required:
        - startTime
        - endTime
      properties:
        days:
          type: array
          items:
            $ref: "#/components/schemas/day"
        startTime:
          $ref: "#/components/schemas/time"
        endTime:
          $ref: "#/components/schemas/time"

    # base types
    date:
      type: string
      format: full-date
      example: "2019-03-31"
      pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc3339#section-5.6
        description: full-date

    dateTime:
      type: string
      format: date-time
      example: "2019-10-12T07:20:50.52Z"
      # pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$"
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc3339#section-5.6
        description: date-time

    day:
      type: string
      enum: [MON, TUE, WED, THU, FRI, SAT, SUN]
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA3/EA306.htm
        description: DAY OF WEEK

    float:
      type: number
      description: the travelled distance. Only if applicable.
      format: float
      minimum: 0

    httpDate:
      type: string
      description: A HTTP date string
      externalDocs:
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
        description: http-date
      format: http-date
      example: Wed, 21 Oct 2015 07:28:00 GMT

    longInt:
      type: integer
      description: long number, for distances etc. (>1.000)
      default: 0
      minimum: 0

    longString:
      type: string
      description: long string, memos etc (length 0-10.000)
      maxLength: 10000

    normalInt:
      type: integer
      description: default length for an integer (0-1000)
      default: 0
      minimum: 0
      maximum: 1000

    normalString:
      type: string
      description: default string, full names etc (length 0-200)
      maxLength: 200

    shortInt:
      type: integer
      description: a bit short integer (0-100)
      default: 0
      minimum: 0
      maximum: 100

    shortString:
      type: string
      description: short string, display names (length 0-75)
      maxLength: 75

    time:
      type: string
      format: partial-time
      example: "23:59:59.3498"
      # pattern: "^[0-9]{2}:[0-9]{2}:[0-9]{2}('.'[0-9]+)?$"
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc3339#section-5.6
        description: partial-time

    tinyInt:
      type: integer
      description: for really small numbers (0-10)
      default: 0
      minimum: 0
      maximum: 10

    tinyString:
      type: string
      description: real short string, codes (length 0-10)
      maxLength: 10

    url:
      type: string
      description: valid URL
      format: URL

    uuid:
      type: string
      format: UUID
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      example: ae76f51c-a1a6-46af-b9ab-8233564adcae
      externalDocs:
        url: https://en.wikipedia.org/wiki/Universally_unique_identifier
        # also: https://www.ietf.org/rfc/rfc4122.txt

  parameters:
    f:
      description: >-
        The optional f parameter indicates the output format that the server
        shall provide as part of the response document.  The default format is
        JSON.
      explode: false
      in: query
      name: f
      required: false
      schema:
        default: json
        enum:
          - json
          - html
        type: string
      style: form
    packageId:
      in: path
      name: packageId
      schema:
        type: string
      required: true
      description: the identifier of a package
    acceptLanguage:
      in: header
      name: Accept-Language
      required: true
      schema:
        $ref: "#/components/schemas/shortString"
      description: "A comma-separated list of BCP 47 (RFC 5646) language tags and optional weights as described in IETF RFC7231 section 5.3.5. A list of the languages/localizations the user would like to see the results in. For user privacy and ease of use on the TO side, this list should be kept as short as possible"
      example: nl, de;q=0.7
    authorization:
      in: header
      name: authorization
      required: true
      schema:
        type: string
      description: The authenticating token/ID of the sending party
    receiverId:
      in: header
      name: receiver
      required: false
      schema:
        $ref: "#/components/schemas/externalReference"
      description: the ID of the intended receiver
    packageElementId:
      in: query
      name: elementId
      description: package element identifier
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    optionalPackageElementId:
      in: query
      name: elementId
      description: package element identifier
      required: false
      schema:
        $ref: "#/components/schemas/uuid"
    purchaseOperation:
      name: operation
      in: query
      description: OPERATION to execute
      required: false
      schema:
        $ref: "#/components/schemas/purchaseOperation" 

    packageOperation:
      name: operation
      in: query
      description: OPERATION to execute
      required: false
      schema:
        $ref: "#/components/schemas/packageOperation" 

    notificationUrl:
      in: header
      name: notification-url
      description: The URL at the MP side, where notifications will be send to about the purchased packages. Communication towards the TO is always done using notifications.
      required: false
      schema:
        $ref: "#/components/schemas/url"
        
    limit:
      name: limit
      in: query
      description: |-
        The optional limit parameter limits the number of items that are presented in the response document.

        Only items are counted that are on the first level of the collection in the response document.
        Nested objects contained within the explicitly requested items shall not be counted.

        Minimum = 1. Maximum = 10000. Default = 100.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 10000
        default: 100
      style: form
      explode: false
    offset:
      name: offset
      in: query
      description: |-
        The optional offset parameter representing the starting index of the returned collection.

        Only items are counted that are on the first level of the collection in the response document.
        Nested objects contained within the explicitly requested items shall not be counted.

        Default = 0.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      style: form
      explode: false
    bbox:
      name: bbox
      in: query
      description: |-
        Only features that have a geometry that intersects the bounding box are selected.
        The bounding box is provided as four or six numbers, depending on whether the
        coordinate reference system includes a vertical axis (height or depth):

        * Lower left corner, coordinate axis 1
        * Lower left corner, coordinate axis 2
        * Minimum value, coordinate axis 3 (optional)
        * Upper right corner, coordinate axis 1
        * Upper right corner, coordinate axis 2
        * Maximum value, coordinate axis 3 (optional)

        If the value consists of four numbers, the coordinate reference system is
        WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)
        unless a different coordinate reference system is specified in the parameter `bbox-crs`.

        If the value consists of six numbers, the coordinate reference system is WGS 84
        longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)
        unless a different coordinate reference system is specified in the parameter `bbox-crs`.

        The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate
        Reference Systems by Reference.

        For WGS 84 longitude/latitude the values are in most cases the sequence of
        minimum longitude, minimum latitude, maximum longitude and maximum latitude.
        However, in cases where the box spans the antimeridian the first value
        (west-most box edge) is larger than the third value (east-most box edge).

        If the vertical axis is included, the third and the sixth number are
        the bottom and the top of the 3-dimensional bounding box.

        If a feature has multiple spatial geometry properties, it is the decision of the
        server whether only a single spatial geometry property is used to determine
        the extent or all relevant geometries.
      required: false
      schema:
        type: array
        oneOf:
        - minItems: 4
          maxItems: 4
        - minItems: 6
          maxItems: 6
        items:
          type: number
      style: form
      explode: false

  headers:
    contentLanguage:
      description: The language/localization of user-facing content
      example: "nl-NL"
      schema:
        type: string
        format: One IETF BCP 47 (RFC 5646) language tag
        pattern: "^[a-zA-Z]+-[a-zA-Z]+$"
      required: true
    expires:
      description: The result is valid until this timestamp (and must be confirmed unless it is already in state _PURCHASED_). A pre-purchased purchased package is expired after this timestamp.
      schema:
        description: A HTTP date string
        externalDocs:
          url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
        type: string
        format: http-date
        example: Wed, 21 Oct 2015 07:28:00 GMT
      required: false
    version:
      description: the version used to format the response
      schema:
        type: string
      required: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes: {}
    OpenId:
      type: openIdConnect
      openIdConnectUrl: https://unknownserver/.well-known/openid-configuration
