openapi: 3.0.0
info:
  title: Transport Operator MaaS Provider API
  description:
    "<h3>Context</h3>
    It allows technical communication between Transport Operators (TO) and MaaS providers (MP, and other resellers), to fulfill a complete MaaS user journey<br>
    It provides functions for Planning & Purchase, trip execution, Support, Payment and Operation Information.<br><br>

    For more information: <a href='https://github.com/TOMP-WG/TOMP-API/wiki/OpenAPI-entry-page'>TOMP-API wiki</a>.<br><br>

    <b>Convention</b><br>
    In the specification we use these 'coding conventions':<br>
    <table border=1>
    <tr><td>&nbsp;`URLs`</td><td>&nbsp;to specify a URL, referring to endpoints in the specification</td></tr>
    <tr><td>&nbsp;[conditions]</td><td>&nbsp;free format conditions for a specific line</td></tr>
    <tr><td>&nbsp;<i>PROCESS_IDENTIFIER_NAME</i></td><td>&nbsp;see <a href='https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers'>Process Identifiers</a></td></tr>
    <tr><td>&nbsp;<u>MODULE NAME</u></td><td>&nbsp;for the module names, like <u>PURCHASE</u></td></tr>
    <tr><td>&nbsp;CONCEPT NAME</td><td>&nbsp;referring to concepts that are described in the specification</td></tr>
    <tr><td>&nbsp;**property name**</td><td>&nbsp;referring to fields/attributes/properties in a concept</td></tr>
    <tr><td>&nbsp;_enumeration value_</td><td>&nbsp;referring to values from specific properties</td></tr>
    </table>
    "
  version: "2.0.0"
  contact:
    url: https://github.com/TOMP-WG/TOMP-API
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: offers
    description: Functionality to request offers (<u>PLANNING MODULE</u>) & purchase (part of the <u>PURCHASE MODULE</u>) them

  - name: pre-purchase
    description: The rest of the <u>PURCHASE MODULE</u> contains functionality to purchase offers (aka 'book') or purchase packages directly based on external information. Allows also to cancel or commit a non-final PACKAGE.

  - name: purchase 
    description: This part covers the 2-phase purchase, but where the 2nd step is optional in some cases

  - name: one-stop-purchase
    description: This function allows to (instantly) purchase packages based on package/journey planners' results or external information.

  - name: trip execution
    description: The <u>trip execution MODULE</u> contains functionality to execute the leg(s) of purchased packages. Operations like starting, pausing and ending, but also functions like adding/removing ancillaries.

  - name: support
    description: the <u>SUPPORT MODULE</u> facilitates handling support requests

  - name: after sales
    description: the <u>PAYMENT MODULE</u> allows to request a financial transaction and report costs

  - name: interoperability
    description: the <u>INTEROPERABILITY MODULE</u> contains the technical specification of the implementation, how it works together with other standards and an endpoint to check the uptime.

# security. Allowed methods basic (in header: Authorization: Basic ZGVtbzpwQDU1dzByZA==),
#                           bearer (in header: Authorization: Bearer <token>)
#                           Api-key (in header: X-API-Key: abcdef12345)
#                           OAutb and OpenId are also available
# The exact ways to authenticate will be described in a later version
security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []
  - OAuth: []
  - OpenId: []

servers:
  - url: https://tomp.dat.nl/

paths:
  /offered-packages:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/callbackUrl"
    post:
      summary: "[MP->TO] request offers"
      description: Returns offers (purchaseable packages) based on user requirements
      tags:
        - offers
      externalDocs:
        url: https://not-yet-available/
        description: OFFER REQUEST using OFFER PARAMETERS (request body) to produce OFFER DELIVERY (response)
      requestBody:
        description: the initial request, containing locations, timestamps, CARD TYPEs and LICENSE TYPEs, and personal preferences/(dis)abilities. Can also contain a direct reference to an ASSET or ASSET TYPE.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/offerRequest"
      responses:
        "201":
          description: a list of packages, if there is no option, it will return an empty list. Each offered package has a unique identifier, that can be used to purchase it.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              description: The result is valegId until this timestamp. The _PENDING_ package expires after this timestamp. 
              schema:
                $ref: "#/components/schemas/httpDate"
              required: false
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offerResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /offered-packages/{id}/pre-purchase:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/callbackUrl"
    post:
      summary: "[MP->TO] pre-purchase an offered package"
      description: The offered package is transformed into a pre-purchased one. It must be confirmed using the `POST /offers/{id}/COMMIT`.
      tags:
        - offers
      externalDocs:
        url: https://not-yet-available/
        description: PURCHASE REQUEST uses the PURCHASE PARAMETERS (request body) to produce a PACKAGE DELIVERY (response)
      requestBody:
        description: additional information required to create a purchased package. This information can be retrieved from the the LEGs' **conditions**.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/purchaseParameters"

      responses:
        "201":
          description: A package was succesfully purchased (CONFIRMED) or initiated the purchase process (PENDING).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packageResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
        default:
          $ref: "#/components/responses/errorResponse"
        "409":
          $ref: "#/components/responses/409Conflict"
        "410":
          $ref: "#/components/responses/410Gone"

  /packages/{id}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/callbackUrl"
    get:
      summary: "[MP->TO] request package details"
      description: Retrieves package details
      tags:
        - trip execution
      parameters:
      - in: query
        name: selection
        description: "_DETAILS_ - package specification only<br>
          _WITH_LOGS_ - package & event log<br>
          _ONLY_LOGS_ - event log only<br>
          _WITH_PROGRESS_ - package & progress<br>
          _ONLY_PROGRESS_ - progress only<br>
          _WITH_CUSTOMER - package & customer<br>
          _ALL_ - package, logs, customer & progress<br>"
        required: false
        schema:
          type: string
          enum: [ ALL, DETAILS, WITH_LOGS, WITH_PROGRESS, ONLY_LOGS, ONLY_PROGRESS, WITH_CUSTOMER ]
          default: DETAILS
      externalDocs:
        url: https://not-yet-available/
        description: PACKAGE DETAIL REQUEST uses the PACKAGE DETAIL (that's the package ID in URL) to produce PACKAGE DELIVERY (response)
      responses:
        "200":
          description: the details of this PACKAGE, including the customer, progress and the log containing all logged OPERATIONs.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packageResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /offered-packages/{id}/purchase:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/callbackUrl"
    post:
      summary: "[MP->TO] purchase an offered package (step 1 of the 2-phase purchase)"
      description: The offered package is transformed into a purchased one.
      tags:
        - offers
      externalDocs:
        url: https://not-yet-available/
        description: PURCHASE REQUEST uses the PURCHASE PARAMETERS (request body) to produce a PACKAGE DELIVERY (response)
      requestBody:
        description: additional information required to create a purchased package. This information can be retrieved from the the LEGs' **conditions**.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/purchaseParameters"

      responses:
        "201":
          description: A package was succesfully purchased (CONFIRMED) or initiated the purchase process (PENDING).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packageResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
        default:
          $ref: "#/components/responses/errorResponse"
        "409":
          $ref: "#/components/responses/409Conflict"
        "410":
          $ref: "#/components/responses/410Gone"

  /prepurchased-packages/{id}/{prePurchaseOperation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/callbackUrl"
      - name: prePurchaseOperation
        in: path
        description: OPERATION to execute
        required: true
        schema:
          $ref: "#/components/schemas/prePurchaseOperation"
    post:
      summary: "[MP<->TO] request a modification on an offered package"
      description: This endpoint **must** be used to alter the package
      tags:
        - pre-purchase
      externalDocs:
        url: https://not-yet-available/
        description: PACKAGE OPERATION REQUEST, uses the OPERATION PARAMETER (the request body) to produce a PACKAGE DELIVERY (response)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationParameter"
      responses:
        "200":
          description: The modified package
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packageResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
              description: Mandatory whenever the _EXTEND_EXPIRY_TIME_ is used. It must contain the updated expiry time
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2177.htm
                description: PURCHASE WINDOW
        default:
          $ref: "#/components/responses/errorResponse"
  
  /prepurchased-packages/{id}/commit:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/callbackUrl"
    post:
      summary: "[MP<->TO] request to commit a pre-purchased package (step 2 of the 2-phase purchase)"
      tags:
        - purchase
      externalDocs:
        url: https://not-yet-available/
        description: PACKAGE OPERATION REQUEST, uses the OPERATION PARAMETER (the request body) to produce a PACKAGE DELIVERY (response)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationParameter"
      responses:
        "200":
          description: The modified package
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packageResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
              description: Mandatory whenever the _EXTEND_EXPIRY_TIME_ is used. It must contain the updated expiry time
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2177.htm
                description: PURCHASE WINDOW
        default:
          $ref: "#/components/responses/errorResponse"

  /one-stop-purchases:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/callbackUrl"
    post:
      summary: "[MP->TO] directly purchase a package, without offer"
      description:
        Purchases a package directly, based on the parameters.
      tags:
        - one-stop-purchase
      externalDocs:
        url: https://not-yet-available/
        description: PURCHASE REQUEST, uses the ONE STOP PURCHASE REQUEST (request body) to produce a PACKAGE DELIVERY (response)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/oneStopPurchaseParameters"
      responses:
        "201":
          description: a purchased package, or when it's not possible, return a 406.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packageResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
        default:
          $ref: "#/components/responses/errorResponse"

  /packages/{id}/{afterSalesOperation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/callbackUrl"
      - name: afterSalesOperation
        in: path
        description: OPERATION to execute
        required: true
        schema:
          $ref: "#/components/schemas/afterSalesOperation"
    post:
      summary: "[MP<->TO] request an operation on a purchased package"
      description: This endpoint **must** be used to alter the state of a purchased package
      tags:
        - after sales
      externalDocs:
        url: https://not-yet-available/
        description: PACKAGE OPERATION REQUEST, uses the OPERATION PARAMETER (the request body) to produce a PACKAGE DELIVERY (response)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationParameter"
      responses:
        "200":
          description: The modified package
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packageResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
              description: Mandatory whenever the _EXTEND_EXPIRY_TIME_ is used. It must contain the updated expiry time
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2177.htm
                description: PURCHASE WINDOW
        default:
          $ref: "#/components/responses/errorResponse"          

  /packages/{id}/legs/{legId}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/legId"
      - $ref: "#/components/parameters/callbackUrl"
    get:
      summary: "[MP->TO] request leg details"
      description: Retrieves the latest summary of the LEG, being the execution of a part of a journey traveled using one ASSET (TYPE). 
        Every LEG belongs to one PACKAGE ELEMENT, every PACKAGE has at least one LEG. Where the PACKAGE describes the agreement between user/MP and TO, 
        the LEG describes the journey part as it occured.
      externalDocs:
        url: https://not-yet-available/
        description: LEG DETAIL REQUEST uses the PACKAGE DETAIL PARAMETER (=package ID and leg ID in URL) to produce a LEG DETAIL DELIVERY (response)
      tags:
        - trip execution        
      responses:
        "200":
          description: the details of the LEG, in the current LEG STATE
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legDetailResponse"
        default:
          $ref: "#/components/responses/errorResponse"
          
  /packages/{id}/legs/{legId}/{legAfterSalesOperation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/legId"
      - $ref: "#/components/parameters/callbackUrl"
      - name: legAfterSalesOperation
        in: path
        description: OPERATION on the LEG
        required: true
        schema:
          $ref: "#/components/schemas/legAfterSalesOperation"
    post:
      summary: "[MP<->TO] request {operation} on this leg"
      description: This endpoint must be used to alter the STATE of a LEG, using OPERATION requests.
      tags:
        - after sales
      externalDocs:
        url: https://not-yet-available/
        description: LEG OPERATION REQUEST uses the OPERATION PARAMETER (request body) to produce a LEG DETAIL DELIVERY (response)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationParameter"
      responses:
        "200":
          description: OPERATION successful, the leg is returned in the new state.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legDetailResponse"
        "202":
          description: When a confirmation request has to return positive, this code has to be used
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legDetailResponse"
        "400":
          description: When a confirmation request results in a denial, this code has to be used
          $ref: "#/components/responses/errorResponse"
        "503":
          description: In case of temporary malfunctioning, this response can be send (e.g. bluetooth lock jammed). See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
          headers:
            Retry-After:
              description: A date after which to retry. See the Date header for more details on the HTTP date format.
              schema:
                $ref: "#/components/schemas/httpDate"
          $ref: "#/components/responses/errorResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /prepurchased-packages/{id}/legs/{legId}/{legPrePurchaseOperation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/legId"
      - $ref: "#/components/parameters/callbackUrl"
      - name: legPrePurchaseOperation
        in: path
        description: OPERATION on the LEG
        required: true
        schema:
          $ref: "#/components/schemas/legPrePurchaseOperation"
    post:
      summary: "[MP<->TO] request {operation} on this leg"
      description: This endpoint must be used to alter the STATE of a LEG, using OPERATION requests.
      tags:
        - pre-purchase
      externalDocs:
        url: https://not-yet-available/
        description: LEG OPERATION REQUEST uses the OPERATION PARAMETER (request body) to produce a LEG DETAIL DELIVERY (response)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationParameter"
      responses:
        "200":
          description: OPERATION successful, the leg is returned in the new state.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legDetailResponse"
        "202":
          description: When a confirmation request has to return positive, this code has to be used
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legDetailResponse"
        "400":
          description: When a confirmation request results in a denial, this code has to be used
          $ref: "#/components/responses/errorResponse"
        "503":
          description: In case of temporary malfunctioning, this response can be send (e.g. bluetooth lock jammed). See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
          headers:
            Retry-After:
              description: A date after which to retry. See the Date header for more details on the HTTP date format.
              schema:
                $ref: "#/components/schemas/httpDate"
          $ref: "#/components/responses/errorResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /prepurchased-packages/{id}/purchase:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/callbackUrl"
    post:
      summary: "[MP->TO] purchase an offered package (step 1 of the 2-phase purchase)"
      description: The offered package is transformed into a purchased one.
      tags:
        - pre-purchase
      externalDocs:
        url: https://not-yet-available/
        description: PURCHASE REQUEST uses the PURCHASE PARAMETERS (request body) to produce a PACKAGE DELIVERY (response)
      requestBody:
        description: additional information required to create a purchased package. This information can be retrieved from the the LEGs' **conditions**.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/purchaseParameters"

      responses:
        "201":
          description: A package was succesfully purchased (CONFIRMED) or initiated the purchase process (PENDING).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packageResponse"
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
            Expires:
              $ref: "#/components/headers/expires"
        default:
          $ref: "#/components/responses/errorResponse"
        "409":
          $ref: "#/components/responses/409Conflict"
        "410":
          $ref: "#/components/responses/410Gone"

  /packages/{id}/legs/{legId}/{tripOperation}:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/legId"
      - $ref: "#/components/parameters/callbackUrl"
      - name: tripOperation
        in: path
        description: OPERATION on the LEG
        required: true
        schema:
          $ref: "#/components/schemas/legTripOperation"
    post:
      summary: "[MP<->TO] request {operation} on this leg"
      description: This endpoint must be used to alter the STATE of a LEG, using OPERATION requests.
      tags:
        - trip execution 
      externalDocs:
        url: https://not-yet-available/
        description: LEG OPERATION REQUEST uses the OPERATION PARAMETER (request body) to produce a LEG DETAIL DELIVERY (response)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/operationParameter"
      responses:
        "200":
          description: OPERATION successful, the leg is returned in the new state.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legDetailResponse"
        "202":
          description: When a confirmation request has to return positive, this code has to be used
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legDetailResponse"
        "400":
          description: When a confirmation request results in a denial, this code has to be used
          $ref: "#/components/responses/errorResponse"
        "503":
          description: In case of temporary malfunctioning, this response can be send (e.g. bluetooth lock jammed). See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
          headers:
            Retry-After:
              description: A date after which to retry. See the Date header for more details on the HTTP date format.
              schema:
                $ref: "#/components/schemas/httpDate"
          $ref: "#/components/responses/errorResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /packages/{id}/legs/{legId}/available-assets:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/legId"
      - $ref: "#/components/parameters/callbackUrl"
    get:
      summary: "[MP->TO] request available assets to assign to this leg"
      description: Returns a list of available ASSETs for the given LEG. These results can be used to call `POST /packages/{id}/legs/{legId}/ASSIGN_ASSET`. 
      externalDocs:
        url: https://not-yet-available/
        description: LEG AVAILABLE ASSETS REQUEST, uses the LEG AVAILABLE ASSET PARAMETER (=package ID and leg ID in the URL) to produce the AVAILABLE ASSETS DELIVERY (response)
      tags:
        - trip execution        
      responses:
        "200":
          description: Available ASSETs for the leg. If no suitable assets are found an empty array is to be returned.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/availableAssetsResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /packages/{id}/legs/{legId}/support/:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/packageId"
      - $ref: "#/components/parameters/legId"
      - $ref: "#/components/parameters/callbackUrl"
    post:
      summary: "[MP->TO] create a support ticket"
      description: creates a request for SUPPORT from end user via MP
      tags:
        - support        
      externalDocs:
        url: https://not-yet-available/
        description: SUPPORT REQUEST uses the SUPPORT PARAMETER (request body) to produce a SUPPORT DELIVERY (response)
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/supportParameter"
      responses:
        "200":
          description: support request acknowledged, the response contains a support ticket with a unique ID. Multiple support tickets can be created on one single leg.
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/supportResponse"
        default:
          $ref: "#/components/responses/errorResponse"
    get:
      summary: "[MP->TO] request for support ticket details"
      description: returns the statusses of the support tickets of this leg. Each status change will result in a new supportResponse. To find the log of the ticket, group them on ID.
      tags:
        - support
      externalDocs:
        url: https://not-yet-available/
        description: SUPPORT DETAIL REQUEST, uses package DETAIL PARAMETER (package ID and leg ID in the URL) to produce a SUPPORT DETAIL DELIVERY (response)
      responses:
        "200":
          description: support status delivered
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/supportDetailResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /packages/payments:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
      - $ref: "#/components/parameters/callbackUrl"
    get:
      tags:
        - after sales
      summary: "[MP->TO] retrieve financial details"        
      description: Returns all the JOURNAL ENTRIES that should be paid (per LEG)
      externalDocs:
        url: https://not-yet-available/
        description: PAYMENT DETAIL REQUEST uses the PAYMENT DETAIL PARAMETER (parameters) to produce PAYMENT DETAIL DELIVERY (response)
      parameters:
        - name: startTime
          in: query
          description: start of the selection
          required: false
          schema:
            $ref: "#/components/schemas/dateTime"
        - name: endTime
          in: query
          description: end of the selection
          required: false
          schema:
            $ref: "#/components/schemas/dateTime"
        - name: invoiceState
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/paymentState"
        - name: id
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/uuid"
        - name: category
          in: query
          description: type of PAYMENT DETAIL (e.g. fare, addition costs, fines, ...)
          required: false
          schema:
            $ref: "#/components/schemas/paymentCategory"
        - name: offset
          in: query
          description: start of the selection
          required: false
          schema:
            $ref: "#/components/schemas/normalInt"
        - name: limit
          in: query
          description: max length of the selection
          required: false
          schema:
            $ref: "#/components/schemas/normalInt"
      responses:
        "200":
          description: journal entries
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paymentResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /discovery:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
      - $ref: "#/components/parameters/senderId"
      - $ref: "#/components/parameters/receiverId"
    get:
      tags:
        - interoperability
      summary: "[TO<->MP] discover the API"
      description: "All implemented endpoints are described, including the list of PROCESS IDENTIFIERs."
      responses:
        '200':
          description: successful operation
          headers:
            Content-Language:
              $ref: "#/components/headers/contentLanguage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/discoveryResponse"
        default:
          $ref: "#/components/responses/errorResponse"

  /ping:
    parameters:
      - $ref: "#/components/parameters/acceptLanguage"
    get:
      tags:
        - interoperability
      summary: "[TO<->MP] is the API available?"
      description: "[MP|TO] This is a healthcheck ENDPOINT to see if the TO is up and running perfectly."
      responses:
        "204":
          description: successful operation
        default:
          $ref: "#/components/responses/errorResponse"
components:
  schemas:
  # parameters & responses
    oneStopPurchaseParameters:
      externalDocs:
        url: https://not-yet-available/
        description: package PURCHASE PARAMETERS
      allOf:
      - $ref: "#/components/schemas/offerRequest"
      - type: object
        properties:
          customer:
            $ref: "#/components/schemas/customer"
            description: The user that wants to purchase this package

    offerRequest:
      type: object
      description: A package planning request, resulting in package options
      additionalProperties: false
      properties:
        specification:
          $ref: "#/components/schemas/travelSpecification"
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/parameter"

    travelSpecification:
      type: object
      required:
        - from
      properties:
        from:
          $ref: "#/components/schemas/shortString"
          description: use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'
          example: "gps:6.234,51.6923"
        via:
          type: array
          items:
            $ref: "#/components/schemas/shortString"
          description: use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'
          example: ["NSR:Quay:108842"]
        to:
          $ref: "#/components/schemas/shortString"
          description: use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'
          example: "RUT:ScheduledStopPoint:28482"
        placeDefinitions:
          type: object
          description: only when needed, if the IDs used in to/from/via are not clear enough
          additionalProperties:
            $ref: "#/components/schemas/place"
          example:
            "gps:6.234,51.6923" : { "type": "gps", "lng": 6.234, "lat": 51.6923 }
            "NSR:Quay:108842":  { "type": "external", "id": "NSR:Quay:108842", "format": "NeTEx", "url": "https://storage.googleapis.com/marduk-production/outbound/netex/rb_rut-aggregated-netex.zip" }
        startTime:
          $ref: "#/components/schemas/dateTime"
          description: The intended departure time. 
            If left out and no endTime is set, the current time should be assumed. 
            If only the arrival time is specified, this is an implicit request for a guaranteed arrival at that time.
        endTime:
          $ref: "#/components/schemas/dateTime"
          description: The intended arrival time, at the `to place`. When the **startTime** is not set, and **endTime** is set, it is an implicit request for an arrival time guarantee.
        
    parameter:
      type: object
      properties:
        usage:
          type: array
          items:
            $ref: "#/components/schemas/usage"
          example:
            [{ "type": "individualTraveller", "ageGroup": "ADULT" },
             { "type": "entitlement", "entitlementType": "NO:MILITARY" },
             { "type": "commercialProfile", "code": "VX34-348J-EI7y" },
             ]
        validities:
          type: array
          items:
            $ref: "#/components/schemas/validityParameter"
          example: 
            [{ "type": "service", "class": "FIRST" },
             { "type": "seating", "spotType": "LUGGAGE_SPOT" } ]

    usage:
      type: object
      discriminator:
        propertyName: type
        mapping:
          individualTraveller: "#/components/schemas/individualTraveller"
          userProfile: "#/components/schemas/userProfile"
          groupProfile: "#/components/schemas/groupProfile"
          companionProfile: "#/components/schemas/companionProfile"
          commercialProfile: "#/components/schemas/commercialProfile"
          entitlement: "#/components/schemas/entitlementGiven"
      required:
        - type
      properties:
        type:
          type: string
          enum: ["individualTraveller", "userProfile", "groupProfile", "companionProfile", "commercialProfile", "entitlement"]

    userProfile:
      allOf:
      - $ref: "#/components/schemas/usage"
      - type: object
        properties:
          minimumAge:
            $ref: "#/components/schemas/shortInt"
          maximumAge:
            $ref: "#/components/schemas/shortInt"
          monthDayOnWhichAgeApplies:
            $ref: "#/components/schemas/shortInt"
          ageGroup:
            type: string
            enum:
              - ANYONE
              - INFANT
              - CHILD
              - YOUTH
              - ADULT
              - SENIOR
          minimumHeight:
            $ref: "#/components/schemas/shortInt"
          maximumHeight:
            $ref: "#/components/schemas/shortInt"
          localResident:
            type: boolean
          genderLimitation:
            type: boolean

    companionProfile:
      allOf:
      - $ref: "#/components/schemas/usage"
      - type: object
        properties:
          minimumNumberAllowed:
            $ref: "#/components/schemas/shortInt"
          maximumNumberAllowed:
            $ref: "#/components/schemas/shortInt"

    groupProfile:
      allOf:
      - $ref: "#/components/schemas/usage"
      - type: object
        externalDocs:
          url: https://transmodel/GroupTicket
        properties:
          id:
            $ref: "#/components/schemas/shortString"
          name:
            $ref: "#/components/schemas/normalString"
          profiles:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/userProfile'
                - type: object
                  properties:
                    quantity:
                      $ref: "#/components/schemas/shortInt"

    commercialProfile:
      allOf:
      - $ref: "#/components/schemas/usage"
      - type: object
        properties:
          id:
            $ref: "#/components/schemas/shortString"
          code:
            $ref: "#/components/schemas/shortString"
          name:
            $ref: "#/components/schemas/normalString"

    entitlementGiven:
      allOf:
      - $ref: "#/components/schemas/usage"
      - type: object
        required:
          - entitlementType
        properties:
          entitlementType:
            $ref: "#/components/schemas/normalString"
          id:
            $ref: "#/components/schemas/normalString"

    validityParameter:
      type: object
      discriminator:
        propertyName: type
        mapping:
          organisational: "#/components/schemas/organisationalValidityParameter"
          seating: "#/components/schemas/seatingValidityParameter"
          distribution: "#/components/schemas/distributionValidityParameter"
          network: "#/components/schemas/networkValidityParameter"
          routing: "#/components/schemas/routingValidityParameter"
          service: "#/components/schemas/serviceValidityParameter"
          temporal: "#/components/schemas/temporalValidityParameter"
          #product: "#/components/schemas/productValidityParameter"
          entitlementProduct: "#/components/schemas/externalReference"
          fareProduct: "#/components/schemas/externalReference"
      required:
        - type
      properties:
        type:
          type: string

    temporalValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          startTime:
            $ref: "#/components/schemas/dateTime"
          endTime:
            $ref: "#/components/schemas/dateTime"
          duration:
            $ref: "#/components/schemas/normalInt"
          dayType:
            $ref: "#/components/schemas/day"

    seatingValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties: 
          spotType:
            type: string
            enum: ["VEHICLE_SPOT", "PASSENGER_SPOT", "LUGGAGE_SPOT"]
          deck:
            $ref: "#/components/schemas/shortString"
          space:
            $ref: "#/components/schemas/shortString"
          spot:
            $ref: "#/components/schemas/shortString"

    networkValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          line:
            $ref: "#/components/schemas/externalReference"
          zones:
            type: array
            items:
              $ref: "#/components/schemas/externalReference"

    routingValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          journeyPattern:
            type: array
            items:
              $ref: "#/components/schemas/externalReference"

    serviceValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          assetType:
            $ref: "#/components/schemas/externalReference"
          asset:
            $ref: "#/components/schemas/externalReference"
          serviceJourney:
            $ref: "#/components/schemas/externalReference"
          userNeeds:
            type: array
            items:
              $ref: "#/components/schemas/userNeeds"
          class:
            $ref: "#/components/schemas/classOfUse"
          facilities:
            type: array
            items:
              $ref: "#/components/schemas/facility"
        
    userNeeds:
      type: object
      properties:
        externalSpecified:
          type: array
          items: 
            $ref: "#/components/schemas/externalReference"
        encumbrance:
          type: array
          items:
            type: string
            enum:
              - PUSH_CHAIR
              - BAGGAGE_TROLLEY
              - OVERSIZED_BAGGAGE
              - GUIDE_DOG
              - OTHER_ANIMAL
              - OTHER_ENCUMBRANCE_NEED
              - LAGGAGE_ENCUMBRANCE
        medical:
          type: array
          items:
            type: string
            enum:
              - HEART_CONDITION
              - OTHER_CONDITION
              - ALLERGIC
        mobility:
          type: array
          items:
            type: string
            enum:
              - WHEEL_CHAIR
              - ASSISTED_WHEEL_CHAIR
              - MOTORIZED_WHEELCHAIR
              - MOBILITY_SCOOTER
              - ROAD_MOBILITY_SCOOTER
              - WALKING_FRAME
              - RESTRICTED_MOBILITY
              - NORMAL_MOBILITY
              - OTHER_MOBILITY_NEED
        psychosensory:
          type: array
          items:
            type: string
            enum:
              - VISUAL_IMPAIRMENT
              - AUDITORY_IMPAIRMENT
              - COGNITIVE_IMPAIRMENT
              - AVERSE_TO_LIFTS
              - AVERSE_TO_ESCALATORS
              - AVERSE_TO_CONFINED_SPACES
              - AVERSE_TO_CROWDS
              - OTHER_PSYCHO_SENSORY_NEED      

    onboardStay:
      allOf:
      - $ref: "#/components/schemas/facility"
      - type: object
        description: Permission to board early before the journey or stay on board after the journey.
        properties:
          type:
            type: string
            default: OnboardStay
          description:
            type: string
          classOfUse:
            $ref: '#/components/schemas/classOfUse'
          permission:
            type: boolean
          duration:
            type: string

    accommodation:
      allOf:
      - $ref: "#/components/schemas/facility"
      - type: object
        description: A combination of accommodation characteristics available on a service, e.g. "First Class Couchette with shower and 2 bunks".
        properties:
          type:
            type: string
            default: Accommodation
          description:
            type: string
          classOfUse:
            $ref: '#/components/schemas/classOfUse'
          name:
            type: string
          gender:
            type: string
          berthType:
            type: string
            enum:
              - SLEEPER
          nuisanceFacility:
            type: array
            items:
              type: string

    facility:
      type: object
      discriminator:
        propertyName: type
        mapping:
          onboardStay: '#/components/schemas/onboardStay'
          accommodation: '#/components/schemas/accommodation'
      required:
        - type
      properties:
        type:
          type: string        

    classOfUse:
      description: A classification of fare and other service classes by category of user entitled to use them.
      type: string
      enum:
        - FIRST_CLASS
        - SECOND_CLASS
        - THIRD_CLASS
        - ECONOMY_CLASS
        - BUSINESS_CLASS
        - TURISTA
        - PREFERENTE
        - PREMIUM_CLASS
        - ANY
        - UNKNOWN

    distributionValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          fulfilmentMethod:
            $ref: "#/components/schemas/normalString"
          distributionChannel:
            $ref: "#/components/schemas/normalString"

    organisationalValidityParameter:
      allOf:
      - $ref: "#/components/schemas/validityParameter"
      - type: object
        properties:
          id: 
            $ref: "#/components/schemas/shortString"
          name:
            $ref: "#/components/schemas/normalString"
          legalName:
            $ref: "#/components/schemas/normalString"

    offerResponse:
      type: object
      description: Offers, purchaseable package options that fulfil the constraints of the request
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA4/EA5/EA3156.htm
        description: package OFFER DELIVERY
      required:
        - valegIdUntil
        - options
      properties:
        endValegIdity:
          description: The date-time until which the presented options are (likely) available
          $ref: "#/components/schemas/dateTime"
        options:
          type: array
          maxItems: 100
          items: 
            $ref: "#/components/schemas/packageResponse"

    purchaseParameters:
      type: object
      description: A request to purchase a package, to be performed by the MP
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA4/EA5/EA3147.htm
        description: package PURCHASE PARAMETER used to create a package [PURCHASE] DELIVERY (packageResponse)
      properties:
        from:
          $ref: "#/components/schemas/place"
          description: information about the origin, only to supply when requested in the purchaseConditions
        to:
          $ref: "#/components/schemas/place"
          description: information about the destination, only to supply when requested in the purchaseConditions
        travelers:
          type: array
          description: Required (additional) information about the travelers, as requested in the purchaseConditions
          maxItems: 50
          items:
            $ref: "#/components/schemas/individualTraveller"
        customer:
          $ref: "#/components/schemas/customer"
          description: The user that wants to purchase this package, only to supply when requested in the purchaseConditions

    packageResponse:
      externalDocs:
        url: https://not-yet-available/
        description: package PURCHASE DELIVERY, package OPERATION DELIVERY, package DETAIL DELIVERY. Corresponds with
          purchaseParameters, operationParameters and packageDetailParameters (= GET /packages/{id}/)
      properties:
        package:
          allOf:
          - $ref: "#/components/schemas/package"
          - $ref: "#/components/schemas/halLinks"
            example: {
            # planning: purchase this package, only when packagestatus = NEW
                "purchase": { "rel": "POST", "href": "/packages/{id}", "type": "application/hal+json", "templated": true }
            # purchase
              # only when packagestatus = PENDING
              , "commit": { "rel": "POST", "href": "/packages/{id}/COMMIT", "type": "application/hal+json", "templated": true } 
              , "cancel": { "rel": "POST", "href": "/packages/{id}/CANCEL", "type": "application/hal+json", "templated": true }
              , "extend_expiry_time": { "rel": "EXTEND_EXPIRY_TIME", "href": "/packages/{id}/EXTEND_EXPIRY_TIME", "type": "application/hal+json", "templated": true }
            # trip execution
              , "leg": { "rel": "GET", "href": "/packages/{id}/legs/{legId}", "type": "application/hal+json", "templated": true } 
              # only when packagestatus = CONFIRMED
              , "prepare": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/PREPARE", "type": "application/hal+json", "templated": true }
              , "set_in_use": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/SET_IN_USE", "type": "application/hal+json", "templated": true }
              , "change_start_time": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/CHANGE_START_TIME", "type": "application/hal+json", "templated": true }
              , "open_trunk": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/OPEN_TRUNK", "type": "application/hal+json", "templated": true }
              , "add_ancillary": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/ADD_ANCILLARY", "type": "application/hal+json", "templated": true }
            }
        log:
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/logEntry"
        customer:
          $ref: "#/components/schemas/customer"
          description: the customer purchasing this package
        progress:
          $ref: "#/components/schemas/LineString"
          description: A list of COORDINATEs describing the progress so far as LINESTRING (GeoJSON)

    ## pre-purchase
    operationParameter:
      type: object
      description: operation parameter for the purchase or trip execution phase
      externalDocs:
        url: https://not-yet-available/
        description: OPERATION PARAMETER. Delivers package DETAIL DELIVERY (packageResponse) or LEG DETAIL RESPONSE (legDetailResponse)
      additionalProperties: false
      required:
        - timestamp
      properties:
        timestamp:
          $ref: "#/components/schemas/dateTime"
          description: timestamp of the operation, or in case of notification - ETA, the expected time of arrival.
        comment:
          $ref: "#/components/schemas/longString"
          description: free text, should match Content-Language. Also used for reason or notification.
        urls:
          type: array
          description: urls to support the operation e.g. pictures justifying the exit conditions
          maxItems: 10
          items:
            $ref: "#/components/schemas/url"
        requestOffer:
          type: boolean
          description: if this field contains a 'true', the operation shouldn't be executed, but the expected result of the operation should be returned. For instance, 
            if you're cancelling a purchased package, you'll return a CANCELLED package, the price will contain the price that has to be paid for this cancelled package.
          default: false
        source:
          type: string
          description: This operation can be done on behalf of another party. The MP can act on behalf of the CUSTOMER (cancel this package for me); to override the default source.<br>
            In case this field is missing, it must be assumed that the MP is requesting the operations.<br>
            _TO_ the TO requests this operation<br>
            _MP_ the MP (not triggered by the travellers NOR customer)<br>
            _TRAVELLER_ the TRAVELLER triggered this request<br>
            _CUSTOMER_ the CUSTOMER triggered this request. In case the traveller and customer are the same, take _CUSTOMER_.<br>
            _OTHER_ unknown source
          enum: [ TO, MP, TRAVELLER, CUSTOMER, OTHER ]
        # REPORT_PROGRESS (or NOTIFY)
        location:
          $ref: "#/components/schemas/coordinates"
        assetState:
          $ref: "#/components/schemas/assetState"
        distance:
          $ref: "#/components/schemas/float"
          description: the travelled distance, in km. Only if applicable.
        distanceUnits:
          type: string
          enum: [ KM, MILE ]
        duration:
          $ref: "#/components/schemas/longInt"
          description: the time in seconds that the assed is used. Only if applicable.
        # CONFIRMATION
        assetType:
          $ref: "#/components/schemas/assetTypeReference"
          description: the asset type reference of the replacing asset
        # EXTEND_EXPIRY_TIME
        extensionReason:
          type: string
          description: in case operation is EXTEND_EXPIRY_TIME, the reason for extension must be supplied here.<br>
           _PURCHASE_PENDING_ - The internal purchase process on the MP side is not yet finished<br>
           _PAYMENT_PENDING_ - The customer is in the payment process<br>
           _OTHER_ - unspecified
          enum: [ PURCHASE_PENDING, PAYMENT_PENDING, OTHER ]
        # NOTIFICATIONS
        notificationType:
          type: string
          description:
            _VEHICLE_NOT_AVAILABLE_ [MP->TO] in case of a missing vehicle at departure location & time<br>
            _USER_NO_SHOW_ [TO->MP, OnDemand/taxi] the traveler didn't show up on the departure location & time<br>
            _ETA_ [TO->MP, OnDemand/taxi] Estimated time of arrival at the departure location [others] at the destination location. User friendly message is in **comment**<br>
            _MESSAGE_TO_DRIVER_ [MP->TO] text messages to the driver, provided by the MP or traveler(s). Text is in **comment**<br>
            _MESSAGE_TO_END_USER_ [TO->MP] text message to show to the traveler(s). Text is in **comment**<br>
            _USER_OUT_OF_LIMITS_ [TO->MP] indication to signal to the driver/traveler(s) they are (about to get) out of limits. Text is in **comment**<br>
            _OTHER_ [TO->MP] unspecified. Text is in **comment**<br>
            _LOCKED_ [TO->MP] asset is locked<br>
            _UNLOCKED_ [TO->MP] asset is unlocked<br>
            `TO CONTROLLED (Process Identifier)`<br>
            _PREPARING_ [TO->MP] the leg is in preparation<br>
            _IN_USE_ [TO->MP] leg has started<br>
            _PAUSED_ [TO->MP] leg is paused<br>
            _RESUMED_ [TO->MP] leg is resumed<br>
            _FINISHING_ [TO->MP] leg is in finishing state<br> 
            _FINISHED_ [TO->MP] leg has ended<br>
          enum: [ VEHICLE_NOT_AVAILABLE, USER_NO_SHOW, ETA, MESSAGE_TO_DRIVER, MESSAGE_TO_END_USER, USER_OUT_OF_LIMITS, OTHER, LOCKED, UNLOCKED, PREPARING, IN_USE, PAUSED, RESUMED, FINISHING, FINISHED ]
          example: VEHICLE_NOT_AVAILABLE
        # ADD/REMOVE ANCILLARIES
        ancillary:
          $ref: "#/components/schemas/ancillary"
          description: use the URL in /discovery to find the details of the referenced ancillary definition in the externalDataSources [type=ANCILLARY]
        # TRAVELER MODIFICATION
        traveler:
          $ref: "#/components/schemas/individualTraveller"
        # CUSTOMER MODIFICATION
        customer:
          $ref: "#/components/schemas/customer"
        # FINANCIAL_TRANSACTION
        additionalCosts:
          $ref: "#/components/schemas/additionalCosts"

    ## trip execution
    availableAssetsResponse:
      type: array
      description: container to return assets, including their possible operations (assign asset). 
      externalDocs:
        url: https://not-yet-available/
        description: package AVAILABLE ASSETS DELIVERY, corresponding with the package AVAILABLE ASSETS REQUEST (= POST /packages/{id}/legs/{legId}/available-assets)
      maxItems: 100
      items:
        allOf:
          - $ref: "#/components/schemas/asset"
          - $ref: "#/components/schemas/halLinks"

    legDetailResponse:
      externalDocs:
        url: https://not-yet-available/
        description: LEG DETAIL DELIVERY (delivery of LEG DETAIL REQUEST & LEG OPERATION REQUEST)
      allOf:
        - $ref: "#/components/schemas/leg"
        - $ref: "#/components/schemas/halLinks"
          example:
            { "leg": { "rel": "GET", "href": "/packages/{id}/legs/{legId}", "templated": true, "type": "application/hal+json" }
            # only when legState = NOT_STARTED
            , "cancel": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/CANCEL", "templated": true, "type": "application/hal+json" }
            , "prepare": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/PREPARE", "templated": true, "type": "application/hal+json" }
            , "assign_asset": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/ASSIGN_ASSET", "templated": true, "type": "application/hal+json" }
            , "change_start_time": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/CHANGE_START_TIME", "templated": true, "type": "application/hal+json" }
            # only when legState = NOT_STARTED OR PREPARING
            , "add_ancillaries": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/ADD_ANCILLARY", "templated": true, "type": "application/hal+json" }
            , "remove_ancillaries": { "rel": "DELETE", "href": "/packages/{id}/legs/{legId}/REMOVE_ANCILLARY", "templated": true, "type": "application/hal+json" }
            , "set_in_use": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/SET_IN_USE", "templated": true, "type": "application/hal+json" }
            # only when legState = IN_USE
            , "change_end_time": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/CHANGE_END_TIME", "templated": true, "type": "application/hal+json" }
            , "pause": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/PAUSE", "templated": true, "type": "application/hal+json" }
            , "open_trunk": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/OPEN_TRUNK", "type": "application/hal+json" }
            , "start_finishing": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/START_FINISHING", "templated": true, "type": "application/hal+json" }
            , "finish": { "rel": "POST", "href": "/packages/{id}/legs/{legId}/FINISH", "templated": true, "type": "application/hal+json" }
            }

    ## support
    supportParameter:
      type: object
      description: required data for support ticket
      externalDocs:
        url: https://not-yet-available/
        description: SUPPORT REQUEST PARAMETER
      additionalProperties: true
      required:
      - supportType
      - location
      - timestamp
      properties:
        ticket:
          $ref: "#/components/schemas/supportTicketStatus"

    supportResponse:
      description: the current status of support
      externalDocs:
        url: https://not-yet-available/
        description: SUPPORT DELIVERY, corresponds with SUPPORT REQUEST
      properties:
        ticket: 
          $ref: "#/components/schemas/supportTicketStatus"

    supportDetailResponse:
      type: array
      description: containing log entries of the issue
      externalDocs:
        url: https://not-yet-available/
        description: SUPPORT DETAIL DELIVERY, corresponds with SUPPORT DETAIL REQUEST (= GET /packages/{id}/legs/{legId}/support)
      maxItems: 100
      items:
        $ref: "#/components/schemas/supportTicketStatus"

    ## interoperability
    discoveryResponse:
      type: object
      description: a complete endpoint description, containing all endpoints, their status, but also the served scenarios and implemented process flows. The identifiers for the process flows can be found at https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers<br>
      additionalProperties: false
      externalDocs:
        url: https://not-yet-available/
        description: Out of scope for Transmodel.
      required:
        - endpoints
      properties:
        endpoints:
          type: array
          maxItems: 25
          items:
            $ref: "#/components/schemas/endpoint"
        externalDataSources:
          type: array
          description: array of external datasources
          items:
            $ref: "#/components/schemas/externalDataSource"
        processIdentifiers:
          type: array
          description: an array with 'care labels', indiacting how this implementation wants to be treated.
          maxItems: 10
          externalDocs:
            url: https://github.com/TOMP-WG/TOMP-API/wiki/ProcessIdentifiers
            description: overview of all existing process identifiers, clarifying how this implementation of the API should be used.
          items:
            $ref: "#/components/schemas/processIdentifier"
          example: [ { "module": "PURCHASE", "identifiers": [ "ACCESS_CODE_AZTEC", "ACCESS_CODE_IN_COMMIT_EVENT" ] } ]
        conditions:
          type: array
          description: common conditions for this TO
          maxItems: 5
          items:
            $ref: "#/components/schemas/condition"

    ## after sales
    paymentResponse:
      externalDocs:
        url: https://not-yet-available/
        description: PAYMENT DETAIL DELIVERY, corresponding with PAYMENT DETAIL REQUEST (= GET /payments/?query)
      allOf:
      - type: array
        maxItems: 500
        items:
          $ref: "#/components/schemas/paymentDetail"
      - $ref: "#/components/schemas/halLinks"
        example:
            "_links": { "self": { "rel": "GET", "href": "/payments&offset=100&limit=100", "type": "application/hal+json" },
              "next": { "rel": "GET", "href": "/payments&offset=200&limit=100", "type": "application/hal+json" },
              "previous": { "rel": "GET", "href": "/payments&limit=100", "type": "application/hal+json" }
            }

  # package concepts
    leg:
      type: object
      description: A planned (segment of) a package using one asset
      required:
        - id
        - from
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2962.htm
        description: LEG
      properties:
        id:
          $ref: "#/components/schemas/uuid"
          description: The unique identifier (TO) of this leg. Must always the same as applied in the request URL. And when there are not additional legs in the offered or purchased package, the same **id** as the package id.
        from:
          $ref: "#/components/schemas/place"
          description: The departure location of this leg, using this asset type. Mandatory.
        to:
          $ref: "#/components/schemas/place"
          description: The destination of this leg, using this asset type.
        sequenceNumber:
          $ref: "#/components/schemas/shortInt"
          description: The order of the leg within the package. Mandatory, if there are multiple legs in the package. If there are parallel legs (eg. using parking lot and a renting a bike), it can be the same within one package.
        travelerReferences:
          type: array
          description: reference to the travelers field of the package request. Mandatory when multiple travelers are used.
          maxItems: 50
          items:
            $ref: "#/components/schemas/shortInt"
        startTime:
          $ref: "#/components/schemas/dateTime"
          description: The departure time of this leg. Or, in case of a parking, the start of the usage.
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2958.htm
            description: package PATTERN.StartTime
        endTime:
          $ref: "#/components/schemas/dateTime"
          description: The intended arrival time at the to place. Or, in case of a parking, the end of the usage.
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2958.htm
            description: package PATTERN.EndTime
        legState:
          $ref: "#/components/schemas/legState"
        fareStructure:
          $ref: "#/components/schemas/fareStructure"
          description: The leg-specific fare structure. The price can be calculated using all elements.
        price:
          $ref: "#/components/schemas/amountOfMoney"
          description: the final price of the leg / package
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2419.htm - (CUSTOMER PURCHASE PACKAGE PRICE) final price
        conditions:
          type: array
          description: specific conditions for this leg, overruling the common conditions
          maxItems: 5
          items:
            $ref: "#/components/schemas/condition"
        assetType:
          $ref: "#/components/schemas/assetTypeReference"
          description: The asset type used to execute this leg 
        asset:
          $ref: "#/components/schemas/asset"
          description: The concrete asset used for the execution of the leg
        operator:
          $ref: "#/components/schemas/operator"
        travelDocuments:
          type: array
          items:
            $ref: "#/components/schemas/travelDocument"
          description: The MaaS users proof of their right to travel on this leg (visual representable) OR
            data to open an asset
        memo:
          $ref: "#/components/schemas/longString"
        extraInfo:
          $ref: "#/components/schemas/customProperties"

    legAfterSalesOperation:
      type: string
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA4/EA2/EA4/EA1162.htm
        description: TYPE OF EVENT
      description: Operations:<br> 
        _CANCEL_ [MP<->TO] will cancel this LEG. Only allowed when multiple LEGs are included in the package, otherwise the complete package should be cancelled<br>
        _NOTIFY_ [MP<->TO] will send a notification to TO, driver, MP or TRAVELER(s)<br>
        _REPORT_PROGRESS_ [TO->MP] the TO reports the location to the MP<br>
        _FINANCIAL_TRANSATION_ [MP<->TO] request a (direct) financial transaction. If there is no contract telling otherwise, this money has to be transferred immediately.<br>
      enum: [
        # state operation requests
        CANCEL,
        NOTIFY, REPORT_PROGRESS,
        FINANCIAL_TRANSACTION
      ]

    legTripOperation:
      type: string
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA4/EA2/EA4/EA1162.htm
        description: TYPE OF EVENT
      description: Operations:<br> 
        _PREPARE_ [MP->TO, non-TO-controlled] - MP request the TO to prepare the LEG (e.g. open the locker) [ONBOARDING STEP, RESUMING STEP]<br>
        _PREPARE_ [MP<-TO, process identifier TO-controlled] - the TO can send a message telling the MP that he is preparing the LEG, e.g. the taxi is heading to the pickup point<br>
        _ASSIGN_ASSET_ [MP->TO] - can assign an ASSET to a LEG. Can be used to replace an ASSET, or as first step in the trip execution process [ONBOARDING STEP]<br>
          If assigning an ASSET is not allowed for this package 403 should be returned. If the package is unknown, 404 should be returned.<br>
        _SET_IN_USE_ [MP->TO, non-TO-controlled] - will activate the LEG or resume the LEG [ONBOARDING STEP, RESUMING STEP]<br>
        _SET_IN_USE_ [MP<-TO, process identifier TO-controlled] - the driver indicates the LEG is started<br>
        _CHANGE_END_TIME_ [MP->TO] will be used to request a changed end time; the TRAVELER wants to use the ASSET longer (or shorter), the **time** field contains the proposed end time, the end time of the package doesn't change<br>
        _CHANGE_START_TIME_ [MP->TO] will be used to request a changed start time, e.g. the TRAVELER wants to depart later, the **time** field contains the estimated start time, the start time of the package doesn't change<br>
        _PAUSE_ [MP->TO] will pause the LEG [PAUSING STEP]<br>
        _OPEN_TRUNK_ [MP->TO] request the TO to open up the trunk (of the scooter), e.g. to store the helmet [ONBOARDING STEP, OFFBOARDING STEP, PAUSING STEP, RESUMING STEP]<br>
        _START_FINISHING_ [MP->TO] will start the end-of-leg process [OFFBOARDING STEP]<br>
        _START_FINISHING_ [MP<-TO, process identifier TO-controlled] TO indicates that the LEG is almost finishing<br>
        _FINISH_ [MP->TO] will end this LEG [OFFBOARDING STEP]<br>
        _FINISH_ [MP<-TO, process identifier TO-controlled] the TO indicates that the LEG is finished, the destination has been reached.<br>
        _CANCEL_ [MP<->TO] will cancel this LEG. Only allowed when multiple LEGs are included in the package, otherwise the complete package should be cancelled<br>
        _NOTIFY_ [MP<->TO] will send a notification to TO, driver, MP or TRAVELER(s)<br>
        _REPORT_PROGRESS_ [TO->MP] the TO reports the location to the MP<br>
        _ADD_ANCILLARY_ [MP->TO] requests to add the specified ANCILLARY to the LEG<br>
        _REMOVE_ANCILLARY_ [MP->TO] requests to remove the specified ANCILLARY from the LEG<br>
        _CONFIRM_REPLACE_VEHICLE_ [MP<-TO] asks confirmation to replace the ASSET, returns a 202 when confirmed, otherwise it will return 400<br>
        _CONFIRM_START_LEG_ [MP<-TO] asks confirmation to start the LEG, returns a 202 when confirmed, otherwise it will return 400<br>
        _FINANCIAL_TRANSATION_ [MP<->TO] request a (direct) financial transaction. If there is no contract telling otherwise, this money has to be transferred immediately.<br>
        _SEND_EVIDENCE_PARKED_ [MP->TO] sends pictures (in url field) to prove that the ASSET is parked correctly<br>
        _SEND_EVIDENCE_HELMET_ [MP->TO] sends pictures (in url field) to prove that the helmet is stowed correctly<br>
        _SEND_EVIDENCE_CHARGER_ [MP->TO] sends pictures (in url field) to prove that the ASSET connected correctly to the charger<br>
      enum: [
        # state operation requests
        PREPARE, ASSIGN_ASSET, SET_IN_USE, PAUSE, START_FINISHING, FINISH, CANCEL,
        # asset operation requests
        OPEN_TRUNK,
        # end user request requests
        CHANGE_START_TIME, CHANGE_END_TIME, 
        # notify request
        NOTIFY, REPORT_PROGRESS,
        # ancillary operation requests
        ADD_ANCILLARY, REMOVE_ANCILLARY,
        # confirmation requests
        CONFIRM_REPLACE_VEHICLE, CONFIRM_START_LEG,
        # financial requests
        FINANCIAL_TRANSACTION,
        # evidence requests
        SEND_EVIDENCE_PARKED, SEND_EVIDENCE_HELMET, SEND_EVIDENCE_CHARGER
      ]      

    legPrePurchaseOperation:
      type: string
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA4/EA2/EA4/EA1162.htm
        description: TYPE OF EVENT
      description: Operations:<br> 
        _ASSIGN_ASSET_ [MP->TO] - can assign an ASSET to a LEG. Can be used to replace an ASSET, or as first step in the trip execution process [ONBOARDING STEP]<br>
          If assigning an ASSET is not allowed for this package 403 should be returned. If the package is unknown, 404 should be returned.<br>
        _CHANGE_END_TIME_ [MP->TO] will be used to request a changed end time; the TRAVELER wants to use the ASSET longer (or shorter), the **time** field contains the proposed end time, the end time of the package doesn't change<br>
        _CHANGE_START_TIME_ [MP->TO] will be used to request a changed start time, e.g. the TRAVELER wants to depart later, the **time** field contains the estimated start time, the start time of the package doesn't change<br>
        _CANCEL_ [MP<->TO] will cancel this LEG. Only allowed when multiple LEGs are included in the package, otherwise the complete package should be cancelled<br>
        _ADD_ANCILLARY_ [MP->TO] requests to add the specified ANCILLARY to the LEG<br>
        _REMOVE_ANCILLARY_ [MP->TO] requests to remove the specified ANCILLARY from the LEG<br>
      enum: [
        # state operation requests
        ASSIGN_ASSET, CANCEL,
        # end user request requests
        CHANGE_START_TIME, CHANGE_END_TIME, 
        # ancillary operation requests
        ADD_ANCILLARY, REMOVE_ANCILLARY
      ]

    legState:
      type: string
      description: status of a leg<br>
       _NOT_STARTED_ the leg is not started, initial state<br>
       _PREPARING_ the _PREPARE_ operation has been received<br>
       _IN_USE_ the travelers are on their way<br>
       _PAUSED_ the asset is paused<br>
       _FINISHING_ the _START_FINISHING_ operation has been received<br>
       _FINISHED_ the travelers have arrived at their destination<br>
       _ISSUE_REPORTED_ due to an issue, there is (temporarily) no progress to report, when the issue isn't solved, this is a final state<br>
       _CANCELLED_ the leg has been cancelled (so there must be other legs)
      enum: [ NOT_STARTED, PREPARING, IN_USE, PAUSED, FINISHING, FINISHED, ISSUE_REPORTED, CANCELLED ]

    legSummary:
      type: object
      description: this object describes the leg. It can contain f.x. a flight number, a used parking to get a discount, etc.
      additionalProperties: false
      required:
        - operator
        - legIdentifier
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA2/EA1/EA2962.htm
        description: LEG
      properties:
        operator:
          description: the operator of the leg (usually a Transport Operator reference)
          $ref: "#/components/schemas/uuid"
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA2/EA3552.htm
            description: TRANSPORT ORGANISATION
        legIdentifier:
          type: string
          description: the external ID, published by the operator.
        asset:
          $ref: "#/components/schemas/assetReference"
          description: the identification of the asset (id or visualegId), like a flight number. This field (in case of a specific asset) or assetType must be filled.
            whenever possible, details of this asset could be found using the URL in /discovery.externalDataSources [type=ASSET]
        assetType:
          $ref: "#/components/schemas/assetTypeReference"
          description: the used asset type for this leg.
            whenever possible, details of this asset could be found using the URL in /discovery.externalDataSources [type=ASSET_TYPE]
        product:
          $ref: "#/components/schemas/productReference"
          description: the used product for this leg.
        url:
          $ref: "#/components/schemas/url"
          description: the TOMP URL where the details of the previous leg can be found (if authorized), using a GET http method
          example: https://penr.nl/tomp/packages/57c652b3-1878-4a59-ba7b-b69ec1267124/legs/4aea3986-55be-48c6-a66a-09b14ebe2fb5

    logEntry:
      type: object
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA4/EA2/EA3/EA1149.htm
        description: LOG ENTRY
      required:
      - operation
      properties:
        operation:
          type: string
          description: "should be one of the operations specified in this API, including:
            - type: string
              description: additional operations, not directly related to the purchase or trip execution<br>
                _OFFER_ The offer has been published<br>
                _REQUEST_SUPPORT_ Issue reported <br>
                _SUPPORT_ISSUE_SOLVED_ Support issue is solved<br>
                _SUPPORT_ISSUE_REMOVED_ Support issue isn't solvable
              enum: [ 
                # planning
                OFFER,
                # support
                REQUEST_SUPPORT, SUPPORT_ISSUE_SOLVED, SUPPORT_ISSUE_REMOVED,
                ]"
        legId:
          $ref: "#/components/schemas/uuid"
          description: in case it is a leg operation, specify the legId
        detail:
          $ref: "#/components/schemas/operationParameter"

    operator:
      type: object
      description: The operator of a leg or asset, in case this is not the TO itself but should be shown to the user
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA2/EA3552.htm
        description: TRANSPORT ORGANISATION
      additionalProperties: false
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/shortString"
          description: Name of the operator, could match Content-Language
        operatorId:
          $ref: "#/components/schemas/shortString"
          description: the ID from the operator
        description:
          $ref: "#/components/schemas/longString"
          description: short description of the operator, should match Content-Language
        contact:
          $ref: "#/components/schemas/normalString"
          description: contact information, should match Content-Language

    place:
      type: object
      discriminator:
        propertyName: type
        mapping:
          postalAddress: "#/components/schemas/postalAddress"
          external: "#/components/schemas/externalDataSource"
          gps: "#/components/schemas/coordinates"
      required:
        - type
      properties:
        type:
          type: string
          enum: ["postalAddress", "external", "gps"]

    postalAddress:
      type: object
      description: address parts, where addressLine1 and 2 should contain the complete address, matches Content-Language
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA5/EA319.htm
        description: POSTAL ADDRESS
      required:
        - addressLine1
        - addressLine2
      properties:
        addressLine1:
          $ref: "#/components/schemas/longString"
          description: contains street, housenumber & additions
          example: example street 18, 2nd floor, 18-B33
        addressLine2:
          $ref: "#/components/schemas/longString"
          description: city or town, principal subdivision such as province, state or county
          example: Smallcity, Pinetree county
        street:
          $ref: "#/components/schemas/normalString"
          description: street, consistent with addressLine1
        houseNumber:
          $ref: "#/components/schemas/normalInt"
          description: house number, consistent with addressLine1
          minimum: 1
        houseNumberAddition:
          $ref: "#/components/schemas/tinyString"
          description: the additional part of the house number (f.x. 13bis, where 'bis' is the additional part), consistent with addressLine1
        postalCode:
          $ref: "#/components/schemas/shortString"
          description: the postal code, whenever available
        city:
          $ref: "#/components/schemas/shortString"
          description: specified city or town, consistent with addressLine2
        province:
          $ref: "#/components/schemas/shortString"
          description: province or region, consistent with addressLine2
        state:
          $ref: "#/components/schemas/shortString"
          description: state, consistent with addressLine2
        country:
          $ref: "#/components/schemas/country"
        addressAdditionalInfo:
          $ref: "#/components/schemas/longString"
          description: additional information to find the address (f.x. just around the corner)

    package:
      description: a purchased package is a registration of an agreement between end user and TO, to execute a package (=set of legs) according a specification, including all conditions
      #externalDocs:
        # https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA1/EA2242.htm (SALES OFFER PACKAGE)
        # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2417.htm (CUSTOMER PURCHASE PACKAGE)
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2413.htm
        description: TRAVEL SPECIFICATION
      allOf:
        - $ref: "#/components/schemas/leg"
        - type: object
          description: The package information describing the state and details of an agreed upon package
          properties:
            packagestate:
              $ref: "#/components/schemas/packageState"
            additionalLegs:
              type: array
              description: The additional legs of this package (a single package -> all properties are already in this object).
                All other legs should be in this collection, using the sequenceNumber to arrange them.
              maxItems: 25
              items:
                $ref: "#/components/schemas/leg"
            product:
              $ref: "#/components/schemas/productReference"
              description: this package does reflect a product. The `additionalLegs` field contains the executed legs using this product.

    prePurchaseOperation:
      type: string
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA3/EA1/EA3040.htm
        description: TYPE OF REQUEST (unspecified)
      description: allowed package operations<br>
        _CANCEL_ - [MP->TO] Cancels a purchased package, it returns a package in a _CANCEL_led state.<br> 
        _COMMIT_ - [MP->TO] Turns the purchased package in a _CONFIRMED_ state, the previous state should be _PENDING_. If the package is in state _CONFIRMED_, _CANCELLED_ or _EXPIRED_, a commit will result a 403. <BR> 
        _ADD_TRAVELLER_ - [MP->TO] request a change one of the travelers. Can be refused if contractual or financial changes are requested<br>
        _REMOVE_TRAVELLER_ - [MP->TO] request a change one of the travelers. Can be refused if contractual or financial changes are requested<br>
        _MODIFY_TRAVELLER_ - [MP->TO] request a change one of the travelers. Can be refused if contractual or financial changes are requested<br>
        _MODIFY_CUSTOMER_ - [MP->TO] request a change of the customer. Can be refused if contractual or financial changes are requested<br>
      enum: [ COMMIT, CANCEL, ADD_TRAVELLER, REMOVE_TRAVELLER, MODIFY_CUSTOMER ]

    afterSalesOperation:
      type: string
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA7/EA3/EA1/EA3040.htm
        description: TYPE OF REQUEST (unspecified)
      description: allowed package operations<br>
        _CANCEL_ - [MP->TO] Cancels a purchased package, it returns a package in a _CANCEL_led state. This is also known as a reimburse action<br> 
        _NOTIFY_ - [MP<->TO] Notification to MP, traveler or TO<br>
        _ADD_TRAVELLER_ - [MP->TO] request a change one of the travelers. Can be refused if contractual or financial changes are requested<br>
        _REMOVE_TRAVELLER_ - [MP->TO] request a change one of the travelers. Can be refused if contractual or financial changes are requested<br>
        _MODIFY_TRAVELLER_ - [MP->TO] request a change one of the travelers. Can be refused if contractual or financial changes are requested<br>
        _MODIFY_CUSTOMER_ - [MP->TO] request a change of the customer. Can be refused if contractual or financial changes are requested<br>
        _FINANCIAL_TRANSATION_ - [MP<->TO] request a (direct) financial transaction. If there is no contract telling otherwise, this money has to be transferred immediately.
      enum: [ CANCEL, NOTIFY, ADD_TRAVELLER, REMOVE_TRAVELLER, MODIFY_TRAVELLER, MODIFY_CUSTOMER, FINANCIAL_TRANSACTION ]

    packageState:
      type: string
      description: The life-cycle state of the package (from NEW to FINISHED)<br>
        _NEW_ the package is offered, including all conditions<br>
        _PRE-PURCHASED_ the package in the process of purchase, not yet finalized<br>
        _RELEASED_ for internal archiving. Another package option is purchased<br>
        _EXPIRED_ the MP didn't respond on time, the package offer has been expired<br>
        _CONFIRMED_ a finalized package ('purchased'). Both parties agreed to deliver services in return of payment<br>
        _CANCELLED_ the package is cancelled before it is executed. The agreement will specify whether there is a refund, or under which conditions<br>
        _STARTED_ the package is started, the <u>trip execution</u> module is needed now<br>
        _FINISHED_ the package has ended<br>
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2420.htm
        description: CUSTOMER PURCHASE STATUS
      enum: [ NEW, PENDING, REJECTED, RELEASED, EXPIRED, CONFIRMED, CANCELLED, STARTED, FINISHED ]
      example: CONFIRMED

  # terms & conditions
    cancellationCondition:
      description: conditions regarding cancellation of a purchased package
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2179.htm 
        description: (CANCELLING)
      type: object
      properties:
        cancellationAllowed:
          type: boolean
          description: is it possible to cancel this package?
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2177.htm
            description: PURCHASE WINDOW.cancellationAllowed
        cancellationFee:
          $ref: "#/components/schemas/amountOfMoney"
          description: amount of money you have to pay when you cancel this purchased package
        cancellationFeePercentage:
          $ref: "#/components/schemas/float"
          description: percentage of the offered price you have to pay when you cancel this purchased package  

    condition:
      type: object
      discriminator:
        propertyName: type
        mapping:
          requiredInteractionsCondition: "#/components/schemas/requiredInteractionsCondition"
          paymentConditions: "#/components/schemas/paymentConditions"
          cancellationCondition: "#/components/schemas/cancellationCondition"
          purchaseConditions: "#/components/schemas/purchaseConditions"
          packageExecutionConditions: "#/components/schemas/packageExecutionConditions"
          guarantees: "#/components/schemas/guarantees"
      required:
        - type
        - id
      properties:
        type:
          $ref: "#/components/schemas/shortString"
          description: The specific subclass of condition, should match the schema name exactly      
        id:
          $ref: "#/components/schemas/shortString"
          description: An identifier for this condition that can be used to refer to this condition
          example: deposit50eu

    guarantees:
      description: guarantees from the TO side.        
      type: object
      properties:
        guarantees:
          type: array
          maxItems: 10
          items:
            type: string
            description: _ARRIVAL_TIME_ - the TO guarantees that you will - under normal circumstances - will arrive at the destination of the leg
              _REPLACEMENT_WHEN_CONNECTION_MISSED_ - the TO will arrange an alternative for the missed connection
              _REFUND_WHEN_CONNECTION_MISSED_ - the TO will refund the missed connection
              _REFUND_UNUSED_ANCILLARIES_ - unused ancillaries will be refunded
              _REFUND_WHEN_CANCELLED_ - when cancelled, no costs will be charged when package not started.
            enum: [ ARRIVAL_TIME, REPLACEMENT_WHEN_CONNECTION_MISSED, REFUND_WHEN_CONNECTION_MISSED, REFUND_UNUSED_ANCILLARIES ]

    paymentConditions:
      description: conditions regarding payment<br>
        _DEPOSIT_ - in case the TO demands a deposit before usage. Requesting and refunding should be done using the /packages/{id}/leg/{id}/operations/FINANCIAL_TRANSATION endpoint. The requests are initiated by the TO (calling the MP)<br>
        _PAY_WHEN_FINISHED_ - in case the TO demands a direct payment after usage, automatically done by the MP<br>
        _UPFRONT_ - in case the TO demands a upfront payment before usage. The payment should be made in the purchase phase. Additional costs could be relevant, e.g. when using the _TIME_EXTEND_ operation is executed. 
          The MP must settle the payment before the package can be started (using SET_IN_USE).
      type: object
      required:
        - momentOfPayment
      properties:
        momentOfPayment:
          type: string
          enum: [ DEPOSIT, PAY_WHEN_FINISHED, UPFRONT ]
        deposit:
          $ref: "#/components/schemas/amountOfMoney"
          description: the amount of money to pay as a deposit.

    purchaseConditions:
      description: specify required information to complete a purchase
      type: object
      required:
        - requiredFields
      properties:
        maximumPeriodBeforeDeparture:
          $ref: "#/components/schemas/longInt"
          description: Maximum time in minutes that an asset can be reserved before a rental begins.
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA9/EA2177.htm
            description: PURCHASE WINDOW.MaximumPeriodBeforeDeparture
        requiredFields:
          type: array
          description: an array containing labels that identify specific fields that are required in the purchase process<br>
            all fields of the package purchase request can become required, navigating with dots, square brackets and field names.<br>
            A few examples<br>
              from.address.station implies that the station reference is mandatory,<br>
              travelers[*].age requires an age for each traveler, <br>
              or customer.email for the email address of the customer
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA6/EA2136.htm
            description: USER PROFILE
          maxItems: 50
          items:
            type: string

    requiredInteractionsCondition:
      description: required sequence of steps to take in a specified phase of the leg. Use this condition only when the steps are different as specified in the `POST /discovery` endpoint.
        When used in the `POST /discovery`, show the default set of interactions you require. When applied in the leg, you can overrule the default interactions.
      type: array
      maxItems: 50
      items:
        $ref: "#/components/schemas/interaction"

    packageExecutionConditions:
      description: conditions during the package
      type: object
      properties:
        codeOfConduct: 
          type: array
          description: code of conduct items during traveling<br>
            _NO_PETS_ - no pets are allowed in the asset<br>
            _NO_SMOKING_ - smoking is not allowed in the asset<br>
            _NO_TRAVEL_ABROAD_ - it is not allowed to enter another country with this asset<br>
            _NO_UNDERGROUND_PARKING_ - it is not allowed to park the asset underground
          maxItems: 5
          items:
            type: string
            enum: [ NO_PETS, NO_SMOKING, NO_TRAVEL_ABROAD, NO_UNDERGROUND_PARKING ]
        returnBefore:
          $ref: "#/components/schemas/dateTime"
          description: the ultimate return time.
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA5/EA2121.htm
            description: USAGE VAlegIdITY PERIOD.EndDate & EndTime
        returnStations:
          type: array
          description: to one of these stations the asset must be returned
          maxItems: 10
          items:
            $ref: "#/components/schemas/stationReference"             
        returnAreas:
          type: array
          description: in one of these areas the asset must be returned
          maxItems: 10
          items:
            $ref: "#/components/schemas/Polygon"
        returnZones:
          type: array
          description: in one of these externally described zones the asset must be returned
          maxItems: 10
          items:
            $ref: "#/components/schemas/zoneReference"
        requiredLicenseTypes:
          type: array
          description: ONE of these licenses is required to operate the asset
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA7/EA2152.htm
            description: ENTITLEMENT REQUIRED
          maxItems: 5
          items: 
            $ref: "#/components/schemas/licenseType"
        requiredAncillaries:
          type: array
          description: required ancillaries to operate the asset (like a helmet, TYPE=ANCILLARY)
          maxItems: 25
          items:
            $ref: "#/components/schemas/ancillaryReference" 
        maxBounds: 
          $ref: "#/components/schemas/geojsonGeometry"
          description: the maximum bounds of movement, can be an (multi)polygon (for bike sharing) or a line, a trajectory (for conventional public transport)
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA5/EA2119.htm
            description: ROUTING.CrossBorder possible, TOMP allowing more use cases.
        timeLimits:
          type: array
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA3/EA3/EA5/EA2121.htm
            description: USAGE VAlegIdITY PERIOD, except TM tells when it is allowed, TOMP tells when it is not allowed or when there is a reduction.
          items:
            $ref: "#/components/schemas/timeRestriction"

  # asset related concepts
    ancillary:
      allOf:
      - $ref: "#/components/schemas/requirement"
      description: requirement, type = ANCILLARY
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm 
        description: VEHICLE EQUIPMENT PROFILE when applied on a vehicle. Not covering!

    asset:
      description: the asset that can by applied to execute a leg.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3578.htm
        description: VEHICLE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA2/EA3719.htm (PARKING BAY)
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA3/EA1/EA3735.htm (CYCLE STORAGE EQUIPMENT)
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA5/EA3/EA2/EA3742.htm (VEHICLE CHARGING EQUIPMENT)
        # OR PASSENGER SPOT
      required:
        - assetType
        - mode
      properties:
        id:
          $ref: "#/components/schemas/shortString"
          description: Identifier of an asset. Preferably UUID.
        visualegId:
          $ref: "#/components/schemas/shortString"
          description: for instance, a license plate or seat number.
        assetType:
          $ref: "#/components/schemas/assetTypeReference"
          description: external ID of the asset type. Use the URL in the /discovery endpoint to find details of the asset type. 
            These external attributes can be duplicated in the 'extraInfo' object.
        mode:
          $ref: "#/components/schemas/mode"
        subMode:
          $ref: "#/components/schemas/normalString"
          description: a more precise classification of the asset, like 'cargo bike', 'public bus', 'coach bus', 'office bus', 'water taxi',  'segway'. 
            This is mandatory when using 'OTHER' as class.
        state:
          $ref: "#/components/schemas/assetState"
        location:
          $ref: "#/components/schemas/place"
        eco:
          $ref: "#/components/schemas/ecoValues"
        cargo:
          $ref: "#/components/schemas/cargoLimits"
        appSupport:
          $ref: "#/components/schemas/appSupport"
        equipment:
          type: array
          description: (optional) equipment belonging to the asset, like a child seat (TYPE=ASSET_EQUIPMENT)
          maxItems: 100
          items:
            $ref: "#/components/schemas/assetEquipment"
        externalAssetReference:
          $ref: "#/components/schemas/assetReference"
          description: external ID of the asset. Use the URL in the /discovery endpoint to find additional details of the asset. 
            Attributes can be duplicated in the 'extraInfo' object.
        extraInfo:
          $ref: "#/components/schemas/customProperties"

    assetEquipment:
      allOf:
      - $ref: "#/components/schemas/requirement"
      description: requirement, type = ASSET_EQUIPMENT
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm 
        description: VEHICLE EQUIPMENT PROFILE when applied on a vehicle

    assetState:
      type: object
      description: the state of the asset, where is it, the damages, etc
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      properties:
        mileage:
          $ref: "#/components/schemas/float"
          description: the current mileage of the asset, in km
        stateOfCharge:
          $ref: "#/components/schemas/shortInt"
          description: percentage of charge available
        maxRange:
          $ref: "#/components/schemas/float"
          description: maximum range in meters
        damages:
          type: array
          description: List of known asset damages.
          maxItems: 100
          items: 
            $ref: "#/components/schemas/damage"

    cargoLimits:
      type: object
      description: applicable properties to specify cargo space/loads
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      properties:
        description:
          $ref: "#/components/schemas/longString"
          description: describes options to carry cargo, should match Content-Language
        volume:
          $ref: "#/components/schemas/normalInt"
          description: the volume in liters of the cargo
        weight:
          $ref: "#/components/schemas/normalInt"
          description: the weight in kilograms of the cargo

    damage:
      type: object
      description: A damage of the asset.
      additionalProperties: false
      required:
        - assetComponent
        - description
      properties:
        assetComponent:
          type: string
          description: Part/Component of the asset affected. If OTHER is specified the description needs to provide more detail as to what part/component is affected.<br>
          enum: [ FRONT, REAR, LEFT, RIGHT, TOP, BOTTOM, INTERIOR, TIRE, ANCILLARY, OTHER ]
        description:
          $ref: "#/components/schemas/longString"
          description: Description of the damage.
        pictures:
          type: array
          description: URL where pictures of the damage can be accessed. Any special characters in the URL must be correctly escaped.
          maxItems: 10
          items:
            $ref: "#/components/schemas/url"

    ecoValues:
      type: object
      description: applicable properties to specify ecological/environmental aspects. Derived from GBFS.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm
        description: VEHICLE EQUIPMENT PROFILE
        # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA6/EA3603.htm (EQUIPMENT)
      properties:
        energyLabel:
          type: string
          description: Energy efficiency label
          enum: [ A, B, C, D, E ]
        ecoLabel:
          type: array
          description: see https://github.com/MobilityData/gbfs/blob/v2.3/gbfs.md
          maxItems: 3
          items: 
            type: object
            properties:
              ecoSticker:
                type: string
              countryCode:
                $ref: "#/components/schemas/country"
        co2Emission:
          $ref: "#/components/schemas/float"
          description: the emission of grammes CO2 per km

    mode:
      type: string
      description: These classes are taken from the NeTeX standard, but ALL and UNKNOWN are removed. On the other hand OTHER and PARKING are added.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA1/EA284.htm
        description: MODE
      enum: [ 
        AIR,
        BUS,
        TROLLEYBUS,
        TRAM,
        COACH,
        RAIL,
        INTERCITYRAIL,
        URBANRAIL,
        METRO,
        WATER,
        CABLEWAY,
        FUNICULAR,
        TAXI,
        SELFDRIVE,
        FOOT,
        BICYCLE,
        MOTORCYCLE,
        CAR,
        SHUTTLE,
        OTHER,
        PARKING,
        MOPED,
        STEP,
        FERRY
      ]

  # traveler / customer concepts
    card:
      allOf:
        - $ref: "#/components/schemas/cardType"
        - type: object
          description: Any kind of card that isn't a license, only provide the cards that are required
          externalDocs:
            url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA3/EA2368.htm
            description: CUSTOMER PAYMENT MEANS
            # MISSING: Identification/Passport
            # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA4/EA2300.htm (MEDIUM ACCESS DEVICE)
          required:
            - number
            - endValegIdity
          properties:
            number:
              $ref: "#/components/schemas/shortString"
              description: number of the card, like ID number, credit card or bank account number
            description:
              $ref: "#/components/schemas/shortString"
              description: description of the card
            additionalNumber:
              $ref: "#/components/schemas/shortString"
              description: additional number, like CVC code or IBAN code
            endValegIdity:
              $ref: "#/components/schemas/date"
              description: this card is valegId until this date
            country:
              $ref: "#/components/schemas/country"

    cardType:
      type: object
      description: A generic description of a CARD
      additionalProperties: true
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA7/EA3626.htm
        description: TYPE OF PAYMENT METHOD
        # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA4/EA2300.htm (MEDIUM ACCESS DEVICE)
        #      https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA4/EA2302.htm (EMV CARD)
      required:
        - type
      properties:
        type:
          type: string
          description: The broad category of card<br>
            DISCOUNT - discount card, can be applied in the purchase process to get rebate<br>
            TRAVEL - (external) travel card, possibly paid for in other context, but also monthly, weekly or day-cards<br>
            BANK - bank card<br>
            CREDIT - credit card<br>
            ID - identification card, like an ID card<br>
            PASSPORT - passport to identify yourself<br>
            OTHER - unspecified
          enum: [ DISCOUNT, TRAVEL, BANK, CREDIT, ID, PASSPORT, OTHER ]
        subType:
          $ref: "#/components/schemas/shortString"
          description: For use in case of OTHER. Can be used in bilateral agreements.
        relatedProduct:
          $ref: "#/components/schemas/productReference"
        transportOrganisations:
          type: array
          maxItems: 3
          description: references to accepting parties, only if applicable
          items:
            $ref: "#/components/schemas/shortString"
            format: operator-id

    customer:
      description: A MaaS user that wishes to purchase a package, only use the fields required by purchase conditions
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA1/EA2333.htm
        description: TRANSPORT CUSTOMER
        # OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA1/EA2335.htm (CUSTOMER ACCOUNT)
      allOf:
        - $ref: "#/components/schemas/individualTraveller"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/shortString"
              description: The identifier the MP uses to identify the customer
              example: "A0-123456"
            initials:
              $ref: "#/components/schemas/tinyString"
              description: Initials of the customer
            firstName:
              $ref: "#/components/schemas/shortString"
              description: First name of the customer
              example: John
            lastName:
              $ref: "#/components/schemas/shortString"
              description: Last name of the customer
              example: Doe
            middleName:
              $ref: "#/components/schemas/tinyString"
              description: Middle name of the customer
              example: von
            prefix:
              $ref: "#/components/schemas/tinyString"
              description: prefix of the customer, like titles
            postfix:
              $ref: "#/components/schemas/tinyString"
              description: postfix of the customer, like titles
            phones:
              type: array
              maxItems: 3
              items:
                $ref: "#/components/schemas/phone"
            email:
              $ref: "#/components/schemas/normalString"
              description: the email address of the customer
            dateOfBirth:
              $ref: "#/components/schemas/date"
            placeOfBirth:
              $ref: "#/components/schemas/shortString"
            countryOfBirth:
              $ref: "#/components/schemas/shortString"
            address:
              $ref: "#/components/schemas/postalAddress"
            photo:
              $ref: "#/components/schemas/longString"
              description: base64 encoded
              format: byte-array
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    disability:
      allOf:
      - $ref: "#/components/schemas/requirement"
      description: requirement, type = DISABILITY
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA8/EA249.htm 
        description: MOBILITY NEED
        # OR https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA8/EA251.htm (PSYCHOSENSORY NEED)
        # OR https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA8/EA248.htm (MEDICAL NEED)  

    license:
      allOf:
      - $ref: "#/components/schemas/licenseType"
      - type: object
        description: driver or usage license for a specific user. Contains the number and the assetType you're allowed to operate (e.g. driver license for CAR)
        properties:
          number:
            $ref: "#/components/schemas/shortString"
            example: "1287948792"
          endValegIdity:
            $ref: "#/components/schemas/date"

    licenseType:
      type: object
      description: A category of license to use a certain asset class
      additionalProperties: true
      required:
        - mode
      properties:
        modes:
          type: array
          items:
            $ref: "#/components/schemas/mode"
        licenseCode:
          $ref: "#/components/schemas/shortString"
          description: in most countries a driver license has also a code. As TO you can exactly verify, based on this code if the license allows to operate it's assets, if the assetType too generic.
          example: D4
        issuingCountry:
          $ref: "#/components/schemas/country"

    phone:
      type: object
      additionalProperties: false
      required:
        - number
      properties:
        preferred:
          type: boolean
          description: only one phone in this array can have a true in this property
        number:
          $ref: "#/components/schemas/shortString"
          description: phone number. In case of international usage, always provide the country code.
          pattern: '^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.0-9]*$'
          example: +31-48934758 or +(0075)-834923384 or 020 1234 1234
        kind:
          type: string
          enum: [ LANDLINE, MOBILE ]
        type:
          type: string
          enum: [ PRIVATE, BUSINESS, OTHER ]

    individualTraveller:
      allOf: 
      - $ref: "#/components/schemas/userProfile"
      - type: object
        description: A generic description of a traveler, not including any identifying information
        externalDocs:
          url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA6/EA3/EA2/EA1/EA1/EA3977.htm
          description: INDIVIDUAL TRAVELLER
        additionalProperties: true
        properties:
          isValidated:
            type: boolean
            description: Whether this traveler's identity and properties have been verified by the MaaS provider
          age:
            $ref: "#/components/schemas/shortInt"
            description: Age of the traveler, may be approximate
          id:
            $ref: "#/components/schemas/shortString"
            description: reference ID of the traveller (TO side, unique within an offer/package). This ID could be used to refer to in the planning result.
          fullName:
            $ref: "#/components/schemas/normalString"
            description: the name of the traveller, can be used to validate against ID cards

    travelerEquipment:
      allOf:
      - $ref: "#/components/schemas/requirement"
      description: requirement, type = TRAVELER_EQUIPMENT
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA8/EA247.htm 
        description: ENCUMBRANCE NEED

  # support concepts
    supportTicket:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/uuid"
          description: ticketID, to be provided when created. Mandatory when status != REQUESTED
        status:
          $ref: "#/components/schemas/supportTicketStatus"
        supportType:
          type: string
          description: these are the currently enlisted support requests<br>
            _BROKEN_DOWN_ The asset doesn't work anymore<br> 
            _NOT_AT_LOCATION_ The asset isn't available at the specified time/location<br>
            _MISSING_AFTER_PAUSE_ The asset is missing (stolen?)<br>
            _NOT_CLEAN_ The asset is not clean<br>
            _NOT_AVAILABLE_ The asset is at the location, but unreachable<br>
            _UNABLE_TO_OPEN_ The asset cannot be unlocked (malfunctioning)<br>
            _UNABLE_TO_CLOSE_ The asset cannot be closed (malfunctioning)<br>
            _API_TECHNICAL_ A part of the API doesn't work<br>
            _API_FUNCTIONAL_ A part of the API doesn't work as expected<br>
            _ACCIDENT_ Accident occurred<br>
            _OTHER_ unspecified<br>
            _REPORT_DAMAGE_ Oeps. Photo sent with slight damage
          enum: [
            BROKEN_DOWN, 
            NOT_AT_LOCATION, 
            MISSING_AFTER_PAUSE, 
            NOT_CLEAN, 
            NOT_AVAILABLE, 
            UNABLE_TO_OPEN, 
            UNABLE_TO_CLOSE, 
            API_TECHNICAL, 
            API_FUNCTIONAL, 
            ACCIDENT, 
            OTHER, 
            REPORT_DAMAGE
          ]
        location:
          $ref: '#/components/schemas/place'
        timestamp:
          $ref: "#/components/schemas/dateTime"
          description: the reporting timestamp of the support request
        priority:
          type: string
          description: the priority of the support request.
          enum: [ ERROR_CANNOT_CONTINUE, ERROR_CAN_CONTINUE, DISTURBING_ISSUE, QUESTION, OTHER ]
        contactInformationEndUser:
          $ref: "#/components/schemas/normalString"
          description: contact information of the end user in case of direct response requests, like phone number
        comment:
          $ref: "#/components/schemas/longString"
        urls:
          type: array
          description: urls to clarify the support request e.g. pictures showing damage
          maxItems: 10
          items:
            $ref: "#/components/schemas/url"          
        requestedResponseTime:
          $ref: "#/components/schemas/shortInt"
          description: time to respond in minutes.
        timeToResolution:
          $ref: "#/components/schemas/shortInt"
          description: time in minutes to the expected resolution of support request
          example: 9
        sequence:
          $ref: "#/components/schemas/tinyInt"
          description: the sequence number of the status of tickets on this issue

    supportTicketStatus:
      type: string
      description:
        _ISSUE_REQUESTED_ the ticket is new, to be processed by the TO<br>
        _ISSUE_OPEN_ the ticket is open, we're on our way<br>
        _ISSUE_UPDATE_REQUESTED_ we're waiting on a response of the traveler(s)<br>
        _ISSUE_RESOLVED_ Issue succesfully closed<br>
        _ISSUE_REVOKED_ Issue revoked<br>
      enum: [ ISSUE_REQUESTED, ISSUE_OPEN, ISSUE_UPDATE_REQUESTED, ISSUE_RESOLVED, ISSUE_REVOKED ]
      example: ISSUE_OPEN

  # fares & payment concepts
    additionalCosts:
      description: Costs that the TO is charging the MP; credits are negative. Other amounts should be positive
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          required:
            - category
            - description
          properties:
            category:
              $ref: "#/components/schemas/paymentCategory"
            description:
              $ref: "#/components/schemas/longString"
              description: free text to describe the extra costs. Mandatory in case of 'OTHER', matches Content-Language
            amountOfUnits:
              $ref: "#/components/schemas/float"
              description: e.g. number of litres, number of kilowatthour, etc
            units:
              type: string
              enum: [ LITER, KILOWATTHOUR, CO2_COMPENSATION, OTHER ]
            account:
              $ref: "#/components/schemas/bankAccount"
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    bankAccount:
      type: object
      description: bank account
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/shortString"
          description: account name
        number:
          $ref: "#/components/schemas/shortString"
          description: account number
        country:
          $ref: "#/components/schemas/country"
        bankIdentification:
          $ref: "#/components/schemas/shortString"
          description: bank identification, like BIC code

    fareStructure:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA6/EA1889.htm
        description: TARIFF
      allOf:
      - $ref: "#/components/schemas/amountOfMoney"
      - type: object
        description: the total fare is the sum of all parts, except for the 'MAX' fareStructureElement. This one descripes the maximum price for the complete leg.
        additionalProperties: true
        required:
          - estimated
          - elements
        properties:
          estimated:
            type: boolean
            description: is this fare an estimation?
          description:
            $ref: "#/components/schemas/normalString"
            description: user friendly description of the fare (e.g. 'full fare'), should match Content-Language
          elements:
            type: array
            maxItems: 25
            items:
              $ref: "#/components/schemas/fareStructureElement"

    fareStructureElement:
      description: this describes a part of the fare (or discount). It contains a for instance the startup costs (fixed) 
       or the flex part (e.g. 1.25 EUR per 2.0 MILES). The amount is tax included. In case of discounts, the values are 
       negative. With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts. 
       The `scale` properties create the ability to communicate scales (e.g. the first 4 kilometers you've to pay 
       EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer).
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA4/EA1844.htm
        description: "TIME INTERVAL PRICE - type: FLEX scaled: yes unit: time-based
          OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA4/EA1847.htm (TIME UNIT PRICE)  - type: FIXED unit: time-based
          OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA2/EA1805.htm (GEOGRAPHICAL UNIT PRICE) - type: FIXED unit: distance-based
          OR https://www.transmodel-cen.eu/model/EARoot/EA6/EA2/EA2/EA2/EA1802.htm (GEOGRAPHICAL INTERVAL PRICE) - type: FLEX scaled: yes unit: distance-based"
      allOf:
        - $ref: "#/components/schemas/amountOfMoney"
        - type: object
          required:
            - amount
          properties:
            type:
              type: string
              description: type of fare structure element. If there is only one fare structure elements and this field is missing, it should
                be assumed it is 'FIXED'. In all other situations this field is mandatory.<br>
                _FIXED_ fixed element, independend on the duration or distance traveled.
                _FLEX_ flex element, dependend on the duration or distance of the package. Can be tiered.
                _MAX_ capping mechanism. Calculate the price using the sum of the FIXED and FLEX elements, cap it using this rule. Max 1 per fare structure.
              enum: [ FIXED, FLEX, MAX ]
            priceLevel:
              type: string
              description: is this the default price or is this an additional part (discount, price surge). <br>
               _DEFAULT_ the default price for this price part<br>
               _DISCOUNT_ the amount must always be negative <br>
               _SURGE_ the amount must always be positive <br>
               This also means, that when you're working with discounts or surges, you have to deliver 2 fare structure elements, one for the default price and one for the discount/surge. This can be used in combination with as
               well the fixed price parts as with the flex price parts.
              enum: [ DEFAULT, DISCOUNT, SURGE ]
            units:
              type: string
              description: in case of 'FLEX' mandatory, otherwise not allowed. E.g. 0.5 EUR per HOUR
              enum: [ KM, SECOND, MINUTE, HOUR, MILE, PERCENTAGE ]
            amountOfUnits:
              $ref: "#/components/schemas/float"
              description: the number of km, seconds etc. Mandatory when the type is 'FLEX', otherwise
                not allowed. In case of 0.5 EUR per 15 MINUTES, the amount is 0.5, the `amountOfUnits` must contain 15 and `units` MINUTES.
            interval:
              $ref: "#/components/schemas/interval"
            valegIdity: 
              $ref: "#/components/schemas/timeWindow"
            name:
              $ref: "#/components/schemas/normalString"
              description: an optional description of this fare structure element.
            class:
              type: string
              description: class of this fare structure element. Could be FARE or ANCILLARY<br>
               _FARE_ this fare structure element is related to the distance or time of usage.<br>
               _ANCILLARY_ this fare structure element is related to the rental of one or more ancillaries.
              default: "FARE"
              enum: [ FARE, ANCILLARY ]
            minimumAmount:
              $ref: "#/components/schemas/float"
              description: The minimum price, in the same currency as amount. Place in `amount` the most likely value.
              example: 9.00
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            maximumAmount:
              $ref: "#/components/schemas/float"
              description: The minimum price, in the same currency as amount. Place in `amount` the most likely value.
              example: 11.00
              externalDocs:
                url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA1/EA1664.htm
            assetState:
              type: string
              description: in case the fare is dependent on being in use or being paused, this field must be used. Default IN_USE
              enum: [ IN_USE, PAUSED ]
              default: IN_USE
            extraInfo:
              $ref: "#/components/schemas/customProperties"

    interval:
      type: object
      properties:
        from:
          $ref: "#/components/schemas/float"
          description: in case of scaling, this is the bottom value (f.x. in the first hour 3 CAD, the `interval.from` should
            contain 0 and the `interval.units` HOUR). When `to` is used, but this field is missing, it should be assumed
            it is a 0.
        to:
          $ref: "#/components/schemas/float"
          description: the upper value of the scale (f.x. 3 CAD in the first hour, this field should contain 1, 
            `interval.from` 0 and `interval.units` HOUR)
        units:
          type: string
          description: the units is normally the same as the **interval.units**, but it doesn't have to be. For instance, you could pay 1 EUR per kilometer for the first hour.
          enum: [ KM, MILE, HOUR, MINUTE ]

    paymentCategory:
      type: string
      description: The category of the journalled item <br>
        _ALL_ - for filtering purposes only<br>
        _DAMAGE_ - extra costs that must be paid by the MP due to damage to the asset or ancillaries<br>
        _LOSS_ - extra costs that must be paid by the MP due to loss of asset or ancillaries<br>
        _STOLEN_ - the asset (and ancillaries) are stolen and should be paid for<br>
        _EXTRA_USAGE_ - the asset is paid for in advance, additional usage must be paid for (can also be a refund when used less! The amount should be negative in that case)<br>
        _REFUND_ - refund of the deposit<br>
        _FINE_ - a fine that arrived later on<br>
        _OTHER_ASSET_USED_ - additional costs for a replaced asset<br>
        _CREDIT_ - generic CREDIT <br>
        _VOUCHER_ - part of the fare that is covered by a voucher (no need to pay)<br>
        _DEPOSIT_ - a deposit, to be refunded using _REFUND_<br>
        _OTHER_ - unspecified<br>
        _FARE_ - the normal costs of the purchased and executed leg(s)<br>
      enum: [ ALL, DAMAGE, LOSS, STOLEN, EXTRA_USAGE, REFUND, FINE, OTHER_ASSET_USED, CREDIT, VOUCHER, DEPOSIT, OTHER, FARE ]

    paymentDetail:
      allOf:
      - $ref: "#/components/schemas/fareStructure"
      - type: object
        description: each leg will result in at least one journal entry, containing a small summary of the leg (distance, duration).
          The **amount** must be derivable from the fare structure **elements** and **additionalCosts**.
        additionalProperties: true
        properties:
          id:
            $ref: "#/components/schemas/uuid"
            description: id of the JOURNAL ENTRY, the LEG id should be used
          category:
            $ref: "#/components/schemas/paymentCategory"
          sequenceId:
            $ref: "#/components/schemas/tinyInt"
            description: sequence id of the JOURNAL ENTRY, in combination with **id** unique from TO perspective.
          invoiceId:
            $ref: "#/components/schemas/shortString"
            description: the number of the invoice. Should be filled in when invoiced (**state**=_INVOICED_).
          invoiceDate:
            $ref: "#/components/schemas/dateTime"
          state:
            $ref: "#/components/schemas/paymentState"
          expirationDate:
            $ref: "#/components/schemas/dateTime"
          comment:
            $ref: "#/components/schemas/longString"
          distance:
            $ref: "#/components/schemas/float"
            description: the travelled distance, in km. Only if applicable.
          distanceUnits:
            type: string
            enum: [ KM, MILE ]
          duration:
            $ref: "#/components/schemas/longInt"
            description: the time in seconds that the assed is used. Only if applicable.
          rentalStartMileage:
            $ref: "#/components/schemas/longInt"
            description: the mileage at the start of the rental. **duration** field is also applicable here
          vatNumber:
            $ref: "#/components/schemas/shortString"
            description: VAT identification number.
          bankAccount:
            $ref: "#/components/schemas/bankAccount"
            description: this account will be used
          extraInfo:
              $ref: "#/components/schemas/customProperties"

    paymentState:
      type: string
      description: the state of the payment detail
      enum: [ TO_INVOICE, INVOICING, INVOICED ]

  # app concepts
    appSupport:
      type: object
      description: attributes to display/use in an external app.
      properties:
        displayName:
          $ref: "#/components/schemas/shortString"
          description: displayable name for this asset
        description:
          $ref: "#/components/schemas/longString"
          description: the description of the asset
        image:
          $ref: "#/components/schemas/url"
          description: Link to an image of the asset
          example: "https://files.fietsersbond.nl/app/uploads/2014/10/30151126/ST2_Men_Side_CityKit-Stromer.jpg"
        icon:
          $ref: "#/components/schemas/url"
          description: Link to an icon of the asset
        accessMethods:
          type: array
          items:
            $ref: "#/components/schemas/typeOfTravelDocument"
          description: how this asset can be opened

    binaryAccessInfo:
      description: Binary information, like a image or certificate
      allOf:
      - $ref: "#/components/schemas/travelDocument"
      - type: object
        required:
          - base64
        properties:
          base64: 
            $ref: "#/components/schemas/longString"
            description: base 64 QR code
          version: 
            $ref: "#/components/schemas/tinyString"

    deeplink:
      description: deeplink info
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT (?)
      allOf:
      - $ref: "#/components/schemas/travelDocument"
      - type: object
        properties:
          url:
            description: the base deeplink url for the MP app. Can be extended by
              the 'knownParamaters'. Including the scheme.
            example: mp1.app://something/?auth=sdfkjhrkjsdf003df38=dfsdf
            $ref: "#/components/schemas/url"
          knownParameters:
            type: array
            maxItems: 25
            items:
              $ref: "#/components/schemas/shortString"
            example: [ "return-url"
                    , "error-url"
                    , "error-code"
                    , "error-description"
                    ]

    digitalTicket:
      description: Arbitrary data the TO may pass along the ticket to the client
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT
      allOf:
      - $ref: "#/components/schemas/travelDocument"
      - type: object
        properties:
          url:
            $ref: "#/components/schemas/url"
            description: download url for html/pdf

    eKey:
      description: Axa EKey information
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT (?)
      allOf:
      - $ref: "#/components/schemas/travelDocument"
      - type: object
        required:
          - ekey
          - lock
        properties:
          ekey: 
            type: object
            additionalProperties: false
            properties:
              key: 
                $ref: "#/components/schemas/longString"
                description: certificate
              passkey:
                $ref: "#/components/schemas/longString"
                description: one time pass key
          lock:
            type: object
            additionalProperties: false
            properties:
              bdAddress:
                $ref: "#/components/schemas/longString"
                description: physical address 
              deviceName:
                $ref: "#/components/schemas/normalString"
                description: how it advertises itself

    interaction:
      type: object
      required:
        - phase
        - sequenceNumber
        - action
      properties:
        phase: 
          type: string
          enum: [ PLANNING, PURCHASE, ONBOARDING, OFFBOARDING, RESUMING, PAUSING ]
        sequenceNumber:
          $ref: "#/components/schemas/tinyInt"
          description: the order number of this step in a phase. Starts with 0
        action:
          type: string
          description: "allowed actions:<br>
            <h3>Planning</h3>
            _RESULT_SHOWN_ action requires the MP to display some information to the customer when it is viewing the proposed legs.
            <h3>Purchase</h3>
            _PENDING_ show whenever the package is in PENDING state (not confirmed)<br>
            _WAITING_ indicate that the TO is processing the purchase, optionally after an extension of the expiry time<br>
            _WAITING_FOR_PAYMENT_ indicate that the payment hasn't been settled, after an extension of the expiry time with reason payment<br>
            _CANCELLED_ show whenever the purchased package is cancelled<br>
            _EXPIRED_ show whenever the offered package is expired (the expiry time has passed)<br>
            <h3>Onboarding</h3>
            _SEND_PREPARE_ - indicate the leg is going to start <br>
            _UNLOCK_LOCKER_ - user action - optionally triggered by the PREPARE operation<br> 
            _DISCONNECT_CHARGER_ - requested user action <br> 
            _SHOW_DAMAGES_ - show known damages to end user <br> 
            _UNLOCK_ASSET_ - requested user action or triggered by SET_IN_USE operation <br> 
            _START_ASSET_ - requested user action <br> 
            _SEND_OPEN_TRUNK_ - request TO to open trunk/helmet case remotely<br> 
            _UNLOCK_TRUNK_ - requested user action <br> 
            _TAKE_HELMET_ - requested user action <br> 
            _SEND_SET_IN_USE_ - request to start leg <br> 
            _SEND_ASSIGN_ASSET_ - request to assign the specified asset to the leg <br> 
            _LOCK_LOCKER_ - requested user action <br>
            <h3>Pausing</h3>
            _SEND_PAUSE_ - send leg operations PAUSE to inform the TO<br>
            _PARK_ASSIST_ - user action, the end user can be informed how and where to park<br>
            _LOCK_ASSET_ - user action, can be triggered by the PAUSE operations<br>
            _SEND_OPEN_TRUNK_ - request TO to open the trunk remotely<br>
            _UNLOCK_TRUNK_ - user action<br>
            _STOW_HELMET_ - user action<br>
            _LOCK_TRUNK_ - user action<br>
            <h3>Resuming</h3>
            _UNLOCK_ASSET_ - user action, could be triggered by SET_IN_USE operations<br>
            _SEND_OPEN_TRUNK_ - request TO to open trunk remotely<br>
            _UNLOCK_TRUNK_ - user action<br>
            _TAKE_HELMET_ - user action<br>
            _LOCK_TRUNK_ - user action<br>
            _START_ASSET_ - user action<br>
            _SEND_SET_IN_USE_ - the TO wants to be informed that the leg is resumed. Optionally triggers the unlock of the asset
            <h3>Offboarding</h3>
            _SEND_START_FINISHING_ - the TO needs to be informed the leg is about to finish<br>
            _PARK_ASSIST_ - user action to park (stop) using the asset<br>
            _UNLOCK_LOCKER_ - user action, could be triggered by the START_FINISH operation<br>
            _CONNECT_CHARGER_ - user action<br>
            _LOCK_ASSET_ - user action, could be triggered by the FINISH operation<br>
            _SEND_OPEN_TRUNK_ - the TO opens the trunk remotely <br>
            _UNLOCK_TRUNK_ - user action <br>
            _STOW_HELMET_ - user action <br>
            _LOCK_TRUNK_ - user action <br>
            _LOCK_LOCKER_ - user action <br>
            _SEND_FINISH_ - the TO wants to be informed about the end of the leg<br>
            _SEND_EVIDENCE_PARKED_ - the TO requires parking evidence<br>
            _SEND_EVIDENCE_HELMET_ - the TO requires evidence of storing the helmet<br>
            _SEND_EVIDENCE_CHARGER_ - the TO requires evidence of correct usage of the charger"
          enum: [
            RESULT_SHOWN, # planning, actor: MP, show INFO
            PENDING, WAITING, WAITING_FOR_PAYMENT, CONFIRMED, CANCELLED, EXPIRED, # purchase, actor: MP, show INFO 
            SEND_PREPARE, SEND_OPEN_TRUNK, SEND_SET_IN_USE, SEND_ASSIGN_ASSET, # operations, actor: MP, call operations endpoint & show INFO
            UNLOCK_LOCKER, LOCK_LOCKER, # locker, actor: MP, show INSTRUCTIONS & end user, follow INSTRUCTIONS shown
            CONNECT_CHARGER, DISCONNECT_CHARGER, # charger, actor: MP, show INSTRUCTIONS & end user, follow INSTRUCTIONS shown
            SHOW_DAMAGES, # actor: MP, show INFO damages
            UNLOCK_ASSET, START_ASSET, LOCK_ASSET, # asset, actor: MP, show INSTRUCTIONS & end user, follow INSTRUCTIONS shown
            UNLOCK_TRUNK, LOCK_TRUNK, # trunk, actor: MP, show INSTRUCTIONS & end user, follow INSTRUCTIONS shown
            TAKE_HELMET, STOW_HELMET, # helmet, actor: MP, show INSTRUCTIONS & end user, follow INSTRUCTIONS shown
            SEND_PAUSE, # pausing, actor: MP, calls operation endpoint & show INFO
            PARK_ASSIST, # parking, actor: MP, show INSTRUCTIONS & end user, follow INSTRUCTIONS shown
            SEND_START_FINISHING, SEND_FINISH, # offboarding, actor: MP, calls operation endpoint & shows INFO
            SEND_EVIDENCE_PARKED, SEND_EVIDENCE_HELMET, SEND_EVIDENCE_CHARGER # actor: MP request end user action to make pictures, end user: follow INSTRUCTIONS & MP, calls operation endpoint
          ]
        contentType:
          type: string
          description: the type of the information/instructions<br>
           _URL_ the **url** contains a HTML page to be displayed<br>
           _IMAGE_ the **url** contains an image in a well-known format<br>
           _PLAIN_TEXT_ the **text** contains the text<br>
           _HTML_ the **text** contains a HTML page
          enum: [ URL, IMAGE, PLAIN_TEXT, HTML ]
        url:
          $ref: "#/components/schemas/url"
          description: the internet location of the information/instructions, used in case or type `URL` or `IMAGE`
        text:
          $ref: "#/components/schemas/longString"
          description: free format text or HTML, depending on the type. Not to use in combination with `URL` or `IMAGE` 

    otherAccessInfo:
      description: Generic travelDocument, non-standardized (yet)
      $ref: "#/components/schemas/customProperties"

    travelDocument:
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA5/EA5/EA2421.htm
        description: TRAVEL DOCUMENT
      type: object
      discriminator:
        propertyName: travelDocumentType
        mapping:
          digitalTicket: "#/components/schemas/digitalTicket"
          deeplink: "#/components/schemas/deeplink"
          eKey: "#/components/schemas/eKey"
          binaryAccesInfo: "#/components/schemas/binaryAccessInfo"
          other: "#/components/schemas/otherAccessInfo"
      required:
        - startValegIdity
        - endValegIdity
        - travelDocumentType
      properties:
        startValegIdity:
          $ref: "#/components/schemas/dateTime"
        endValegIdity:
          $ref: "#/components/schemas/dateTime"
        type: 
          $ref: "#/components/schemas/typeOfTravelDocument"

    typeOfTravelDocument:
      type: string
      description: how this type is implemented?<br>
        _PDF_ The PDF is available at the supplied URL<br>
        _HTML_ The HTML is available at the supplied URL<br>
        _DEEPLINK_ The URL contains a deeplink template & parameters into the native 3th party app<br>
        _AXA_EKEY_OTP_ The fields required for the Axa e-key are available<br>
        _BLUETOOTH_ Not standardised<br>
        _NFC_ Not standardised<br> 
        _QR_ The value (base64) for QR code is supplied<br>
        _AZTEC_ The value (base64) for AZTEC code is supplied<br>
        _BARCODE_ The value (base64) for BAR code is supplied<br>
        _PHYSICAL_KEY_ The physical key must be obtained elsewhere<br>
        _EXTERNAL_CARD_ EMV or OV Chipcard<br>
        _TOMP_API_ The 'SET_IN_USE' operation will open the asset<br>
        _NONE_ unspecified
      enum:  [ 
        PDF, HTML, # digitalTicket
        DEEPLINK, # deeplink
        AXA_EKEY_OTP, BLUETOOTH, NFC, # proprietary
        QR, AZTEC, BARCODE, CERTIFICATE, # binaryAccessInfo
        TOMP_API, PHYSICAL_KEY, EXTERNAL_CARD, NONE # OTHER
      ]
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA4/EA3/EA2286.htm
        description: TYPE OF TRAVEL DOCUMENT

  # interoperability
    endpoint:
      type: object
      description: a formal description of an endpoint.
      additionalProperties: false
      required:
        - method
        - path
        - status
      properties:
        method:
          type: string
          enum: [ POST, PUT, GET, DELETE, PATCH ]
        path:
          $ref: "#/components/schemas/normalString"
          description: the exact path of the endpoint, starting after the base URL
          example: /plannings/
        status:
          type: string
          description: the implementation status of the endpoint. <br>
            _NOT_IMPLEMENTED_ Don't use this one. Just remove the endpoint registration from the array<br>
            _DIALECT_ implemented, but cannot be used without guidance, it contains issues with a bilateral agreement<br>
            _IMPLEMENTED_ implemented as should be (to the implementor's opinion)<br>
            _CERTIFIED_ implemented correctly, externally tested by an independent organization
          enum: [ NOT_IMPLEMENTED, DIALECT, IMPLEMENTED, CERTIFIED ]
          default: IMPLEMENTED
        externalType:
          type: string
          description: this field must be used when addressing other standards for exchanging 'static' data (Level 1 MaaS)
          enum: [ GBFS, GTFS, NeTEx, OSDM, OCPI, AMADEUS, CDS, APDS, IXSI5 ]
        useAssetTypes:
          type: array
          maxItems: 10
          items:
            type: string
            description: field references in external sources that are used in the purchase process. E.g. when using vehicle types from GBFS, a value of 'vehicle_type_id' should be 
              specified to purchase a bike package from the particular vehicle type in the field 'useAssetTypes' in the package offer request.
              Use this mapped identifier also in 'Asset.assetType'.
          externalDocs:
            url: https://github.com/TOMP-WG/TOMP-API/wiki/Use-external-IDs
          example:
            [ "vehicle_types.vehicle_type_id", # GBFS
              "Route.id", "RouteLink.id", # NeTEx
              "routes.route_id", # GTFS
              "FlightAvailability.id", # Amadeus
              "CurbZone.curb_zone_id", "CurbArea.curb_area_id" # CDS
            ]
        useAssets:
          type: array
          maxItems: 10
          items: 
            type: string
            description: field references in external sources that are used in the purchase process. E.g. when using vehicle types from GBFS, a value of 'vehicle_id' should be 
              specified to purchase a bike package from the particular vehicle type in the field 'useAssets' in the package offer request.
              Use this mapped identifier also in 'Asset.externalAssetReference'.
          externalDocs:
            url: https://github.com/TOMP-WG/TOMP-API/wiki/Use-external-IDs
          example:
            [ "vehicle_status.vehicle_id", #GBFS
              "EVSE.evse_id", # OCPI
              "CoachLayout.id::Place.number", # OSDM
              "Deck.deckType::Seat.id", # Amadeus
              "CurbSpace.curb_space_id" # CDS
            ]

      example:
        warning: "Don't copy this example. There are multiple examples in this section. Each object is an example on itself."
        externalStandard1:
          { "method": "GET", "externalType": "GBFS", "path": "https://some-external.url/GBFS/vehicle_types.json", 
            "useAssetTypes": ["vehicle_types.vehicle_type_id"], "status": "IMPLEMENTED" }
        externalStandard2:
          { "method": "GET", "externalType": "GBFS", "path": "https://some-external.url/GBFS/vehicle_status.json", 
            "useAssets": ["vehicle_status.vehicle_id"], "status": "IMPLEMENTED" }
        externalStandard3:
          { "method": "GET", "externalType": "NeTEx", "path": "https://data.ndovloket.nl/netex/wsf/NeTEx_WSF_WSF_20231206_20231206.xml.gz", 
            "useAssetTypes": ["Route.id", "RouteLink.id"], "status": "IMPLEMENTED" }        

    processIdentifier:
      type: object
      required:
      - module
      - identifiers
      properties:
        module: 
          type: string
          enum: [ INTEROPERABILITY, PLANNING, PURCHASE, package_EXECUTION, SUPPORT, PAYMENT ]
        identifiers:
          type: array
          maxItems: 25
          items:
            $ref: "#/components/schemas/shortString"

  # external references
    externalReference:
      allOf:
      - type: object
        required:
          - id
        properties:
          id:
            type: string
            maxLength: 50
      - $ref: "#/components/schemas/externalDataSource"

    ancillaryReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an externally described ancillary. The URL of the descriptions can be found in the /discovery endpoint.

    assetEquipmentReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an externally described ancillary. The URL of the descriptions can be found in the /discovery endpoint.

    assetReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an externally described asset. The URL of the descriptions can be found in the /discovery endpoint.

    assetTypeReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: an URI/UUID/ID referencing an asset type. The URL of the descriptions can be found in the /discovery endpoint.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3580.htm
        description: TRANSPORT TYPE
      # or https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3581.htm (VEHICLE TYPE)

    productReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an externally described product. The URL of the descriptions can be found in the /discovery endpoint.

    regionReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an externally described region. The URL of the descriptions can be found in the /discovery endpoint.

    stationReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an ID of station, from an external source (NeTEx, GBFS). The URL of the descriptions can be found in the /discovery endpoint.

    stopReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: reference to a stop (can be nation specific). This can help to specific pinpoint a (bus) stop. 
       Extra information about the stop is not supplied; you should find it using the external datasources specified in the /discovery endpoint.
      example: NL:S:13121110 or BE:S:79640040. 

    travelerAbilityReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an externally described ability. The URL of the descriptions can be found in the /discovery endpoint.

    travelerEquipmentReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an externally described equipment of a traveler (like a bike). The URL of the descriptions can be found in the /discovery endpoint.

    userGroupReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: Id of user groups that the user belongs to. This provides access to exclusive assets that are hidden to the public. The IDs are agreed upon by TO and MP.

    zoneReference:
      allOf: 
      - $ref: "#/components/schemas/externalReference"
      description: a reference to an externally described zone. The URL of the descriptions can be found in the /discovery endpoint.

    externalDataSource:
      type: object
      description: datasource for external references
      required:
      - format
      - url
      properties:
        format:
          type: string
          enum: [ GBFS, NeTEx, CDS, OSDM, AMADEUS, GTFS, OCPI, TRAVELER_CHARACTERISTICS ]
        version:
          type: string
          description: the version of the external data source
        type: 
          type: string
          enum: [ ASSET, ASSET_TYPE, STATION, STOP, QUAY, REGION, ZONE, PRODUCT, ANCILLARY, ASSET_EQUIPMENT, ABILITY, TRAVELER_EQUIPMENT ]
        part:
          type: string
          description: additional information to refer to the concept that is used within a data standard (for instance, in CDS you can use area and zone as ZONE, 
            or in NeTEx there are a lot of possibilities). Specify the file name or concept name.
        url:
          $ref: "#/components/schemas/url"
      example: 
        { "type": "ZONE", "url": "a valegId URI to a zone definition", "standard": "GBFS", "version": "2.3", "part": "geofencing_zones" }
          #, { "type": "ASSET_TYPE", "url": "a valegId URI to a vehicle_type definition", "standard": "GBFS", "version": "2.3", "part": "vehicle_types" } 
          #, { "type": "ABILITY", "url": "https://github.com/TOMP-WG/TOMP-API/raw/master/documents/CROW-traveler_characteristics_en.json", "standard": "TRAVELER_CHARACTERISTICS", "version": "2.0" } 
          #, { "type": "ASSET_EQUIPMENT", "url": "https://github.com/TOMP-WG/TOMP-API/raw/master/documents/CROW-traveler_characteristics_en.json", "standard": "TRAVELER_CHARACTERISTICS", "version": "2.0" } 
          #, { "type": "TRAVELER_EQUIPMENT", "url": "https://github.com/TOMP-WG/TOMP-API/raw/master/documents/CROW-traveler_characteristics_en.json", "standard": "TRAVELER_CHARACTERISTICS", "version": "2.0" } 
          #, { "type": "ANCILLARY", "url": "https://github.com/TOMP-WG/TOMP-API/raw/master/documents/CROW-traveler_characteristics_en.json", "standard": "TRAVELER_CHARACTERISTICS", "version": "2.0" } 

  # GeoJSON specs, in contradiction to the convention starting with a capital. Reason: compatibility with GeoJSON specification (types are named this way)
    LineString:
      type: array
      items:
        $ref: "#/components/schemas/Point"
      description: An array  of WGS84 coordinate pairs
      externalDocs:
        url: https://geojson.org/geojson-spec.html#line
      example: [[6.169639, 52.253279], [6.05623, 52.63473]]

    Point:
      type: array
      minItems: 2
      maxItems: 2
      items:
        $ref: "#/components/schemas/float"
      description: Geojson Coordinate [longitude, latitude]
      externalDocs:
        url: https://geojson.org/geojson-spec.html#point
      example: [4.53432, 55.324523]

    Polygon:
      type: array
      items:
        $ref: "#/components/schemas/LineString"
      description: geojson representation of a polygon. First and last point must be equal. See also https://geojson.org/geojson-spec.html#polygon and example https://geojson.org/geojson-spec.html#id4. The order should be lon, lat [[[lon1, lat1], [lon2,lat2], [lon3,lat3], [lon1,lat1]]], the first point should match the last point.
      externalDocs:
        url: https://geojson.org/geojson-spec.html#polygon
      example: [[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0,0.0], [1.0, 1.0]]]

    MultiPolygon:
      type: array
      items:
        $ref: "#/components/schemas/Polygon"
      description: geojson representation of a multi polygon. See also https://geojson.org/geojson-spec.html#multipolygon
      externalDocs:
        url: https://geojson.org/geojson-spec.html#multipolygon
      example: [[[[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0,0.0], [1.0, 1.0]]]]

    geojsonGeometry:
      required:
      - type
      description: 
        geoJSON geometry
      properties:
        type:
          type: string
          description: type used as discriminator. Therefore not in capitals.
          enum: [ Point, LineString, Polygon, MultiPolygon ]
        coordinates:
          oneOf: 
            - $ref: "#/components/schemas/Point"
            - $ref: "#/components/schemas/LineString"
            - $ref: "#/components/schemas/Polygon"
            - $ref: "#/components/schemas/MultiPolygon"
      discriminator:
        propertyName: type
  
  # HAL construct
    halLinks:
      type: object
      externalDocs:
        url: https://en.wikipedia.org/wiki/Hypertext_Application_Language
      properties:
        _links: 
          type: object
          additionalProperties: 
            $ref: "#/components/schemas/halLink"
    
    halLink:
      type: object
      additionalProperties: false
      required:
        - href
      properties:
        rel:
          type: string
          description: a misused field, to indicate the http method.
          enum: [ POST, GET, DELETE ]
        href:
          $ref: "#/components/schemas/url"
        type:
          $ref: "#/components/schemas/shortString"
          default: "application/hal+json"
        templated: 
          type: boolean
          default: true

  # base types / formats
    amountOfMoney:
      type: object
      description: an amount of money, usable in fares, fare calculations or in extra costs.
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA6/EA1/EA2/EA1688.htm
        description: FARE PRICE
      required:
      - amount
      properties:
        amount:
          type: number
          format: float
          description: This should be in the base unit as defined by the ISO 4217 currency code with the appropriate number of decimal places and omitting the currency symbol. e.g. if the price is in US Dollars the price would be 9.95. This is inclusive VAT
          example: 9.95
        taxPercentageUsed:
          $ref: "#/components/schemas/float"
          description: value added tax rate (percentage of amount)
          example: 21.0
        currencyCode:
          $ref: "#/components/schemas/currencyCode"
        vatCountryCode:
          $ref: "#/components/schemas/country"

    coordinates:
      type: object
      description: a lon, lat (WGS84, EPSG:4326)
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA1/EA169.htm
      additionalProperties: false
      required:
        - lat
        - lng
      properties:
        lng:
          type: number
          example: 6.169639
          format: float
          minimum: 0
          maximum: 360
        lat:
          type: number
          example: 52.253279
          format: float
          minimum: 0
          maximum: 360
        alt:
          type: number
          description: altitude, in meters above sea level
          format: float
          minimum: 0
          maximum: 1000

    country:
      type: string
      description: two-letter country codes according to ISO 3166-1
      maxLength: 2
      minLength: 2
      pattern: "[A-Z]{2}"
      example: NL

    currencyCode:
      type: string
      description: ISO 4217 currency code
      minLength: 3
      maxLength: 3
      pattern: "[a-zA-Z]{3}"

    customProperties:
      type: object
      description: dictionary for extra fields (bilatural agreements)
      additionalProperties:
        maxLength: 1000
        maxProperties: 20

    date:
      type: string
      format: full-date
      example: "2019-03-31"
      pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc3339#section-5.6
        description: full-date

    dateTime:
      type: string
      format: date-time
      example: "2019-10-12T07:20:50.52Z"
      pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$"
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc3339#section-5.6
        description: date-time

    day:
      type: string
      enum: [ MON, TUE, WED, THU, FRI, SAT, SUN ]
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA6/EA3/EA306.htm
        description: DAY OF WEEK

    error:
      type: object
      additionalProperties: false
      externalDocs:
        url: https://jsonapi.org/examples/#error-objects
        description: Error object, https://tools.ietf.org/html/rfc7807
      description:
        An error that the service may send, e.g. in case of invalegId input,
        missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
      properties:
        errorcode:
          $ref: "#/components/schemas/tinyInt"
          description: The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error.
        type:
          $ref: "#/components/schemas/tinyString"
          description: The category of this type of error.
        title:
          $ref: "#/components/schemas/shortString"
          description: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language
        status:
          $ref: "#/components/schemas/tinyInt"
          description: The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        detail:
          $ref: "#/components/schemas/longString"
          description: A human-readable explanation specific to this occurrence of the problem, matches Content-Language
        instance:
          $ref: "#/components/schemas/url"
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.

    float:
      type: number
      description: the travelled distance. Only if applicable.
      format: float
      minimum: 0

    httpDate:
      type: string
      description: A HTTP date string 
      externalDocs:
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
        description: http-date
      format: http-date
      example: Wed, 21 Oct 2015 07:28:00 GMT

    longInt:
      type: integer
      description: long number, for distances etc. (>1.000)
      default: 0
      minimum: 0

    longString:
      type: string
      description: long string, memos etc (length 0-10.000)
      maxLength: 10000

    normalInt:
      type: integer
      description: default length for an integer (0-1000)
      default: 0
      minimum: 0
      maximum: 1000
    
    normalString:
      type: string
      description: default string, full names etc (length 0-200)
      maxLength: 200

    requirement:
      type: object
      description: base concept for an (dis)ability or ancillary/equipment item.
      additionalProperties: false
      externalDocs:
        url: https://www.transmodel-cen.eu/model/EARoot/EA1/EA5/EA8/EA254.htm
        description: TYPE OF USER NEED
      # OR https://www.transmodel-cen.eu/model/EARoot/EA10/EA3/EA4/EA3583.htm (VEHICLE EQUIPMENT PROFILE), when applied on a vehicle, type=ANCILLARY/ASSET_EQUIPMENT
      required:
        - category
        - number
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
          description: _DISABILITY_ specifies what the traveler needs to cope with its disabilities, like a wheelchair, or a guide dog. It is possible that the traveler brings it 
            along, but it can also be a requirement to the TO, like a ramp.<br>
            _ANCILLARY_ are things that are not part of the asset, but can be used (or, sometimes even are mandatory) to complete the package, like a helmet or a child seat<br>
            _ASSET_EQUIPMENT_ things that are options on an asset that cannot be removed easily, like a route planner, or cruise control<br>
            _TRAVELER_EQUIPMENT_ things the traveler brings along during the package, like a bike, luggage, or a pet.
          enum: [ DISABILITY, ANCILLARY, ASSET_EQUIPMENT, TRAVELER_EQUIPMENT ]
        identifier:
          $ref: "#/components/schemas/externalReference"
          description: the ID of the requirement
        memo:
          $ref: "#/components/schemas/longString"
          description: extra field for detailed information, not standardized
        applicableDays:
          type: array
          description: days of week that are applicable
          maxItems: 7
          items: 
            $ref: "#/components/schemas/day"
        extraInfo:
          description: "possible items: variableNumber (referencing to [variable number] in the traveler's dictionary)
                        type: conditionally extra information, referencing to the 3th column"
          $ref: "#/components/schemas/customProperties"

    shortInt:
      type: integer
      description: a bit short integer (0-100)
      default: 0
      minimum: 0
      maximum: 100

    shortString:
      type: string
      description: short string, display names (length 0-50)
      maxLength: 50

    time:
      type: string
      format: partial-time
      example: "23:59:59.3498"
      pattern: "^[0-9]{2}:[0-9]{2}:[0-9]{2}('.'[0-9]+)?$"
      externalDocs:
        url: https://www.rfc-editor.org/rfc/rfc3339#section-5.6
        description: partial-time

    timeRestriction:
      allOf:
      - $ref: "#/components/schemas/timeWindow"
      - type: object
        properties:
          limitType:
            type: string
            enum: [ NOT_ALLOWED, REDUCTION ]
          reductionPercentage:
            $ref: "#/components/schemas/shortInt"

    timeWindow:
      type: object
      required:
        - startTime
        - endTime
      properties:
        day:  
          $ref: "#/components/schemas/day"
        startTime:
          $ref: "#/components/schemas/time"
        endTime:
          $ref: "#/components/schemas/time"

    tinyInt:
      type: integer
      description: for really small numbers (0-10)
      default: 0
      minimum: 0
      maximum: 10

    tinyString:
      type: string
      description: real short string, codes (length 0-10)
      maxLength: 10

    url:
      type: string
      description: valegId URL
      format: URL

    uuid:
      type: string
      format: UUID
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      example: ae76f51c-a1a6-46af-b9ab-8233564adcae
      externalDocs:
        url: https://en.wikipedia.org/wiki/Universally_unique_identifier
        # also: https://www.ietf.org/rfc/rfc4122.txt

  parameters:
    acceptLanguage:
      in: header
      name: Accept-Language
      required: true
      schema:
        $ref: "#/components/schemas/shortString"
        format: comma separated language tags
      description: "A comma-separated list of BCP 47 (RFC 5646) language tags and optional weights as described in IETF RFC7231 section 5.3.5. A list of the languages/localizations the user would like to see the results in. For user privacy and ease of use on the TO side, this list should be kept as short as possible"
      example: nl, de;q=0.7
    senderId:
      in: header
      name: sending-id
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
      description: The ID of the sending operator
    receiverId:
      in: header
      name: receiving-id
      required: false
      schema:
        $ref: "#/components/schemas/uuid"
      description: the ID of the intended receiver
    packageId:
      in: path
      name: id
      description: package identifier
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    legId:
      in: path
      name: legId
      description: LEG identifier
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    callbackUrl: 
      in: header
      name: callback-url
      description: The callback URL of the Maas Provider, to use as base url for callback, f.x. the POST /packages/{id}/legs/{legId}/operations/ and POST /packages/{id}/operations/. Only to be provided 
        when this deviates from standard or agreed URL.
      required: false
      schema:
        $ref: "#/components/schemas/url"

  headers:
    contentLanguage:
      description: The language/localization of user-facing content
      example: nl
      schema:
        type: string
        format: One IETF BCP 47 (RFC 5646) language tag
        pattern: "^[a-zA-Z]+-[a-zA-Z]+$"
      required: true
    expires:
      description: The result is valegId until this timestamp (and must be committed unless it is already in state _CONFIRMED_). A pending purchased package is expired after this timestamp.
      schema:
        description: A HTTP date string
        externalDocs:
          url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires
        type: string
        format: http-date
        example: Wed, 21 Oct 2015 07:28:00 GMT
      required: false

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes: {}
    OpenId:
      type: openIdConnect
      openIdConnectUrl: https://unknownserver/.well-known/openid-configuration

  responses:
    204NoContent:
      description: Request was successful, no content to return.
    409Conflict:
      description: The request will not be fulfilled. The request itself is legal, but the content conflicts with the server and might be stale. The user might try again after looking up the current state of the resource.
      headers:
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            type: object
    410Gone:
      description: The requested resource is no longer available. This is permanent.
      headers:
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            type: object
    errorResponse:
      description: Bad request. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code.
      headers:
        Content-Language:
          $ref: "#/components/headers/contentLanguage"
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                maxItems: 10
                items:
                  $ref: "#/components/schemas/error"