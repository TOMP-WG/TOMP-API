{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "Template input JSONSchema",
    "description": "JSON Schema for the request body of input schema",
    "$ref": "#/components/requestBodies/processRequestBody",
    "$comment": "Replace the `inputs` reference in the processRequestBody to create a valid JSONSchema to validate",
    "components": {
        "schemas": {
            "packageResponseBody": {
                "description": "a package response is always a geojson.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojson"
                    }
                ],
                "examples": [
                    {
                        "type": "FeatureCollection",
                        "id": "376e1083-92df-44e5-a1bf-d5570507b8ff",
                        "features": [
                            {
                                "type": "Feature",
                                "properties": {
                                    "id": "376e1083-92df-44e5-a1bf-d5570507b8",
                                    "type": "LEG",
                                    "assetType": "GBFS:vehicle_types:SMALL_CAR"
                                },
                                "geometry": {
                                    "type": "LineString",
                                    "coordinates": [
                                        [
                                            23.343,
                                            51.6923
                                        ],
                                        [
                                            34.233,
                                            42.3943
                                        ]
                                    ]
                                },
                                "id": "376e1083-92df-44e5-a1bf-d5570507b8",
                                "links": []
                            }
                        ],
                        "properties": {
                            "type": "package",
                            "id": "376e1083-92df-44e5-a1bf-d5570507b8ff",
                            "specification": {
                                "from": "...",
                                "startTime": "..."
                            }
                        },
                        "links": [
                            {
                                "rel": "confirm",
                                "method": "POST",
                                "href": "/processes/confirm-offer/execute?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff",
                                "type": "application/geo+json"
                            },
                            {
                                "rel": "withdraw",
                                "method": "POST",
                                "href": "/processes/release-offer/execute?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff",
                                "type": "application/geo+json"
                            },
                            {
                                "rel": "extend_expiry_time",
                                "method": "POST",
                                "href": "/processes/extend-expiry-time/execute?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff",
                                "type": "application/geo+json"
                            }
                        ]
                    }
                ]
            },
            "offersResponseBody": {
                "description": "a list of offers. The main 'properties' field must be of type 'offers' (#/components/schemas/offerProperties)",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojson"
                    }
                ],
                "examples": [
                    {
                        "type": "FeatureCollection",
                        "id": "376e1083-92df-44e5-a1bf-d5570507b8ff",
                        "features": [
                            {
                                "type": "Feature",
                                "properties": {
                                    "id": "376e1083-92df-44e5-a1bf-d5570507b8",
                                    "type": "PACKAGE",
                                    "from": "...",
                                    "startTime": "...",
                                    "legs": [
                                        {
                                            "type": "LEG",
                                            "operator": "S:VY",
                                            "product": "S:VY:first_class_ticket",
                                            "asset": {
                                                "id": "S:VY:JOURNEY:3942-2349"
                                            }
                                        },
                                        {
                                            "type": "LEG",
                                            "operator": "S:VOI",
                                            "product": "VOI-GBFS:vehicle_types:electric_bike"
                                        }
                                    ]
                                },
                                "geometry": {
                                    "type": "MultiLineString",
                                    "coordinates": [
                                        [
                                            [
                                                23.343,
                                                51.6923
                                            ],
                                            [
                                                34.233,
                                                42.3943
                                            ]
                                        ],
                                        [
                                            23.343,
                                            51.6923
                                        ],
                                        [
                                            34.233,
                                            42.3943
                                        ]
                                    ]
                                },
                                "id": "376e1083-92df-44e5-a1bf-d5570507b8",
                                "links": [
                                    {
                                        "rel": "details",
                                        "method": "GET",
                                        "description": "See the details of this offer",
                                        "href": "/collections/offers/items/376e1083-92df-44e5-a1bf-d5570507b8",
                                        "type": "application/geo+json"
                                    },
                                    {
                                        "rel": "purchase",
                                        "method": "POST",
                                        "href": "/processes/purchase-package/execute",
                                        "body": {
                                            "packageId": "376e1083-92df-44e5-a1bf-d5570507b8"
                                        },
                                        "type": "application/geo+json"
                                    }
                                ]
                            }
                        ],
                        "properties": {
                            "type": "OFFERS"
                        },
                        "links": [
                            {
                                "rel": "confirm",
                                "method": "POST",
                                "href": "/collections/offers/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff&operation=confirm",
                                "type": "application/geo+json"
                            },
                            {
                                "rel": "withdraw",
                                "method": "POST",
                                "href": "/collections/offers/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff&operation=withdraw",
                                "type": "application/geo+json"
                            },
                            {
                                "rel": "extend_expiry_time",
                                "method": "POST",
                                "href": "/collections/offers/items?packageId=376e1083-92df-44e5-a1bf-d5570507b8ff&operation=extend_expiry_time",
                                "type": "application/geo+json"
                            }
                        ]
                    }
                ]
            },
            "offerProperties": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonProperties"
                    },
                    {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                            "unavailable": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/parameter"
                                }
                            }
                        }
                    }
                ]
            },
            "defaultInput": {
                "type": "object",
                "description": "superclass for all request bodies. Not every subclass has to be in your implementation, it depends on your selection of modules.",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "SEARCH_OFFER": "#/components/schemas/searchOfferInput",
                        "TRAVELLER": "#/components/schemas/travellerInput",
                        "CHANGE_TIMES": "#/components/schemas/changeTimesInput",
                        "PRODUCT": "#/components/schemas/productInput",
                        "ASSET": "#/components/schemas/assignAssetInput",
                        "ANCILLARY": "#/components/schemas/ancillaryInput",
                        "PURCHASE": "#/components/schemas/packageInput",
                        "2_PHASE_PURCHASE": "#/components/schemas/packageInput",
                        "COMMIT": "#/components/schemas/packageInput",
                        "RELEASE": "#/components/schemas/packageInput",
                        "PURCHASE_PACKAGE": "#/components/schemas/purchasePackageInput",
                        "EXTEND_EXPIRY_TIME": "#/components/schemas/extendExpiryTimeInput",
                        "LEG": "#/components/schemas/legInput",
                        "PAYMENT_REQUEST": "#/components/schemas/financialInput",
                        "PAYMENT_CONFIRMATION": "#/components/schemas/financialInput",
                        "REDRESS": "#/components/schemas/redressInput"
                    }
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/searchOfferInput"
                    },
                    {
                        "$ref": "#/components/schemas/travellerInput"
                    },
                    {
                        "$ref": "#/components/schemas/changeTimesInput"
                    },
                    {
                        "$ref": "#/components/schemas/productInput"
                    },
                    {
                        "$ref": "#/components/schemas/assignAssetInput"
                    },
                    {
                        "$ref": "#/components/schemas/ancillaryInput"
                    },
                    {
                        "$ref": "#/components/schemas/packageInput"
                    },
                    {
                        "$ref": "#/components/schemas/purchasePackageInput"
                    },
                    {
                        "$ref": "#/components/schemas/extendExpiryTimeInput"
                    },
                    {
                        "$ref": "#/components/schemas/legInput"
                    },
                    {
                        "$ref": "#/components/schemas/financialInput"
                    },
                    {
                        "$ref": "#/components/schemas/redressInput"
                    }
                ],
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "packageId": {
                        "$ref": "#/components/schemas/uuid"
                    },
                    "legId": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "productId": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "timestamp": {
                        "description": "intended timestamp of modification",
                        "$ref": "#/components/schemas/dateTime"
                    },
                    "comment": {
                        "$ref": "#/components/schemas/longString",
                        "description": "free text, should match Content-Language."
                    }
                }
            },
            "packageInput": {
                "type": "object",
                "required": [
                    "type",
                    "packageId"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "PACKAGE"
                        ]
                    }
                },
                "examples": [
                    {
                        "type": "PACKAGE",
                        "packageId": "349204234-342439324-342"
                    }
                ]
            },
            "legInput": {
                "type": "object",
                "required": [
                    "legId",
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "LEG"
                        ]
                    },
                    "location": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "evidence": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/link"
                        }
                    }
                }
            },
            "travellerInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/parameterAssignment"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type",
                            "travellers",
                            "packageId"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TRAVELLER"
                                ]
                            }
                        }
                    }
                ],
                "examples": [
                    {
                        "type": "TRAVELLER",
                        "packageId": "349204234-342439324-342",
                        "travellers": [
                            {
                                "type": "INDIVIDUAL_TRAVELLER",
                                "id": "ABT:3492"
                            }
                        ]
                    }
                ]
            },
            "changeTimesInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/travelSpecification"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type",
                            "packageId"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "CHANGE_TIMES"
                                ]
                            }
                        }
                    }
                ],
                "examples": [
                    {
                        "type": "CHANGE_TIMES",
                        "packageId": "349204234-342439324-342",
                        "startTime": "2024-12-13T11:34:00Z"
                    }
                ]
            },
            "productInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/product"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type",
                            "packageId",
                            "id"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "PRODUCT"
                                ]
                            }
                        }
                    }
                ],
                "examples": [
                    {
                        "type": "PRODUCT",
                        "packageId": "349204234-342439324-342",
                        "id": "NeTEx:FareProduct:349242"
                    }
                ]
            },
            "assignAssetInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/travelSpecification"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type",
                            "assetId"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "ASSET"
                                ]
                            },
                            "assetId": {
                                "$ref": "#/components/schemas/externalReference"
                            },
                            "replaceAssetId": {
                                "$ref": "#/components/schemas/externalReference"
                            }
                        }
                    }
                ],
                "examples": [
                    {
                        "type": "ASSET",
                        "packageId": "349204234-342439324-342",
                        "assetId": "GBFS:vehicles:349242"
                    }
                ]
            },
            "ancillaryInput": {
                "type": "object",
                "required": [
                    "type",
                    "ancillaryId"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "ANCILLARY"
                        ]
                    },
                    "ancillaryId": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "replaceAncillaryId": {
                        "$ref": "#/components/schemas/externalReference"
                    }
                },
                "examples": [
                    {
                        "type": "ANCILLARY",
                        "packageId": "349204234-342439324-342",
                        "ancillaryId": "some-external-reference"
                    }
                ]
            },
            "package": {
                "x-tm": "SALES OFFER PACKAGE, TRAVEL OFFER PACKAGE, CUSTOMER PURCHASE PACKAGE",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonProperties"
                    },
                    {
                        "$ref": "#/components/schemas/travelSpecification"
                    },
                    {
                        "type": "object",
                        "description": "a purchased package is a registration of an agreement between end user and TO, to execute a package (=set of legs) according a specification, including all conditions",
                        "required": [
                            "type",
                            "status",
                            "price"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "PACKAGE"
                                ]
                            },
                            "id": {
                                "type": "string"
                            },
                            "status": {
                                "$ref": "#/components/schemas/packageStatus"
                            },
                            "packageLabel": {
                                "$ref": "#/components/schemas/packageLabel"
                            },
                            "price": {
                                "$ref": "#/components/schemas/amountOfMoney"
                            },
                            "legs": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/leg"
                                }
                            },
                            "products": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/product"
                                }
                            }
                        }
                    }
                ]
            },
            "leg": {
                "x-tm": "LEG",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonFeatureProperties"
                    },
                    {
                        "$ref": "#/components/schemas/travelSpecification"
                    },
                    {
                        "type": "object",
                        "description": "A (planned) consumption of a product within a package",
                        "required": [
                            "id",
                            "type"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/externalReference",
                                "description": "The unique identifier (TO) of this leg. Must always the same as applied in the request URL. And when there are not additional legs in the offered or purchased package, the same **id** as the package id."
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "LEG"
                                ]
                            },
                            "sequenceNumber": {
                                "$ref": "#/components/schemas/shortInt",
                                "description": "The order of the leg within the package. Mandatory, if there are multiple legs in the package. If there are parallel legs (eg. using parking lot and a renting a bike), it can be the same within one package."
                            },
                            "state": {
                                "$ref": "#/components/schemas/legState"
                            },
                            "price": {
                                "$ref": "#/components/schemas/amountOfMoney",
                                "description": "the final price of the leg"
                            },
                            "product": {
                                "$ref": "#/components/schemas/externalReference",
                                "description": "The main product (v1.x 'asset type') used to execute this leg"
                            },
                            "additionalProducts": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/externalReference"
                                },
                                "description": "additional products that can be assigned to this leg"
                            },
                            "assets": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/asset"
                                },
                                "description": "The physical asset(s) used for the execution of the leg"
                            },
                            "operator": {
                                "$ref": "#/components/schemas/externalReference"
                            },
                            "memo": {
                                "$ref": "#/components/schemas/longString"
                            },
                            "extraInfo": {
                                "$ref": "#/components/schemas/customProperties"
                            }
                        }
                    }
                ]
            },
            "product": {
                "x-tm": "FARE PRODUCT",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonFeatureProperties"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "PRODUCT"
                                ]
                            },
                            "id": {
                                "$ref": "#/components/schemas/externalReference"
                            },
                            "fare": {
                                "$ref": "#/components/schemas/categorizedFareStructure",
                                "description": "The specific fare structure. The price of a leg can be calculated using all elements."
                            },
                            "conditions": {
                                "type": "array",
                                "description": "specific conditions for this product",
                                "items": {
                                    "$ref": "#/components/schemas/parameter"
                                }
                            },
                            "guarantees": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/guarantee"
                                }
                            },
                            "parts": {
                                "type": "array",
                                "description": "references to products that are contained in this product (to facilitate e.g. travel through)",
                                "items": {
                                    "$ref": "#/components/schemas/externalReference"
                                }
                            }
                        }
                    }
                ]
            },
            "packageLabel": {
                "type": "string",
                "enum": [
                    "CHEAPEST",
                    "MOST_FLEXIBLE",
                    "NON_FLEXIBLE",
                    "MOST_ECO_FRIENDLY",
                    "FASTEST",
                    "SHORTEST"
                ]
            },
            "packageStatus": {
                "x-tm": "CUSTOMER PURCHASE STATUS",
                "type": "string",
                "description": "The life-cycle state of the package (from NEW to ENDED)<br> _OFFERED_ the package is offered<br> _PENDING_ the purchase of the package is not confirmed (the end user has shown intentions to purchase this offer), must be finalized with the package-confirm operation<br> _PURCHASED_ a finalized package ('purchased'). Both parties agreed to deliver services in return of payment<br> _CANCELLED_ the package is cancelled before it is executed. The agreement will specify whether there is a refund, or under which conditions<br> _EXPIRED_ the MP didn't respond on time, the package offer has been expired<br> _STARTED_ the package is started, the <u>trip execution</u> module is needed now to manage the execution of the package<br> _ENDED_ the package has ended, the trip has been executed<br> _RELEASED_ for internal archiving, the package has not been purchased.<br>",
                "enum": [
                    "OFFERED",
                    "PENDING",
                    "PURCHASED",
                    "REJECTED",
                    "RELEASED",
                    "EXPIRED",
                    "CANCELLED",
                    "STARTED",
                    "ENDED"
                ],
                "examples": [
                    "PURCHASED"
                ]
            },
            "legState": {
                "type": "string",
                "description": "status of a leg<br> _NOT_STARTED_ the leg is not started, initial state<br> _PREPARING_ the _PREPARE_ operation has been received<br> _PREPARED_ the leg is ready to use<br> _IN_USE_ the travelers are on their way<br> _PAUSED_ the asset is paused<br> _ENDED_ the travelers have arrived at their destination<br> _ISSUE_REPORTED_ due to an issue, there is (temporarily) no progress to report, when the issue isn't solved, this is a final state<br> _CANCELLED_ the leg has been cancelled, before execution<br> _ABENDED_ the leg is abnormally ended (e.g. due to an issue)",
                "enum": [
                    "NOT_STARTED",
                    "PREPARING",
                    "PREPARED",
                    "IN_USE",
                    "PAUSED",
                    "ENDED",
                    "ISSUE_REPORTED",
                    "CANCELLED",
                    "ABENDED"
                ]
            },
            "usage": {
                "x-tm": "USAGE PARAMETER",
                "type": "object",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "INDIVIDUAL_TRAVELLER": "#/components/schemas/individualTraveller",
                        "USER_PROFILE": "#/components/schemas/userProfile",
                        "GROUP_PROFILE": "#/components/schemas/groupProfile",
                        "COMPANION_PROFILE": "#/components/schemas/companionProfile",
                        "COMMERCIAL_PROFILE": "#/components/schemas/commercialProfile",
                        "ENTITLEMENT": "#/components/schemas/entitlementGiven",
                        "CARD_TYPE": "#/components/schemas/cardType",
                        "CARD": "#/components/schemas/card",
                        "LICENSE_TYPE": "#/components/schemas/licenseType",
                        "LICENSE": "#/components/schemas/license",
                        "ASSET": "#/components/schemas/assetReference"
                    }
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/individualTraveller"
                    },
                    {
                        "$ref": "#/components/schemas/userProfile"
                    },
                    {
                        "$ref": "#/components/schemas/groupProfile"
                    },
                    {
                        "$ref": "#/components/schemas/companionProfile"
                    },
                    {
                        "$ref": "#/components/schemas/commercialProfile"
                    },
                    {
                        "$ref": "#/components/schemas/entitlementGiven"
                    },
                    {
                        "$ref": "#/components/schemas/cardType"
                    },
                    {
                        "$ref": "#/components/schemas/card"
                    },
                    {
                        "$ref": "#/components/schemas/licenseType"
                    },
                    {
                        "$ref": "#/components/schemas/license"
                    },
                    {
                        "$ref": "#/components/schemas/assetReference"
                    }
                ],
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "sequenceNumber": {
                        "type": "number",
                        "description": "specifying the sequence number of the traveller(group) in the travelling party.",
                        "default": 1
                    }
                }
            },
            "userProfile": {
                "x-tm": "USER PROFILE",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/shortString"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "USER_PROFILE"
                        ]
                    },
                    "minimumAge": {
                        "$ref": "#/components/schemas/shortInt"
                    },
                    "maximumAge": {
                        "$ref": "#/components/schemas/shortInt"
                    },
                    "monthDayOnWhichAgeApplies": {
                        "$ref": "#/components/schemas/shortInt"
                    },
                    "ageGroup": {
                        "type": "string",
                        "enum": [
                            "ANYONE",
                            "INFANT",
                            "CHILD",
                            "YOUTH",
                            "ADULT",
                            "SENIOR"
                        ]
                    },
                    "minimumHeight": {
                        "$ref": "#/components/schemas/shortInt"
                    },
                    "maximumHeight": {
                        "$ref": "#/components/schemas/shortInt"
                    },
                    "localResident": {
                        "type": "boolean"
                    },
                    "genderLimitation": {
                        "type": "boolean"
                    }
                }
            },
            "companionProfile": {
                "x-tm": "COMPANION PROFILE",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "COMPANION_PROFILE"
                        ]
                    },
                    "minimumNumberAllowed": {
                        "$ref": "#/components/schemas/shortInt"
                    },
                    "maximumNumberAllowed": {
                        "$ref": "#/components/schemas/shortInt"
                    }
                }
            },
            "groupProfile": {
                "x-tm": "GROUP PROFILE",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "GROUP_PROFILE"
                        ]
                    },
                    "name": {
                        "$ref": "#/components/schemas/normalString"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/userProfile"
                                },
                                {
                                    "type": "object",
                                    "required": [
                                        "quantity"
                                    ],
                                    "properties": {
                                        "quantity": {
                                            "$ref": "#/components/schemas/shortInt"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "commercialProfile": {
                "x-tm": "COMMERCIAL PROFILE",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/shortString"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "COMMERCIAL_PROFILE"
                        ]
                    },
                    "code": {
                        "$ref": "#/components/schemas/shortString"
                    },
                    "name": {
                        "$ref": "#/components/schemas/normalString"
                    }
                }
            },
            "entitlementGiven": {
                "x-tm": "ENTITLEMENT GIVEN",
                "type": "object",
                "required": [
                    "type",
                    "entitlementType"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "a unique ID for this usage. Especially required when it is a USER PROFILE or an INDIVIDUAL TRAVELLER. Other concepts might refer to this ID."
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "ENTITLEMENT"
                        ]
                    },
                    "entitlementType": {
                        "$ref": "#/components/schemas/normalString"
                    }
                }
            },
            "travelSpecification": {
                "x-tm": "TRAVEL SPECIFICATION",
                "type": "object",
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/externalReference",
                        "description": "use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'"
                    },
                    "via": {
                        "type": "array",
                        "minItems": 0,
                        "maxItems": 3,
                        "items": {
                            "$ref": "#/components/schemas/externalReference"
                        },
                        "description": "use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'",
                        "examples": [
                            [
                                "NSR:Quay:108842"
                            ]
                        ]
                    },
                    "to": {
                        "$ref": "#/components/schemas/externalReference",
                        "description": "use an ID contained in the 'places' field, or from an external source, when using coordinates, please use the prefix 'gps:'"
                    },
                    "startTime": {
                        "$ref": "#/components/schemas/dateTime",
                        "description": "The intended departure time. If left out and no endTime is set, the current time should be assumed. If only the arrival time is specified, this is an implicit request for a guaranteed arrival at that time."
                    },
                    "endTime": {
                        "$ref": "#/components/schemas/dateTime",
                        "description": "The intended arrival time, at the `to place`. When the **startTime** is not set, and **endTime** is set, it is an implicit request for an arrival time guarantee."
                    },
                    "placeDefinitions": {
                        "description": "Places that are not specified in an external data source (like a home address)",
                        "type": "array",
                        "minItems": 0,
                        "maxItems": 3,
                        "items": {
                            "$ref": "#/components/schemas/postalAddress"
                        }
                    }
                }
            },
            "classOfUse": {
                "x-tm": "CLASS OF USE",
                "type": "string",
                "description": "A classification of fare and other service classes by category of user entitled to use them.",
                "enum": [
                    "FIRST_CLASS",
                    "SECOND_CLASS",
                    "THIRD_CLASS",
                    "ECONOMY_CLASS",
                    "BUSINESS_CLASS",
                    "TURISTA",
                    "PREFERENTE",
                    "PREMIUM_CLASS",
                    "ANY",
                    "UNKNOWN"
                ]
            },
            "parameterAssignment": {
                "x-tm": "ACCESS RIGHT PARAMETER ASSIGNMENT",
                "type": "object",
                "properties": {
                    "travellers": {
                        "type": "array",
                        "description": "this describes the travelling party, the users (when purchasing or later, when anonymous travelling is not applicable) or user profiles (during the offers)",
                        "items": {
                            "$ref": "#/components/schemas/usage"
                        },
                        "examples": [
                            [
                                {
                                    "type": "USER_PROFILE",
                                    "ageGroup": "ADULT",
                                    "number": 1
                                },
                                {
                                    "type": "ENTITLEMENT",
                                    "entitlementType": "NO:ENTITLEMENT:MILITARY",
                                    "number": 1
                                },
                                {
                                    "type": "COMMERCIAL_PROFILE",
                                    "code": "VX34-348J-EI7y",
                                    "number": 1
                                },
                                {
                                    "type": "LICENSE_TYPE",
                                    "modes": [
                                        "CAR"
                                    ],
                                    "number": 2
                                },
                                {
                                    "type": "INDIVIDUAL_TRAVELLER",
                                    "id": "34924-3A334B-C342D",
                                    "number": 2
                                }
                            ]
                        ]
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/parameter"
                        },
                        "examples": [
                            [
                                {
                                    "type": "SERVICE",
                                    "class": "FIRST"
                                },
                                {
                                    "type": "SEATING",
                                    "spotType": "LUGGAGE_SPOT"
                                }
                            ]
                        ]
                    }
                }
            },
            "parameter": {
                "x-tm": "SCOPING VALIDITY PARAMETERS",
                "type": "object",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "ORGANISATIONAL": "#/components/schemas/organisationalParameter",
                        "SEATING": "#/components/schemas/seatingParameter",
                        "DISTRIBUTION": "#/components/schemas/distributionParameter",
                        "NETWORK": "#/components/schemas/networkParameter",
                        "ROUTING": "#/components/schemas/routingParameter",
                        "SERVICE": "#/components/schemas/serviceParameter",
                        "TEMPORAL": "#/components/schemas/temporalParameter",
                        "EQUIPMENT": "#/components/schemas/equipmentParameter",
                        "CANCEL": "#/components/schemas/cancellationParameter",
                        "PAYMENT": "#/components/schemas/paymentParameter",
                        "PURCHASE": "#/components/schemas/purchaseParameter",
                        "EXECUTION": "#/components/schemas/executionParameter"
                    }
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/organisationalParameter"
                    },
                    {
                        "$ref": "#/components/schemas/seatingParameter"
                    },
                    {
                        "$ref": "#/components/schemas/distributionParameter"
                    },
                    {
                        "$ref": "#/components/schemas/networkParameter"
                    },
                    {
                        "$ref": "#/components/schemas/routingParameter"
                    },
                    {
                        "$ref": "#/components/schemas/serviceParameter"
                    },
                    {
                        "$ref": "#/components/schemas/temporalParameter"
                    },
                    {
                        "$ref": "#/components/schemas/equipmentParameter"
                    },
                    {
                        "$ref": "#/components/schemas/cancellationParameter"
                    },
                    {
                        "$ref": "#/components/schemas/paymentParameter"
                    },
                    {
                        "$ref": "#/components/schemas/purchaseParameter"
                    },
                    {
                        "$ref": "#/components/schemas/executionParameter"
                    }
                ],
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "number": {
                        "description": "reference to a specific numbered usage. If lacking, it applies to the whole travelling party.",
                        "type": "number"
                    }
                }
            },
            "equipmentParameter": {
                "x-tm": "EQUIPMENT VALIDITY PARAMETERS",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "EQUIPMENT"
                        ]
                    },
                    "id": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "name": {
                        "$ref": "#/components/schemas/shortString"
                    },
                    "description": {
                        "$ref": "#/components/schemas/longString"
                    },
                    "infoLink": {
                        "$ref": "#/components/schemas/url"
                    },
                    "image": {
                        "$ref": "#/components/schemas/url"
                    }
                }
            },
            "temporalParameter": {
                "x-tm": "TEMPORAL VALIDITY PARAMETERS",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "TEMPORAL"
                        ]
                    },
                    "startTime": {
                        "$ref": "#/components/schemas/dateTime"
                    },
                    "endTime": {
                        "$ref": "#/components/schemas/dateTime"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/normalInt"
                    },
                    "dayType": {
                        "$ref": "#/components/schemas/day"
                    }
                }
            },
            "seatingParameter": {
                "x-tm": "SEATING VALIDITY PARAMETERS",
                "type": "object",
                "required": [
                    "type",
                    "spotType",
                    "spot"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "SEATING"
                        ]
                    },
                    "spotType": {
                        "type": "string",
                        "enum": [
                            "VEHICLE_SPOT",
                            "PASSENGER_SPOT",
                            "LUGGAGE_SPOT"
                        ]
                    },
                    "deck": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "space": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "spot": {
                        "$ref": "#/components/schemas/externalReference"
                    }
                }
            },
            "networkParameter": {
                "x-tm": "NETWORK VALIDITY PARAMETERS",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "NETWORK"
                        ]
                    },
                    "location": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "line": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/externalReference"
                        }
                    }
                }
            },
            "routingParameter": {
                "x-tm": "ROUTING VALIDITY PARAMETERS",
                "type": "object",
                "required": [
                    "journeyPattern",
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "ROUTING"
                        ]
                    },
                    "journeyPattern": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/externalReference"
                        }
                    }
                }
            },
            "serviceParameter": {
                "x-tm": "SERVICE VALIDITY PARAMETERS",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "SERVICE"
                        ]
                    },
                    "product": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "asset": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "serviceJourney": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "userNeeds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/externalReference"
                        }
                    },
                    "class": {
                        "$ref": "#/components/schemas/classOfUse"
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/facility"
                        }
                    }
                }
            },
            "onboardStay": {
                "x-tm": "ONBOARD STAY",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/facility"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "description": "Permission to board early before the journey or stay on board after the journey.",
                        "properties": {
                            "description": {
                                "$ref": "#/components/schemas/longString"
                            },
                            "classOfUse": {
                                "$ref": "#/components/schemas/classOfUse"
                            },
                            "permission": {
                                "type": "boolean"
                            },
                            "duration": {
                                "$ref": "#/components/schemas/shortString"
                            }
                        }
                    }
                ]
            },
            "accommodation": {
                "x-tm": "ACCOMODATION",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/facility"
                    },
                    {
                        "type": "object",
                        "description": "A combination of accommodation characteristics available on a service, e.g. \"First Class Couchette with shower and 2 bunks\".",
                        "properties": {
                            "description": {
                                "$ref": "#/components/schemas/longString"
                            },
                            "classOfUse": {
                                "$ref": "#/components/schemas/classOfUse"
                            },
                            "name": {
                                "$ref": "#/components/schemas/shortString"
                            },
                            "gender": {
                                "type": "string",
                                "enum": [
                                    "M",
                                    "F",
                                    "X",
                                    "U"
                                ]
                            },
                            "berthType": {
                                "type": "string",
                                "enum": [
                                    "SLEEPER"
                                ]
                            },
                            "nuisanceFacility": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/shortString"
                                }
                            }
                        }
                    }
                ]
            },
            "facility": {
                "x-tm": "FACILITY",
                "type": "object",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "ONBOARD_STAY": "#/components/schemas/onboardStay",
                        "ACCOMODATION": "#/components/schemas/accommodation"
                    }
                },
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "ONBOARD_STAY",
                            "ACCOMODATION"
                        ]
                    }
                }
            },
            "distributionParameter": {
                "x-tm": "DISTRIBUTION VALIDITY PARAMETERS",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "DISTRIBUTION"
                        ]
                    },
                    "fulfilmentMethod": {
                        "$ref": "#/components/schemas/normalString"
                    },
                    "distributionChannel": {
                        "$ref": "#/components/schemas/normalString"
                    }
                }
            },
            "organisationalParameter": {
                "x-tm": "ORGANISATIONAL VALIDITY PARAMETERS",
                "required": [
                    "id",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/shortString"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "ORGANISATIONAL"
                        ]
                    },
                    "name": {
                        "$ref": "#/components/schemas/normalString"
                    },
                    "legalName": {
                        "$ref": "#/components/schemas/normalString"
                    }
                }
            },
            "cancellationParameter": {
                "x-tm": [
                    {
                        "concept": "CANCELLING"
                    },
                    {
                        "cancellationFee": "lacking"
                    },
                    {
                        "cancellationAllowed": "cancellationAllowed"
                    },
                    {
                        "cancellationFeePercentage": "lacking"
                    }
                ],
                "type": "object",
                "description": "conditions regarding cancellation of a purchased package",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "CANCEL"
                        ]
                    },
                    "cancellationAllowed": {
                        "type": "boolean",
                        "description": "is it possible to cancel this package?"
                    },
                    "cancellationFee": {
                        "description": "amount of money you have to pay when you cancel this purchased package",
                        "$ref": "#/components/schemas/amountOfMoney"
                    },
                    "cancellationFeePercentage": {
                        "description": "percentage of the offered price you have to pay when you cancel this purchased package",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 100
                    }
                }
            },
            "paymentParameter": {
                "x-tm": "lacking",
                "type": "object",
                "description": "conditions regarding payment<br> _DEPOSIT_ - in case the TO demands a deposit before usage. Requesting and refunding should be done using the /processes/refund/execute endpoint<br> _PAY_WHEN_FINISHED_ - in case the TO demands a direct payment after usage, automatically done by the MP<br> _UPFRONT_ - in case the TO demands a upfront payment before usage. The payment should be made in the purchase phase<br> The MP must settle the payment to the TO before the package can be started (using START).<br> _SUBSCRIPTION_ - in case the TO demands a subscription, to have some kind of guarantee for payment<br>",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "PAYMENT"
                        ]
                    },
                    "momentOfPayment": {
                        "type": "string",
                        "enum": [
                            "DEPOSIT",
                            "PAY_WHEN_FINISHED",
                            "UPFRONT",
                            "SUBSCRIPTION"
                        ]
                    },
                    "deposit": {
                        "$ref": "#/components/schemas/amountOfMoney",
                        "description": "the amount of money to pay as a deposit."
                    }
                }
            },
            "purchaseParameter": {
                "x-tm": [
                    {
                        "concept": "PURCHASE WINDOW"
                    },
                    {
                        "maximumPeriodBeforeDeparture": "MaximumPeriodBeforeDeparture"
                    },
                    {
                        "requiredLicenseTypes": "ENTITLEMENT REQUIRED"
                    }
                ],
                "type": "object",
                "description": "specify required information to complete a purchase",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "PURCHASE"
                        ]
                    },
                    "maximumPeriodBeforeDeparture": {
                        "$ref": "#/components/schemas/longInt",
                        "description": "Maximum time in minutes that an asset can be reserved before a rental begins."
                    },
                    "requiredLicenseTypes": {
                        "type": "array",
                        "description": "ONE of these licenses is required to operate the asset",
                        "maxItems": 5,
                        "items": {
                            "$ref": "#/components/schemas/licenseType"
                        }
                    }
                }
            },
            "executionParameter": {
                "x-tm": "lacking",
                "description": "conditions during the package",
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "EXECUTION"
                        ]
                    },
                    "codeOfConduct": {
                        "type": "array",
                        "description": "code of conduct items during traveling<br> _NO_PETS_ - no pets are allowed in the asset<br> _NO_SMOKING_ - smoking is not allowed in the asset<br> _NO_TRAVEL_ABROAD_ - it is not allowed to enter another country with this asset<br> _NO_UNDERGROUND_PARKING_ - it is not allowed to park the asset underground",
                        "maxItems": 5,
                        "items": {
                            "type": "string",
                            "enum": [
                                "NO_PETS",
                                "NO_SMOKING",
                                "NO_TRAVEL_ABROAD",
                                "NO_UNDERGROUND_PARKING"
                            ]
                        }
                    },
                    "returnStations": {
                        "type": "array",
                        "description": "to one of these stations the asset must be returned",
                        "maxItems": 10,
                        "items": {
                            "$ref": "#/components/schemas/externalReference"
                        }
                    },
                    "returnAreas": {
                        "type": "array",
                        "description": "in one of these areas the asset must be returned",
                        "maxItems": 10,
                        "items": {
                            "$ref": "#/components/schemas/geojsonGeometry"
                        }
                    },
                    "returnZones": {
                        "type": "array",
                        "description": "in one of these externally described zones the asset must be returned",
                        "maxItems": 10,
                        "items": {
                            "$ref": "#/components/schemas/externalReference"
                        }
                    },
                    "requiredAncillaries": {
                        "type": "array",
                        "description": "required ancillaries to operate the asset (like a helmet, TYPE=ANCILLARY)",
                        "maxItems": 25,
                        "items": {
                            "$ref": "#/components/schemas/externalReference"
                        }
                    }
                }
            },
            "guarantee": {
                "x-tm": "TRAVEL GUARANTEE",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organisation": {
                        "description": "guaranteeing organisation",
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "type": {
                        "type": "string",
                        "description": "_ALTERNATIVE_JOURNEY_ - A TRIP REPAIR GUARANTEE that if a designated SERVICE JOURNEY is not available then alternative SERVICE JOURNEY will be provided. -| (EASEMENT_REDRESS, PRODUCT EXCHANGE REDRESS) _HOME_LEG_ - A TRIP REPAIR GUARANTEE that if a the passenger is unable to reach their destination by public transport because of a delay in services, a taxi to their destination will be provided. -| (TAXI HOME REDRESS) _RETURN_TO_ORIGIN_ - A TRIP REPAIR GUARANTEE that if a designated SERVICE JOURNEY cannot be completed, then the passenger will be returned to their origin stop. -| (RETURN TO ORIGIN REDRESS)\n_ON_TIME_TRAVEL_ - A TRAVEL QUALITY GUARANTEE that compensation will be offered if repeated travel within a certain TIME INTERVAL fails to meet certain performance targets as to arrival times. -| (ALL REDRESSES, needs TEMPORAL PARAMETER) _TRIP_ON_TIME_ - A TRAVEL QUALITY GUARANTEE that compensation will be offered if a trip fails to meet certain performance targets as to arrival times. -| (ALL REDRESSES, needs TEMPORAL PARAMETER) _FACILITIES_AVAILABLE_ - A TRAVEL QUALITY GUARANTEE that compensation will be offered if a facility or service (e.g. WIFI, Meal, seat reservation, etc) is not available or fails to meet a specified quality. -| (ALL REDRESSES, needs SERVICE PARAMETER) _MOBILITY_ACCOMODATION_ - A TRAVEL QUALITY GUARANTEE that special accommodation will be provided in the event of severe disruption. -| (ALL REDRESSES, needs SERVICE PARAMETER) _MOBILITY_ASSISTANCE_ - A TRAVEL QUALITY GUARANTEE that mobility assistance will be provided. -| (ALL REDRESSES, needs SERVICE PARAMETER) _PASSENGER_SUPPORT_ - A TRAVEL QUALITY GUARANTEE that assistance will be provided, for example, if a disruption occurs or a that stations are staffed. (ALL REDRESSES)\n_DISRUPTION_INFORMATION_ - An INFORMATION QUALITY GUARANTEE that information on disruptions will be made available. (ALL REDRESSES) _REDRESS_INFORMATION_ - An INFORMATION QUALITY GUARANTEE that information on available compensation or other statutory and discretionary redress options will be made available to the passenger. (ALL REDRESSES) _BEST_FARE_INFORMATION_ - An INFORMATION QUALITY GUARANTEE that information on the best value fares will be made available (ALL REDRESSES)\n_GENERAL_TRAVEL_ - An arbitrary OTHER TRAVEL GUARANTEE describing some special guarantee not covered by the normal categories (ALL REDRESSES) _MEDIA_REPLACEMENT_ - An OTHER GUARANTEE that a replacement media will be provided if the original becomes unusable. _REFUND_UNUSED_ANCILLARIES_ - unused ancillaries will be refunded _REFUND_WHEN_CANCELLED_ - when cancelled before start, a refund will be scheduled",
                        "enum": [
                            "ALTERNATIVE_JOURNEY",
                            "HOME_LEG",
                            "RETURN_TO_ORIGIN",
                            "ON_TIME_TRAVEL",
                            "TRIP_ON_TIME",
                            "FACILITIES_AVAILABLE",
                            "MOBILITY_ACCOMODATION",
                            "MOBILITY_ASSISTANCE",
                            "PASSENGER_SUPPORT",
                            "DISRUPTION_INFORMATION",
                            "REDRESS_INFORMATION",
                            "BEST_FARE_INFORMATION",
                            "GENERAL_TRAVEL",
                            "MEDIA_REPLACEMENT",
                            "REFUND_UNUSED_ANCILLARIES",
                            "REFUND_WHEN_CANCELLED"
                        ]
                    },
                    "parameters": {
                        "type": "array",
                        "description": "parameters needed to describe the guarantee, like a temporalParameter for onTimeTravel",
                        "items": {
                            "$ref": "#/components/schemas/parameter"
                        }
                    },
                    "redresses": {
                        "type": "array",
                        "description": "these redresses can also contain the subclass 'paymentDetail' (from the Payment extension)",
                        "items": {
                            "$ref": "#/components/schemas/redress"
                        }
                    }
                }
            },
            "redress": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonFeature"
                    },
                    {
                        "type": "object",
                        "x-tm": "TRAVEL REDRESS",
                        "description": "-| whenever a redress is applied, detailed information SHOULD be added in the package's links section, with ref 'redress'.<br> This can be a reference to digital vouchers, or references to the /collections/payments/items endpoint.",
                        "properties": {
                            "redressType": {
                                "type": "string",
                                "description": "_PRODUCT_EXCHANGE_ - A TRAVEL REDRESS comprising an exchange of FARE PRODUCT to allow the user to make an alternative journey on the same or a later date. _EASEMENT_ - A TRAVEL REDRESS comprising permission to travel on other services in the network for free or at a reduced fare. _TAXI_HOME_ - A TRAVEL REDRESS comprising a free taxi ride to the passenger's destination if the planned trip fails to make the last connection of the day with public transport. _RETURN_TO_ORIGIN_ - A TRAVEL REDRESS comprising a return to the passenger's original point of departure. So they can restart the journey by other means.\n_ACCESS_RIGHT_REBATE_ - A REBATE REDRESS comprising a travel vouchers or other tokens(e.g. frequent flier points) to consume future travel or services. _MONETARY_REBATE_ - A REBATE REDRESS comprising a payment of a monetary amount in cash or as a credit. _REFUND_ - A COMPENSATION GIVEN REDRESS comprising the refund of monetary value of some or all of the passenger's ticket. _REFRESHMENT_ - A PASSENGER SUPPORT REDRESS comprising refreshment or vouchers for refreshment. _ACCOMODATION_ - A PASSENGER SUPPORT REDRESS comprising accommodation in a hotel or other lodging.",
                                "enum": [
                                    "PRODUCT_EXCHANGE",
                                    "EASEMENT",
                                    "TAXI_HOME",
                                    "RETURN_TO_ORIGIN",
                                    "ACCESS_RIGHT_REBATE",
                                    "MONETARY_REBATE",
                                    "REFUND",
                                    "REFRESHMENT",
                                    "ACCOMODATION"
                                ]
                            },
                            "product": {
                                "$ref": "#/components/schemas/externalReference"
                            },
                            "reimbursementMoment": {
                                "type": "string"
                            },
                            "typeOfPayment": {
                                "type": "string"
                            },
                            "refundPercentage": {
                                "type": "number"
                            },
                            "maxPayment": {
                                "$ref": "#/components/schemas/amountOfMoney"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/geojsonFeatureProperties"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "redressOptionId": {
                                "$ref": "#/components/schemas/uuid"
                            },
                            "redress": {
                                "$ref": "#/components/schemas/redress"
                            },
                            "compensations": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/financialDetail"
                                }
                            }
                        }
                    }
                ]
            },
            "asset": {
                "x-tm": "VEHICLE, PARKING BAY, CYCLE STORAGE EQUIPMENT, VEHICLE CHARGING EQUIPMENT",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonFeature"
                    },
                    {
                        "description": "the asset that can by applied to execute a leg.",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "ASSET"
                                ]
                            },
                            "id": {
                                "$ref": "#/components/schemas/externalReference",
                                "description": "Identifier of an asset. Can be an external reference, but also a (internal) ID"
                            },
                            "visualId": {
                                "$ref": "#/components/schemas/shortString",
                                "description": "for instance, a license plate or seat number."
                            },
                            "product": {
                                "$ref": "#/components/schemas/externalReference"
                            },
                            "mode": {
                                "$ref": "#/components/schemas/mode"
                            },
                            "subMode": {
                                "$ref": "#/components/schemas/normalString",
                                "description": "a more precise classification of the asset, like 'cargo bike', 'public bus', 'coach bus', 'office bus', 'water taxi',  'segway'. This is mandatory when using 'OTHER' as class."
                            },
                            "eco": {
                                "$ref": "#/components/schemas/ecoValues"
                            },
                            "cargo": {
                                "$ref": "#/components/schemas/cargoLimits"
                            },
                            "appSupport": {
                                "$ref": "#/components/schemas/appSupport"
                            },
                            "equipment": {
                                "type": "array",
                                "description": "list of external references",
                                "maxItems": 100,
                                "items": {
                                    "$ref": "#/components/schemas/externalReference"
                                }
                            },
                            "extraInfo": {
                                "$ref": "#/components/schemas/customProperties"
                            }
                        }
                    }
                ]
            },
            "assetState": {
                "x-tm": "lacking",
                "type": "object",
                "description": "the state of the asset, where is it, etc",
                "additionalProperties": false,
                "properties": {
                    "mileage": {
                        "$ref": "#/components/schemas/float",
                        "description": "the current mileage of the asset, in km"
                    },
                    "stateOfCharge": {
                        "$ref": "#/components/schemas/shortInt",
                        "description": "percentage of charge available / fuel level (battery, petrol tank)"
                    },
                    "maxRange": {
                        "$ref": "#/components/schemas/float",
                        "description": "maximum range in meters"
                    }
                }
            },
            "cargoLimits": {
                "x-tm": "LUGGAGE ALLOWANCE",
                "type": "object",
                "description": "applicable properties to specify cargo space/loads",
                "properties": {
                    "description": {
                        "$ref": "#/components/schemas/longString",
                        "description": "describes options to carry cargo, should match Content-Language"
                    },
                    "volume": {
                        "$ref": "#/components/schemas/normalInt",
                        "description": "the volume in liters of the cargo"
                    },
                    "weight": {
                        "$ref": "#/components/schemas/normalInt",
                        "description": "the weight in kilograms of the cargo"
                    }
                }
            },
            "damage": {
                "x-tm": "lacking",
                "type": "object",
                "description": "A damage of the asset.",
                "additionalProperties": false,
                "required": [
                    "assetComponent",
                    "description"
                ],
                "properties": {
                    "assetComponent": {
                        "type": "string",
                        "description": "Part/Component of the asset affected. If OTHER is specified the description needs to provide more detail as to what part/component is affected.<br>",
                        "enum": [
                            "FRONT",
                            "REAR",
                            "LEFT",
                            "RIGHT",
                            "TOP",
                            "BOTTOM",
                            "INTERIOR",
                            "TIRE",
                            "ANCILLARY",
                            "OTHER"
                        ]
                    },
                    "description": {
                        "$ref": "#/components/schemas/longString",
                        "description": "Description of the damage."
                    },
                    "pictures": {
                        "type": "array",
                        "description": "URL where pictures of the damage can be accessed. Any special characters in the URL must be correctly escaped.",
                        "maxItems": 10,
                        "items": {
                            "$ref": "#/components/schemas/url"
                        }
                    }
                }
            },
            "ecoValues": {
                "x-tm": "lacking",
                "type": "object",
                "description": "applicable properties to specify ecological/environmental aspects. Derived from GBFS.",
                "properties": {
                    "energyLabel": {
                        "type": "string",
                        "description": "Energy efficiency label",
                        "enum": [
                            "A",
                            "B",
                            "C",
                            "D",
                            "E"
                        ]
                    },
                    "ecoLabel": {
                        "type": "array",
                        "description": "see https://github.com/MobilityData/gbfs/blob/v2.3/gbfs.md",
                        "maxItems": 3,
                        "items": {
                            "type": "object",
                            "properties": {
                                "ecoSticker": {
                                    "$ref": "#/components/schemas/shortString"
                                },
                                "countryCode": {
                                    "$ref": "#/components/schemas/country"
                                }
                            }
                        }
                    },
                    "co2Emission": {
                        "$ref": "#/components/schemas/float",
                        "description": "the emission of grammes CO2 per km"
                    }
                }
            },
            "mode": {
                "x-tm": [
                    {
                        "concept": "MODE"
                    }
                ],
                "type": "string",
                "description": "These classes are taken from the NeTeX standard, but ALL and UNKNOWN are removed. On the other hand OTHER and PARKING are added.",
                "enum": [
                    "AIR",
                    "BUS",
                    "TROLLEYBUS",
                    "TRAM",
                    "COACH",
                    "RAIL",
                    "INTERCITYRAIL",
                    "URBANRAIL",
                    "METRO",
                    "WATER",
                    "CABLEWAY",
                    "FUNICULAR",
                    "TAXI",
                    "SELFDRIVE",
                    "FOOT",
                    "BICYCLE",
                    "MOTORCYCLE",
                    "CAR",
                    "SHUTTLE",
                    "OTHER",
                    "PARKING",
                    "MOPED",
                    "STEP",
                    "FERRY"
                ]
            },
            "card": {
                "x-tm": "CUSTOMER PAYMENT MEANS, MEDIUM APPLICATION INSTANCE",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/cardType"
                    },
                    {
                        "type": "object",
                        "description": "Any kind of card that isn't a license, only provide the cards that are required",
                        "required": [
                            "type",
                            "cardNumber"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "CARD"
                                ]
                            },
                            "cardNumber": {
                                "$ref": "#/components/schemas/externalReference",
                                "description": "number of the card, like ID number, credit card or bank account number"
                            },
                            "description": {
                                "$ref": "#/components/schemas/shortString",
                                "description": "description of the card"
                            },
                            "additionalNumber": {
                                "$ref": "#/components/schemas/shortString",
                                "description": "additional number, like CVC code or IBAN code"
                            },
                            "endValidity": {
                                "$ref": "#/components/schemas/date",
                                "description": "this card is valid until this date"
                            },
                            "country": {
                                "$ref": "#/components/schemas/country"
                            }
                        }
                    }
                ]
            },
            "cardType": {
                "x-tm": "TYPE OF PAYMENT METHOD, MEDIUM ACCESS DEVICE",
                "type": "object",
                "description": "A generic description of a CARD",
                "additionalProperties": true,
                "required": [
                    "type",
                    "id"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/externalReference",
                        "description": "external reference to address the card used."
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "CARD_TYPE"
                        ]
                    },
                    "cardType": {
                        "type": "string",
                        "description": "The broad category of card<br> DISCOUNT - discount card, can be applied in the purchase process to get rebate<br> TRAVEL - (external) travel card, possibly paid for in other context, but also monthly, weekly or day-cards<br> BANK - bank card<br> CREDIT - credit card<br> ID - identification card, like an ID card<br> PASSPORT - passport to identify yourself<br> OTHER - unspecified",
                        "enum": [
                            "DISCOUNT",
                            "TRAVEL",
                            "BANK",
                            "CREDIT",
                            "ID",
                            "PASSPORT",
                            "OTHER"
                        ]
                    },
                    "subType": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "For use in case of OTHER. Can be used in bilateral agreements."
                    },
                    "relatedProduct": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "transportOrganisations": {
                        "type": "array",
                        "maxItems": 15,
                        "description": "references to accepting parties, only if applicable",
                        "items": {
                            "$ref": "#/components/schemas/externalReference"
                        }
                    }
                }
            },
            "customer": {
                "x-tm": "CUSTOMER",
                "description": "A MaaS user that wishes to purchase a package, only use the fields required by purchase conditions",
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/externalReference",
                        "description": "The identifier the MP uses to identify the customer. Could be an external referenced ID, like a ABT account number"
                    },
                    "initials": {
                        "$ref": "#/components/schemas/tinyString",
                        "description": "Initials of the customer"
                    },
                    "firstName": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "First name of the customer"
                    },
                    "lastName": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "Last name of the customer"
                    },
                    "middleName": {
                        "$ref": "#/components/schemas/tinyString",
                        "description": "Middle name of the customer"
                    },
                    "prefix": {
                        "$ref": "#/components/schemas/tinyString",
                        "description": "prefix of the customer, like titles"
                    },
                    "postfix": {
                        "$ref": "#/components/schemas/tinyString",
                        "description": "postfix of the customer, like titles"
                    },
                    "phoneNumber": {
                        "$ref": "#/components/schemas/normalString"
                    },
                    "email": {
                        "$ref": "#/components/schemas/normalString",
                        "description": "the email address of the customer"
                    },
                    "dateOfBirth": {
                        "$ref": "#/components/schemas/date"
                    },
                    "placeOfBirth": {
                        "$ref": "#/components/schemas/shortString"
                    },
                    "countryOfBirth": {
                        "$ref": "#/components/schemas/shortString"
                    },
                    "address": {
                        "$ref": "#/components/schemas/postalAddress"
                    },
                    "photo": {
                        "type": "string",
                        "maxLength": 10000,
                        "description": "base64 encoded",
                        "x-format": "byte-array"
                    },
                    "extraInfo": {
                        "$ref": "#/components/schemas/customProperties"
                    }
                }
            },
            "license": {
                "x-tm": "ACCEPTED DRIVER PERMIT",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/licenseType"
                    },
                    {
                        "type": "object",
                        "description": "driver or usage license for a specific user. Contains the number and the assetType you're allowed to operate (e.g. driver license for CAR)",
                        "required": [
                            "number",
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "LICENSE"
                                ]
                            },
                            "licenseNumber": {
                                "$ref": "#/components/schemas/shortString"
                            },
                            "endValidity": {
                                "$ref": "#/components/schemas/date"
                            }
                        }
                    }
                ]
            },
            "licenseType": {
                "x-tm": "TYPE OF DRIVER PERMIT",
                "type": "object",
                "description": "A category of license to use a certain asset class",
                "additionalProperties": true,
                "required": [
                    "mode",
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "LICENSE_TYPE"
                        ]
                    },
                    "modes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/mode"
                        }
                    },
                    "licenseCode": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "in most countries a driver license has also a code. As TO you can exactly verify, based on this code if the license allows to operate it's assets, if the assetType too generic."
                    },
                    "issuingCountry": {
                        "$ref": "#/components/schemas/country"
                    }
                }
            },
            "assetReference": {
                "type": "object",
                "required": [
                    "type",
                    "id"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "ASSET"
                        ]
                    },
                    "id": {
                        "$ref": "#/components/schemas/externalReference"
                    }
                }
            },
            "individualTraveller": {
                "x-tm": "INDIVIDUAL TRAVELLER",
                "type": "object",
                "required": [
                    "id",
                    "type"
                ],
                "description": "A generic description of a traveler, not including any identifying information",
                "additionalProperties": true,
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "INDIVIDUAL_TRAVELLER"
                        ]
                    },
                    "isValidated": {
                        "type": "boolean",
                        "description": "Whether this traveler's identity and properties have been verified by the MaaS provider"
                    },
                    "age": {
                        "$ref": "#/components/schemas/shortInt",
                        "description": "Age of the traveler, may be approximate"
                    },
                    "fullName": {
                        "$ref": "#/components/schemas/normalString",
                        "description": "the name of the traveller, can be used to validate against ID cards"
                    },
                    "profileReference": {
                        "$ref": "#/components/schemas/shortString"
                    },
                    "customerReference": {
                        "$ref": "#/components/schemas/externalReference"
                    }
                }
            },
            "categorizedFareStructure": {
                "type": "object",
                "properties": {
                    "parameterAssignment": {
                        "$ref": "#/components/schemas/parameterAssignment"
                    },
                    "fare": {
                        "$ref": "#/components/schemas/fareStructure"
                    }
                },
                "examples": [
                    {
                        "parameterAssigment": {
                            "travellers": [
                                {
                                    "type": "USER_PROFILE",
                                    "ageGroup": "ADULT"
                                }
                            ],
                            "parameters": [
                                {
                                    "type": "SERVICE",
                                    "class": "FIRST"
                                }
                            ]
                        },
                        "fareStructure": {
                            "elements": [
                                {
                                    "type": "FLEX",
                                    "amount": 0.5,
                                    "currencyCode": "EUR",
                                    "unit": "ZONE",
                                    "interval": {
                                        "from": 1,
                                        "to": 3
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "fareStructure": {
                "x-tm": "TARIFF",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/amountOfMoney"
                    },
                    {
                        "type": "object",
                        "description": "the total fare is the sum of all parts, except for the 'MAX' fareStructureElement. This one descripes the maximum price for the complete leg.",
                        "additionalProperties": true,
                        "required": [
                            "elements"
                        ],
                        "properties": {
                            "estimated": {
                                "type": "boolean",
                                "description": "is this fare an estimation?"
                            },
                            "description": {
                                "$ref": "#/components/schemas/normalString",
                                "description": "user friendly description of the fare (e.g. 'full fare'), should match Content-Language"
                            },
                            "elements": {
                                "type": "array",
                                "maxItems": 25,
                                "items": {
                                    "$ref": "#/components/schemas/fareStructureElement"
                                }
                            }
                        }
                    }
                ]
            },
            "fareStructureElement": {
                "x-tm": [
                    {
                        "concept": "TIME INTERVAL PRICE, TIME UNIT PRICE, GEOGRAPHICAL UNIT PRICE, GEOGRAPHICAL INTERVAL PRICE, LIMITING RULE"
                    },
                    {
                        "priceLevel": "lacking"
                    },
                    {
                        "minimumPrice": "LIMITING RULE.MinimumPrice"
                    },
                    {
                        "maximumPrice": "LIMITING RULE.MaximumPrice"
                    }
                ],
                "description": "this describes a part of the fare (or discount). It contains a for instance the startup costs (fixed) or the flex part (e.g. 1.25 EUR per 2.0 MILES). The amount is tax included. In case of discounts, the values are negative. With 'MAX' you can specify e.g. a maximum of 15 euro per day. Percentage is mainly added for discounts. The `scale` properties create the ability to communicate scales (e.g. the first 4 kilometers you've to pay EUR 0.35 per kilometer, the kilometers 4 until 8 EUR 0.50 and above it EUR 0.80 per kilometer).",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/amountOfMoney"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "type of fare structure element. If there is only one fare structure elements and this field is missing, it should be assumed it is 'FIXED'. In all other situations this field is mandatory.<br> _FIXED_ fixed element, independend on the duration or distance traveled. _FLEX_ flex element, dependend on the duration or distance of the package. Can be tiered. _YIELD_ yield price. Dependend on external factors the price will be determined. The amount of money can fluctuate _MAX_ capping mechanism. Calculate the price using the sum of the FIXED and FLEX elements, cap it using this rule. Max 1 per fare structure.",
                                "enum": [
                                    "FIXED",
                                    "FLEX",
                                    "YIELD",
                                    "MAX"
                                ]
                            },
                            "priceLevel": {
                                "type": "string",
                                "description": "is this the default price or is this an additional part (discount, price surge). <br> _DEFAULT_ the default price for this price part<br> _DISCOUNT_ the amount must always be negative <br> _SURGE_ the amount must always be positive <br> This also means, that when you're working with discounts or surges, you have to deliver 2 fare structure elements, one for the default price and one for the discount/surge. This can be used in combination with as well the fixed price parts as with the flex price parts.",
                                "enum": [
                                    "DEFAULT",
                                    "DISCOUNT",
                                    "SURGE"
                                ]
                            },
                            "units": {
                                "type": "string",
                                "description": "in case of 'FLEX' mandatory, otherwise not allowed. E.g. 0.5 EUR per HOUR",
                                "enum": [
                                    "KM",
                                    "SECOND",
                                    "MINUTE",
                                    "HOUR",
                                    "MILE",
                                    "PERCENTAGE",
                                    "ZONE"
                                ]
                            },
                            "amountOfUnits": {
                                "$ref": "#/components/schemas/float",
                                "description": "the number of km, seconds etc. Mandatory when the type is 'FLEX', otherwise not allowed. In case of 0.5 EUR per 15 MINUTES, the amount is 0.5, the `amountOfUnits` must contain 15 and `units` MINUTES."
                            },
                            "interval": {
                                "$ref": "#/components/schemas/interval"
                            },
                            "validity": {
                                "$ref": "#/components/schemas/temporalParameter"
                            },
                            "name": {
                                "$ref": "#/components/schemas/normalString",
                                "description": "an optional description of this fare structure element."
                            },
                            "class": {
                                "type": "string",
                                "description": "class of this fare structure element. Could be FARE or ANCILLARY<br> _FARE_ this fare structure element is related to the distance or time of usage.<br> _ANCILLARY_ this fare structure element is related to the rental of one or more ancillaries.",
                                "default": "FARE",
                                "enum": [
                                    "FARE",
                                    "ANCILLARY"
                                ]
                            },
                            "minimumPrice": {
                                "$ref": "#/components/schemas/float",
                                "description": "The minimum price, in the same currency as amount. Place in `amount` the most likely value."
                            },
                            "maximumPrice": {
                                "$ref": "#/components/schemas/float",
                                "description": "The minimum price, in the same currency as amount. Place in `amount` the most likely value."
                            },
                            "assetState": {
                                "type": "string",
                                "description": "in case the fare is dependent on being in use or being paused, this field must be used. Default IN_USE",
                                "enum": [
                                    "IN_USE",
                                    "PAUSED"
                                ],
                                "default": "IN_USE"
                            },
                            "extraInfo": {
                                "$ref": "#/components/schemas/customProperties"
                            }
                        }
                    }
                ]
            },
            "interval": {
                "x-tm": "TIME INTERVAL (in case UNITS = minutes or hours)",
                "type": "object",
                "required": [
                    "from",
                    "to"
                ],
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/float",
                        "description": "in case of scaling, this is the bottom value (f.x. in the first hour 3 CAD, the `interval.from` should contain 0 and the `interval.units` HOUR). When `to` is used, but this field is missing, it should be assumed it is a 0."
                    },
                    "to": {
                        "$ref": "#/components/schemas/float",
                        "description": "the upper value of the scale (f.x. 3 CAD in the first hour, this field should contain 1, `interval.from` 0 and `interval.units` HOUR)"
                    },
                    "units": {
                        "type": "string",
                        "description": "the units is normally the same as the **interval.units**, but it doesn't have to be. For instance, you could pay 1 EUR per kilometer for the first hour.",
                        "enum": [
                            "KM",
                            "MILE",
                            "HOUR",
                            "MINUTE",
                            "ZONE"
                        ]
                    }
                }
            },
            "postalAddress": {
                "x-tm": "POSTAL ADDRESS",
                "type": "object",
                "description": "address parts, where addressLine1 and 2 should contain the complete address, matches Content-Language",
                "additionalProperties": false,
                "required": [
                    "addressLine1",
                    "addressLine2"
                ],
                "properties": {
                    "placeId": {
                        "$ref": "#/components/schemas/uuid"
                    },
                    "addressLine1": {
                        "$ref": "#/components/schemas/longString",
                        "description": "contains street, housenumber & additions example street 18, 2nd floor, 18-B33"
                    },
                    "addressLine2": {
                        "$ref": "#/components/schemas/longString",
                        "description": "city or town, principal subdivision such as province, state or county Smallcity, Pinetree county"
                    },
                    "street": {
                        "$ref": "#/components/schemas/normalString",
                        "description": "street, consistent with addressLine1"
                    },
                    "houseNumber": {
                        "$ref": "#/components/schemas/normalInt",
                        "description": "house number, consistent with addressLine1"
                    },
                    "houseNumberAddition": {
                        "$ref": "#/components/schemas/tinyString",
                        "description": "the additional part of the house number (f.x. 13bis, where 'bis' is the additional part), consistent with addressLine1"
                    },
                    "postalCode": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "the postal code, whenever available"
                    },
                    "city": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "specified city or town, consistent with addressLine2"
                    },
                    "province": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "province or region, consistent with addressLine2"
                    },
                    "state": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "state, consistent with addressLine2"
                    },
                    "country": {
                        "$ref": "#/components/schemas/country"
                    },
                    "additionalInfo": {
                        "$ref": "#/components/schemas/longString",
                        "description": "additional information to find the address (f.x. just around the corner)"
                    }
                },
                "examples": [
                    {
                        "id": "PA:fdb151f2-bcd6-4b2a-9998-6c6a2ca8b66d",
                        "type": "POSTAL_ADDRESS",
                        "addressLine1": "Clearwater road 18",
                        "addressLine2": "Muddycity X2433"
                    }
                ]
            },
            "appSupport": {
                "x-tm": "lacking",
                "type": "object",
                "description": "attributes to display/use in an external app.",
                "properties": {
                    "displayName": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "displayable name for this asset"
                    },
                    "description": {
                        "$ref": "#/components/schemas/longString",
                        "description": "the description of the asset"
                    },
                    "image": {
                        "$ref": "#/components/schemas/url",
                        "description": "Link to an image of the asset"
                    },
                    "icon": {
                        "$ref": "#/components/schemas/url",
                        "description": "Link to an icon of the asset"
                    },
                    "accessMethods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/typeOfTravelDocument"
                        },
                        "description": "how this asset can be opened"
                    }
                }
            },
            "binaryAccessInfo": {
                "x-tm": "lacking",
                "description": "Binary information, like a image or certificate",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/travelDocument"
                    },
                    {
                        "type": "object",
                        "required": [
                            "base64"
                        ],
                        "properties": {
                            "base64": {
                                "$ref": "#/components/schemas/longString",
                                "description": "base 64 QR code"
                            },
                            "version": {
                                "$ref": "#/components/schemas/tinyString"
                            }
                        }
                    }
                ]
            },
            "deeplink": {
                "x-tm": [
                    {
                        "concepts": "TRAVEL DOCUMENT"
                    }
                ],
                "description": "deeplink info",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/travelDocument"
                    },
                    {
                        "type": "object",
                        "required": [
                            "url"
                        ],
                        "properties": {
                            "url": {
                                "description": "the base deeplink url for the MP app. Can be extended by the 'knownParamaters'. Including the scheme (mp1.app://something/?auth=sdfkjhrkjsdf003df38=dfsdf)",
                                "$ref": "#/components/schemas/url"
                            },
                            "knownParameters": {
                                "type": "array",
                                "maxItems": 25,
                                "items": {
                                    "$ref": "#/components/schemas/shortString"
                                },
                                "examples": [
                                    [
                                        "return-url",
                                        "error-url",
                                        "error-code",
                                        "error-description"
                                    ]
                                ]
                            }
                        }
                    }
                ]
            },
            "digitalTicket": {
                "x-tm": [
                    {
                        "concept": "TRAVEL DOCUMENT"
                    }
                ],
                "description": "Arbitrary data the TO may pass along the ticket to the client",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/travelDocument"
                    },
                    {
                        "type": "object",
                        "required": [
                            "url"
                        ],
                        "properties": {
                            "url": {
                                "$ref": "#/components/schemas/url",
                                "description": "download url for html/pdf"
                            }
                        }
                    }
                ]
            },
            "eKey": {
                "x-tm": "TRAVEL DOCUMENT",
                "description": "Axa EKey information",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/travelDocument"
                    },
                    {
                        "type": "object",
                        "required": [
                            "ekey",
                            "lock"
                        ],
                        "properties": {
                            "ekey": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "key": {
                                        "$ref": "#/components/schemas/longString",
                                        "description": "certificate"
                                    },
                                    "passkey": {
                                        "$ref": "#/components/schemas/longString",
                                        "description": "one time pass key"
                                    }
                                }
                            },
                            "lock": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "bdAddress": {
                                        "$ref": "#/components/schemas/longString",
                                        "description": "physical address"
                                    },
                                    "deviceName": {
                                        "$ref": "#/components/schemas/normalString",
                                        "description": "how it advertises itself"
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "otherAccessInfo": {
                "x-tm": [
                    {
                        "concept": "lacking"
                    }
                ],
                "description": "Generic travelDocument, non-standardized (yet)",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/customProperties"
                    }
                ]
            },
            "travelDocument": {
                "x-tm": "TRAVEL DOCUMENT",
                "type": "object",
                "discriminator": {
                    "propertyName": "travelDocumentType",
                    "mapping": {
                        "PDF": "#/components/schemas/digitalTicket",
                        "HTML": "#/components/schemas/digitalTicket",
                        "DEEPLINK": "#/components/schemas/deeplink",
                        "AXA_EKEY_OTP": "#/components/schemas/eKey",
                        "BLUETOOTH": "#/components/schemas/otherAccessInfo",
                        "NFC": "#/components/schemas/otherAccessInfo",
                        "QR": "#/components/schemas/binaryAccessInfo",
                        "AZTEC": "#/components/schemas/binaryAccessInfo",
                        "BARCODE": "#/components/schemas/binaryAccessInfo",
                        "CERTIFICATE": "#/components/schemas/binaryAccessInfo",
                        "PHYSICAL_KEY": "#/components/schemas/otherAccessInfo",
                        "TOMP_API": "#/components/schemas/otherAccessInfo",
                        "EXTERNAL_CARD": "#/components/schemas/otherAccessInfo",
                        "NONE": "#/components/schemas/otherAccessInfo"
                    }
                },
                "required": [
                    "startvalidity",
                    "endvalidity",
                    "travelDocumentType"
                ],
                "properties": {
                    "startvalidity": {
                        "$ref": "#/components/schemas/dateTime"
                    },
                    "endvalidity": {
                        "$ref": "#/components/schemas/dateTime"
                    },
                    "travelDocumentType": {
                        "$ref": "#/components/schemas/typeOfTravelDocument"
                    }
                }
            },
            "typeOfTravelDocument": {
                "x-tm": [
                    {
                        "concept": "TYPE OF TRAVEL DOCUMENT"
                    }
                ],
                "type": "string",
                "description": "how this type is implemented?<br>",
                "enum": [
                    "PDF",
                    "HTML",
                    "DEEPLINK",
                    "AXA_EKEY_OTP",
                    "BLUETOOTH",
                    "NFC",
                    "QR",
                    "AZTEC",
                    "BARCODE",
                    "CERTIFICATE",
                    "TOMP_API",
                    "PHYSICAL_KEY",
                    "EXTERNAL_CARD",
                    "NONE"
                ]
            },
            "externalReference": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/normalString"
                    }
                ]
            },
            "basePoint": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "examples": [
                    [
                        4.53432,
                        55.324523
                    ]
                ]
            },
            "geojsonPoint": {
                "type": "object",
                "description": "Geojson Coordinate",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonGeometry"
                    },
                    {
                        "type": "object",
                        "required": [
                            "coordinates"
                        ],
                        "properties": {
                            "coordinates": {
                                "$ref": "#/components/schemas/basePoint"
                            }
                        }
                    }
                ]
            },
            "geojsonLine": {
                "type": "object",
                "description": "An array of WGS84 coordinate pairs",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonGeometry"
                    },
                    {
                        "type": "object",
                        "required": [
                            "coordinates"
                        ],
                        "properties": {
                            "coordinates": {
                                "type": "array",
                                "examples": [
                                    [
                                        [
                                            6.169639,
                                            52.253279
                                        ],
                                        [
                                            6.05623,
                                            52.63473
                                        ]
                                    ]
                                ],
                                "items": {
                                    "$ref": "#/components/schemas/basePoint"
                                }
                            }
                        }
                    }
                ]
            },
            "geojsonPolygon": {
                "type": "object",
                "description": "geojson representation of a polygon. First and last point must be equal. See also https://geojson.org/geojson-spec.html#polygon and example https://geojson.org/geojson-spec.html#id4. The order should be lon, lat [[[lon1, lat1], [lon2,lat2], [lon3,lat3], [lon1,lat1]]], the first point should match the last point.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonGeometry"
                    },
                    {
                        "type": "object",
                        "required": [
                            "coordinates"
                        ],
                        "properties": {
                            "coordinates": {
                                "type": "array",
                                "examples": [
                                    [
                                        [
                                            [
                                                1,
                                                1
                                            ],
                                            [
                                                0,
                                                1
                                            ],
                                            [
                                                0,
                                                0
                                            ],
                                            [
                                                1,
                                                0
                                            ],
                                            [
                                                1,
                                                1
                                            ]
                                        ]
                                    ]
                                ],
                                "items": {
                                    "type": "array",
                                    "examples": [
                                        [
                                            [
                                                6.169639,
                                                52.253279
                                            ],
                                            [
                                                6.05623,
                                                52.63473
                                            ]
                                        ]
                                    ],
                                    "items": {
                                        "$ref": "#/components/schemas/basePoint"
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "geojsonMultiPolygon": {
                "type": "object",
                "description": "geojson representation of a multi polygon. See also https://geojson.org/geojson-spec.html#multipolygon",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonGeometry"
                    },
                    {
                        "type": "object",
                        "required": [
                            "coordinates"
                        ],
                        "properties": {
                            "coordinates": {
                                "type": "array",
                                "examples": [
                                    [
                                        [
                                            [
                                                [
                                                    1,
                                                    1
                                                ],
                                                [
                                                    0,
                                                    1
                                                ],
                                                [
                                                    0,
                                                    0
                                                ],
                                                [
                                                    1,
                                                    0
                                                ],
                                                [
                                                    1,
                                                    1
                                                ]
                                            ]
                                        ]
                                    ]
                                ],
                                "items": {
                                    "type": "array",
                                    "examples": [
                                        [
                                            [
                                                [
                                                    1,
                                                    1
                                                ],
                                                [
                                                    0,
                                                    1
                                                ],
                                                [
                                                    0,
                                                    0
                                                ],
                                                [
                                                    1,
                                                    0
                                                ],
                                                [
                                                    1,
                                                    1
                                                ]
                                            ]
                                        ]
                                    ],
                                    "items": {
                                        "type": "array",
                                        "examples": [
                                            [
                                                [
                                                    6.169639,
                                                    52.253279
                                                ],
                                                [
                                                    6.05623,
                                                    52.63473
                                                ]
                                            ]
                                        ],
                                        "items": {
                                            "$ref": "#/components/schemas/basePoint"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "geojsonGeometry": {
                "type": "object",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "Point": "#/components/schemas/geojsonPoint",
                        "LineString": "#/components/schemas/geojsonLine",
                        "Polygon": "#/components/schemas/geojsonPolygon",
                        "MultiPolygon": "#/components/schemas/geojsonMultiPolygon"
                    }
                },
                "description": "geoJSON geometry",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "Point",
                            "LineString",
                            "Polygon",
                            "MultiPolygon"
                        ]
                    }
                },
                "examples": [
                    {
                        "type": "LineString",
                        "geometry": [
                            [
                                3.2343,
                                43.342
                            ],
                            [
                                3.3242,
                                43.939
                            ]
                        ]
                    }
                ]
            },
            "geojsonCustomFeatureProperties": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geojsonFeatureProperties"
                    },
                    {
                        "$ref": "#/components/schemas/customProperties"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "geojsonFeatureProperties": {
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "package": "#/components/schemas/package",
                        "leg": "#/components/schemas/leg",
                        "product": "#/components/schemas/product",
                        "custom": "#/components/schemas/geojsonCustomFeatureProperties",
                        "start_location": "#/components/schemas/geojsonCustomFeatureProperties",
                        "end_location": "#/components/schemas/geojsonCustomFeatureProperties",
                        "via_point": "#/components/schemas/geojsonCustomFeatureProperties",
                        "progress": "#/components/schemas/geojsonCustomFeatureProperties",
                        "station": "#/components/schemas/geojsonCustomFeatureProperties",
                        "stop": "#/components/schemas/geojsonCustomFeatureProperties",
                        "available_asset": "#/components/schemas/availableAsset",
                        "poi": "#/components/schemas/geojsonCustomFeatureProperties",
                        "area": "#/components/schemas/geojsonCustomFeatureProperties"
                    }
                },
                "properties": {
                    "type": {
                        "type": "string"
                    }
                }
            },
            "geojsonFeature": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "Feature"
                        ]
                    },
                    "geometry": {
                        "$ref": "#/components/schemas/geojsonGeometry"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/geojsonFeatureProperties"
                    },
                    "id": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/link"
                        }
                    }
                }
            },
            "geojsonProperties": {
                "description": "the 'properties' object of the geojson collection",
                "additionalProperties": true,
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "OFFERS": "#/components/schemas/offers",
                        "PACKAGE": "#/components/schemas/package",
                        "REDRESSES": "#/components/schemas/redresses",
                        "ASSETS": "#/components/schemas/offers",
                        "PRODUCTS": "#/components/schemas/products",
                        "FARES": "#/components/schemas/fares"
                    }
                },
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "OFFERS",
                            "PACKAGE",
                            "ASSETS",
                            "PRODUCTS",
                            "REDRESSES",
                            "FARES"
                        ]
                    }
                }
            },
            "geojson": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "FeatureCollection"
                        ]
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/geojsonFeature"
                        }
                    },
                    "properties": {
                        "$ref": "#/components/schemas/geojsonProperties"
                    },
                    "numberMatched": {
                        "type": "number"
                    },
                    "numberReturned": {
                        "type": "number"
                    },
                    "links": {
                        "type": "array",
                        "description": "actions that can be performed on this package, but also alternative (rel=alternative+1, alternative+2) offers or references to other resources In case it is an alternative, specify clearly in the description what the financial consequences are.",
                        "items": {
                            "$ref": "#/components/schemas/link"
                        },
                        "examples": [
                            [
                                {
                                    "rel": "alternative+1",
                                    "type": "application/geo+json",
                                    "url": "/collections/package/items/4394234",
                                    "method": "GET"
                                },
                                {
                                    "rel": "alternative+2",
                                    "type": "application/geo+json",
                                    "url": "/collections/package/items/4394235",
                                    "method": "GET"
                                },
                                {
                                    "rel": "android",
                                    "type": "application/vnd.android.ota",
                                    "url": "app://yourbrand.go.link?product=4394234",
                                    "method": "GET"
                                },
                                {
                                    "rel": "apple",
                                    "type": "application/vnd.apple.installer+xml",
                                    "url": "https://yourbrand.go.link?product=4394234",
                                    "method": "GET"
                                }
                            ]
                        ]
                    }
                }
            },
            "links": {
                "type": "object",
                "x-externalDocs": {
                    "url": "https://en.wikipedia.org/wiki/Hypertext_Application_Language"
                },
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/link"
                        }
                    }
                }
            },
            "link": {
                "type": "object",
                "additionalProperties": false,
                "x-externalDocs": {
                    "url": "http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml"
                },
                "required": [
                    "href",
                    "rel"
                ],
                "properties": {
                    "rel": {
                        "type": "string",
                        "description": "the action that can be performed OR part of the URI (e.g. NETEX:StopPoint:342, where the location of the NETEX file can be specified)",
                        "examples": [
                            "purchase"
                        ]
                    },
                    "href": {
                        "$ref": "#/components/schemas/url"
                    },
                    "type": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "like \"application/geo+json\" [IANA]"
                    },
                    "method": {
                        "type": "string",
                        "description": "to indicate the http method.",
                        "enum": [
                            "POST",
                            "GET",
                            "DELETE",
                            "PATCH"
                        ]
                    },
                    "description": {
                        "type": "string",
                        "description": "the description of the external data source"
                    },
                    "body": {
                        "type": "object",
                        "description": "the (prefilled) body for the request",
                        "examples": [
                            {
                                "from": "NSR:Quay:108842",
                                "startTime": "2019-10-12T07:20:50.52Z",
                                "parameters": [
                                    {
                                        "usage": [
                                            {
                                                "type": "INDIVIDUAL_TRAVELLER",
                                                "fullName": null,
                                                "": null
                                            }
                                        ],
                                        "validities": [
                                            {
                                                "type": "SERVICE",
                                                "class": "FIRST"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "requiredFields": {
                        "type": "array",
                        "description": "the required fields in the body, using JSONPath to identify the fields, these items start with a '$.'. If a header field is required, it must start with 'header.headername' Required parameters must start with 'parameter.parametername'",
                        "minItems": 0,
                        "maxItems": 50,
                        "items": {
                            "type": "string"
                        },
                        "examples": [
                            [
                                "$.parameters[0].usage[0].fullName",
                                "header.Autorization",
                                "parameter.featureId"
                            ]
                        ]
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "examples": [
                            {
                                "Autorization": "Bearer 3042-3402-3428"
                            }
                        ]
                    },
                    "parameters": {
                        "type": "object",
                        "description": "possible parameters, but fixed parameters can be added in the href. It is not mandatory to enlist them in this object. In practice, this object will contain optional parameters and required parameters that have to be completed.",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "examples": [
                            {
                                "location": "GPS"
                            }
                        ]
                    },
                    "isMandatory": {
                        "description": "is this link informative, or must it be used?",
                        "type": "boolean"
                    },
                    "hash": {
                        "description": "to validate that the content of the link hasn't been changed.",
                        "type": "string"
                    },
                    "validity": {
                        "$ref": "#/components/schemas/temporalParameter"
                    }
                }
            },
            "amountOfMoney": {
                "type": "object",
                "x-tm": [
                    {
                        "concept": "FARE PRICE"
                    }
                ],
                "description": "an amount of money, usable in fares, fare calculations or in extra costs.",
                "required": [
                    "amount"
                ],
                "properties": {
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "This should be in the base unit as defined by the ISO 4217 currency code with the appropriate number of decimal places and omitting the currency symbol. e.g. if the price is in US Dollars the price would be 9.95. This is inclusive VAT"
                    },
                    "taxPercentageUsed": {
                        "$ref": "#/components/schemas/float",
                        "description": "value added tax rate (percentage of amount)"
                    },
                    "currencyCode": {
                        "$ref": "#/components/schemas/currencyCode"
                    },
                    "vatCountryCode": {
                        "$ref": "#/components/schemas/country"
                    }
                }
            },
            "country": {
                "type": "string",
                "description": "two-letter country codes according to ISO 3166-1",
                "maxLength": 2,
                "minLength": 2,
                "pattern": "[A-Z]{2}"
            },
            "currencyCode": {
                "type": "string",
                "description": "ISO 4217 currency code",
                "minLength": 3,
                "maxLength": 3,
                "pattern": "[a-zA-Z]{3}"
            },
            "customProperties": {
                "type": "object",
                "description": "dictionary for extra fields (bilatural agreements)",
                "additionalProperties": {
                    "maxLength": 1000,
                    "maxProperties": 20
                }
            },
            "error": {
                "type": "object",
                "additionalProperties": false,
                "description": "An error that the service may send, e.g. in case of invalId input, missing authorization or internal service error. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for further explanation of error code. JSON schema for exceptions based on RFC 7807",
                "required": [
                    "errorcode",
                    "title"
                ],
                "properties": {
                    "errorcode": {
                        "$ref": "#/components/schemas/tinyInt",
                        "description": "The TOMP specific error code. See https://github.com/TOMP-WG/TOMP-API/wiki/Error-handling-in-TOMP for more details of this error."
                    },
                    "type": {
                        "$ref": "#/components/schemas/tinyString",
                        "description": "The category of this type of error."
                    },
                    "title": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except to match Content-Language"
                    },
                    "status": {
                        "$ref": "#/components/schemas/tinyInt",
                        "description": "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem."
                    },
                    "detail": {
                        "$ref": "#/components/schemas/longString",
                        "description": "A human-readable explanation specific to this occurrence of the problem, matches Content-Language"
                    },
                    "instance": {
                        "$ref": "#/components/schemas/url",
                        "description": "A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced."
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/link"
                        }
                    }
                }
            },
            "date": {
                "type": "string",
                "x-format": "full-date",
                "examples": [
                    "2019-03-31"
                ],
                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
                "description": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6, full-date"
            },
            "dateTime": {
                "type": "string",
                "x-format": "date-time",
                "examples": [
                    "2019-10-12T07:20:50.52Z"
                ],
                "description": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6, date-time"
            },
            "day": {
                "x-tm": "DAY OF WEEK",
                "type": "string",
                "enum": [
                    "MON",
                    "TUE",
                    "WED",
                    "THU",
                    "FRI",
                    "SAT",
                    "SUN"
                ]
            },
            "float": {
                "type": "number",
                "description": "the travelled distance. Only if applicable.",
                "format": "float",
                "minimum": 0
            },
            "httpDate": {
                "type": "string",
                "description": "A HTTP date string",
                "x-format": "http-date",
                "x-externalDocs": {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires",
                    "description": "http-date"
                },
                "examples": [
                    "Wed, 21 Oct 2015 07:28:00 GMT"
                ]
            },
            "longInt": {
                "type": "integer",
                "description": "long number, for distances etc. (>1.000)",
                "default": 0,
                "minimum": 0
            },
            "longString": {
                "type": "string",
                "description": "long string, memos etc (length 0-10.000)",
                "maxLength": 10000
            },
            "normalInt": {
                "type": "integer",
                "description": "default length for an integer (0-1000)",
                "default": 0,
                "minimum": 0,
                "maximum": 1000
            },
            "normalString": {
                "type": "string",
                "description": "default string, full names etc (length 0-200)",
                "maxLength": 200
            },
            "shortInt": {
                "type": "integer",
                "description": "a bit short integer (0-100)",
                "default": 0,
                "minimum": 0,
                "maximum": 100
            },
            "shortString": {
                "type": "string",
                "description": "short string, display names (length 0-75)",
                "maxLength": 75
            },
            "time": {
                "type": "string",
                "x-format": "partial-time",
                "examples": [
                    "23:59:59.3498"
                ],
                "x-externalDocs": {
                    "url": "https://www.rfc-editor.org/rfc/rfc3339#section-5.6",
                    "description": "partial-time"
                }
            },
            "tinyInt": {
                "type": "integer",
                "description": "for really small numbers (0-10)",
                "default": 0,
                "minimum": 0,
                "maximum": 10
            },
            "tinyString": {
                "type": "string",
                "description": "real short string, codes (length 0-10)",
                "maxLength": 10
            },
            "url": {
                "type": "string",
                "description": "valid URL",
                "format": "uri"
            },
            "uuid": {
                "type": "string",
                "x-preferred-pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                "examples": [
                    "ae76f51c-a1a6-46af-b9ab-8233564adcae"
                ],
                "x-externalDocs": {
                    "url": "https://en.wikipedia.org/wiki/Universally_unique_identifier",
                    "description": "see also https://www.ietf.org/rfc/rfc4122.txt"
                }
            },
            "redressesResponseBody": {
                "description": "a list of redress options. The main 'properties' field must be of type 'redresses' (#/components/schemas/redressesProperties) The 'properties' field of each Feature must be of type 'redress'",
                "$ref": "#/components/schemas/geojson"
            },
            "financialInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/financialDetail"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "PAYMENT_REQUEST",
                                    "PAYMENT_CONFIRMATION"
                                ]
                            }
                        }
                    }
                ]
            },
            "redressInput": {
                "type": "object",
                "required": [
                    "type",
                    "redressOptionId"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "REDRESS"
                        ]
                    },
                    "redressOptionId": {
                        "$ref": "#/components/schemas/uuid"
                    }
                }
            },
            "redresses": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "REDRESSES"
                        ]
                    }
                }
            },
            "paymentCategory": {
                "type": "string",
                "description": "The category of the journalled item <br> _ALL_ - for filtering purposes only<br>\n<h2>TO initiated payments </h2> To request these payments, use the notifications, send a notification containing the payment confirmation.<br> _DEPOSIT_ - a deposit, to refund, use _REFUND_<br> _DAMAGE_ - extra costs that must be paid by the MP due to damage to the asset or ancillaries<br> _LOSS_ - extra costs that must be paid by the MP due to loss of asset or ancillaries<br> _STOLEN_ - the asset (and ancillaries) are stolen and should be paid for<br> _EXTRA_USAGE_ - the asset is paid for in advance, additional usage must be paid for (can also be a refund when used less! The amount should be negative in that case)<br> _FINE_ - a fine that arrived later on<br> _OTHER_ASSET_USED_ - additional costs for a replaced asset<br> _FARE_ - the normal costs of the purchased and executed leg(s)<br> _OTHER_ - unspecified<br>\n_CREDIT_ - generic CREDIT, e.g. for kick-backs <br> _VOUCHER_ - part of the fare that is covered by a voucher (no need to pay)<br> _REFUND_ - refund of the deposit or upfront paid fare<br> _REBATE_ - (partial) rebate of the fare<br> _REIMBURSEMENT_ - reimbursement of the fare<br>",
                "enum": [
                    "ALL",
                    "DAMAGE",
                    "LOSS",
                    "STOLEN",
                    "EXTRA_USAGE",
                    "REFUND",
                    "REBATE",
                    "REIMBURSEMENT",
                    "FINE",
                    "OTHER_ASSET_USED",
                    "CREDIT",
                    "VOUCHER",
                    "DEPOSIT",
                    "OTHER",
                    "FARE"
                ]
            },
            "financialDetail": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/amountOfMoney"
                    },
                    {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/uuid",
                                "description": "id of the JOURNAL ENTRY, the LEG id should be used"
                            },
                            "category": {
                                "$ref": "#/components/schemas/paymentCategory"
                            },
                            "state": {
                                "$ref": "#/components/schemas/paymentState"
                            },
                            "expirationDate": {
                                "$ref": "#/components/schemas/dateTime"
                            },
                            "sequenceId": {
                                "$ref": "#/components/schemas/tinyInt",
                                "description": "sequence id of the JOURNAL ENTRY, in combination with **id** unique from TO perspective."
                            },
                            "invoiceId": {
                                "$ref": "#/components/schemas/shortString",
                                "description": "the number of the invoice. Should be filled in when invoiced (**state**=_INVOICED_)."
                            },
                            "invoiceDate": {
                                "$ref": "#/components/schemas/dateTime"
                            },
                            "comment": {
                                "$ref": "#/components/schemas/longString"
                            },
                            "units": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "unitCategory": {
                                            "type": "string",
                                            "enum": [
                                                "DISTANCE",
                                                "DURATION",
                                                "USAGE",
                                                "OTHER"
                                            ]
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "unit": {
                                            "type": "string",
                                            "enum": [
                                                "KM",
                                                "MILE",
                                                "HOURS",
                                                "MINUTES",
                                                "DAYS",
                                                "LITER",
                                                "KILOWATTHOUR",
                                                "CO2_COMPENSATION",
                                                "OTHER"
                                            ]
                                        },
                                        "amount": {
                                            "$ref": "#/components/schemas/float"
                                        }
                                    }
                                }
                            },
                            "vatNumber": {
                                "$ref": "#/components/schemas/shortString",
                                "description": "VAT identification number."
                            },
                            "bankAccount": {
                                "$ref": "#/components/schemas/bankAccount",
                                "description": "this account will be used"
                            }
                        }
                    }
                ]
            },
            "paymentState": {
                "type": "string",
                "description": "the state of the payment detail",
                "enum": [
                    "TO_INVOICE",
                    "INVOICING",
                    "INVOICED"
                ]
            },
            "paymentResponse": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "array",
                                "maxItems": 500,
                                "items": {
                                    "$ref": "#/components/schemas/financialDetail"
                                }
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/links"
                    }
                ],
                "example": {
                    "data": [
                        "..."
                    ],
                    "links": [
                        {
                            "rel": "self",
                            "method": "GET",
                            "href": "/collections/payments/items&offset=100&limit=100",
                            "type": "application/hal+json"
                        },
                        {
                            "rel": "next",
                            "method": "GET",
                            "href": "/collections/payments/items&offset=200&limit=100",
                            "type": "application/hal+json"
                        },
                        {
                            "rel": "previous",
                            "method": "GET",
                            "href": "/payments&limit=100",
                            "type": "application/hal+json"
                        }
                    ]
                }
            },
            "bankAccount": {
                "type": "object",
                "description": "bank account",
                "additionalProperties": false,
                "required": [
                    "name",
                    "number"
                ],
                "properties": {
                    "name": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "account name"
                    },
                    "number": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "account number"
                    },
                    "country": {
                        "$ref": "#/components/schemas/country"
                    },
                    "bankIdentification": {
                        "$ref": "#/components/schemas/shortString",
                        "description": "bank identification, like BIC code"
                    }
                }
            },
            "customerAccount": {
                "description": "A registration of the TRANSPORT CUSTOMER with an ACCOUNT PROVIDER to obtain travel services.",
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "creationDate": {
                        "$ref": "#/components/schemas/dateTime",
                        "description": "The date in which the CUSTOMER ACCOUNT has been created"
                    },
                    "modificationDate": {
                        "$ref": "#/components/schemas/dateTime",
                        "description": "Last modification date of CUSTOMER ACCOUNT."
                    },
                    "status": {
                        "$ref": "#/components/schemas/customerAccountStatus",
                        "description": "The status of the CUSTOMER ACCOUNT"
                    }
                }
            },
            "customerAccountStatus": {
                "type": "string",
                "description": "status of a CUSTOMER ACCOUNT<br> _CREATED_ the customer account has been created but is not ready to create a purchase yet<br> _TO_PENDING_VALIDATION_ the customer account is pending a verification of identity and properties by the TO. No purchases can be made in this step<br> _OTP_REQUIRED_ the TO has sent an OTP to the customer's phone or email address and is expecting it to activate the account. No purchases can be made in this step<br> _ACTIVE_ the customer account is active and can continue to purchase offers<br> _BLOCKED_ the customer account has been blocked by the TO and can no longer use this TO<br>",
                "enum": [
                    "CREATED",
                    "TO_PENDING_VALIDATION",
                    "ACTIVE",
                    "BLOCKED"
                ]
            },
            "legOperation": {
                "type": "string",
                "description": "the possible operations on a leg.",
                "enum": [
                    "start",
                    "pause",
                    "resume",
                    "end"
                ]
            },
            "productExecutionOperation": {
                "type": "string",
                "description": "possible operations on a product",
                "enum": [
                    "activate",
                    "initiate"
                ]
            },
            "assetOperation": {
                "type": "string",
                "description": "Operations on an asset, the enlisted operations are default, you can extend (outside the TOMP-API)."
            },
            "assetsResponseBody": {
                "description": "a list of assets. The main 'properties' field must be of type 'offers' (#/components/schemas/offerProperties), each feature-properties field must be of type 'asset'",
                "$ref": "#/components/schemas/geojson"
            },
            "productsResponseBody": {
                "description": "a list of products. The main 'properties' field must be of type 'products' each feature-properties field must be of type 'product'. The geometry must represent the geographical validity parameter (=area where it can be used)",
                "$ref": "#/components/schemas/geojson"
            },
            "fareResponseBody": {
                "description": "a list of products. The main 'properties' field must be of type 'fares' each feature-properties field must be of type 'product'. The 'fare' field is mandatory. The geometry must represent the geographical validity parameter (=area where it can be used)",
                "$ref": "#/components/schemas/geojson"
            },
            "searchOfferInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/travelSpecification"
                    },
                    {
                        "type": "object",
                        "required": [
                            "party",
                            "type"
                        ],
                        "description": "A package planning request, resulting in package options",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "SEARCH_OFFER"
                                ]
                            },
                            "party": {
                                "type": "array",
                                "maxItems": 10,
                                "minItems": 1,
                                "items": {
                                    "$ref": "#/components/schemas/parameterAssignment"
                                }
                            }
                        }
                    }
                ],
                "examples": [
                    {
                        "type": "SEARCH_OFFER",
                        "from": "gps:6.234,51.6923",
                        "via": [
                            "NSR:Quay:108842"
                        ],
                        "to": "RUT:ScheduledStopPoint:28482",
                        "startTime": "2019-10-12T07:20:50.52Z",
                        "endTime": "2019-10-12T07:20:50.52Z",
                        "party": [
                            {
                                "travellers": [
                                    {
                                        "type": "USER_PROFILE",
                                        "number": 1,
                                        "ageGroup": "ADULT"
                                    },
                                    {
                                        "type": "ENTITLEMENT",
                                        "number": 1,
                                        "entitlementType": "NO:MILITARY"
                                    },
                                    {
                                        "type": "USER_PROFILE",
                                        "number": 2,
                                        "ageGroup": "ADULT"
                                    },
                                    {
                                        "type": "COMMERCIAL_PROFILE",
                                        "number": 2,
                                        "code": "VX34-348J-EI7y"
                                    }
                                ],
                                "parameters": [
                                    {
                                        "type": "SERVICE",
                                        "class": "FIRST"
                                    },
                                    {
                                        "type": "SEATING",
                                        "spotType": "LUGGAGE_SPOT"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "purchasePackageInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/searchOfferInput"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "PURCHASE_PACKAGE"
                                ]
                            }
                        }
                    }
                ]
            },
            "extendExpiryTimeInput": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "EXTEND_EXPIRY_TIME"
                        ]
                    },
                    "extensionReason": {
                        "type": "string",
                        "description": "in case operation is EXTEND_EXPIRY_TIME, the reason for extension must be supplied here.<br> _PURCHASE_PENDING_ - The internal purchase process on the MP side is not yet finished<br> _PAYMENT_PENDING_ - The customer is in the payment process<br> _OTHER_ - unspecified",
                        "enum": [
                            "PURCHASE_PENDING",
                            "PAYMENT_PENDING",
                            "OTHER"
                        ]
                    }
                }
            },
            "purchaseOperation": {
                "type": "string",
                "description": "_PURCHASE_ - purchase an offered package<br> _2_PHASE_PURCHASE_ - transactional purchase, COMMIT to confirm the purchase<br> _CONFIRM_ - commit the 2 phase purchase<br> _RELEASE_ - rollback the 2 phase purchase<br>",
                "enum": [
                    "PURCHASE",
                    "2_PHASE_PURCHASE",
                    "CONFIRM",
                    "RELEASE"
                ]
            },
            "supportTicket": {
                "type": "object",
                "required": [
                    "supportType",
                    "location",
                    "timestamp"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/uuid",
                        "description": "ticketID, to be provided when created. Mandatory when status != REQUESTED"
                    },
                    "status": {
                        "$ref": "#/components/schemas/supportTicketStatus"
                    },
                    "supportType": {
                        "type": "string",
                        "description": "these are the currently enlisted support requests<br> _BROKEN_DOWN_ The asset doesn't work anymore<br> _NOT_AT_LOCATION_ The asset isn't available at the specified time/location<br> _MISSING_AFTER_PAUSE_ The asset is missing (stolen?)<br> _NOT_CLEAN_ The asset is not clean<br> _NOT_AVAILABLE_ The asset is at the location, but unreachable<br> _UNABLE_TO_OPEN_ The asset cannot be unlocked (malfunctioning)<br> _UNABLE_TO_CLOSE_ The asset cannot be closed (malfunctioning)<br> _ACCIDENT_ Accident occurred<br> _OTHER_ unspecified<br> _REPORT_DAMAGE_ Oeps. Photo sent with slight damage",
                        "enum": [
                            "BROKEN_DOWN",
                            "NOT_AT_LOCATION",
                            "MISSING_AFTER_PAUSE",
                            "NOT_CLEAN",
                            "NOT_AVAILABLE",
                            "UNABLE_TO_OPEN",
                            "UNABLE_TO_CLOSE",
                            "ACCIDENT",
                            "OTHER",
                            "REPORT_DAMAGE"
                        ]
                    },
                    "location": {
                        "$ref": "#/components/schemas/externalReference"
                    },
                    "timestamp": {
                        "$ref": "#/components/schemas/dateTime",
                        "description": "the reporting timestamp of the support request"
                    },
                    "priority": {
                        "type": "string",
                        "description": "the priority of the support request.",
                        "enum": [
                            "ERROR_CANNOT_CONTINUE",
                            "ERROR_CAN_CONTINUE",
                            "DISTURBING_ISSUE",
                            "QUESTION",
                            "OTHER"
                        ]
                    },
                    "contactInformationEndUser": {
                        "$ref": "#/components/schemas/normalString",
                        "description": "contact information of the end user in case of direct response requests, like phone number"
                    },
                    "comment": {
                        "$ref": "#/components/schemas/longString"
                    },
                    "urls": {
                        "type": "array",
                        "description": "urls to clarify the support request e.g. pictures showing damage",
                        "maxItems": 10,
                        "items": {
                            "$ref": "#/components/schemas/url"
                        }
                    },
                    "requestedResponseTime": {
                        "$ref": "#/components/schemas/shortInt",
                        "description": "time to respond in minutes."
                    },
                    "timeToResolution": {
                        "$ref": "#/components/schemas/shortInt",
                        "description": "time in minutes to the expected resolution of support request",
                        "example": 9
                    },
                    "sequence": {
                        "$ref": "#/components/schemas/tinyInt",
                        "description": "the sequence number of the status of tickets on this issue"
                    }
                }
            },
            "supportInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/defaultInput"
                    },
                    {
                        "$ref": "#/components/schemas/supportTicket"
                    }
                ]
            },
            "supportTicketStatus": {
                "type": "string",
                "description": "_ISSUE_REQUESTED_ the ticket is new, to be processed by the TO<br> _ISSUE_OPEN_ the ticket is open, we're on our way<br> _ISSUE_UPDATE_REQUESTED_ we're waiting on a response of the traveler(s)<br> _ISSUE_RESOLVED_ Issue succesfully closed<br> _ISSUE_REVOKED_ Issue revoked<br>",
                "enum": [
                    "ISSUE_REQUESTED",
                    "ISSUE_OPEN",
                    "ISSUE_UPDATE_REQUESTED",
                    "ISSUE_RESOLVED",
                    "ISSUE_REVOKED"
                ],
                "example": "ISSUE_OPEN"
            }
        },
        "requestBodies": {
            "processRequestBody": {
                "type": "object",
                "properties": {
                    "inputs": {
                        "description": "this body can be replaced by a subtype of defaultInput",
                        "$comment": "This is the place to place your input (must be a subclass of defaultInput)",
                        "$ref": "#/components/schemas/<B: THIS IS WHERE YOU SHOULD PUT YOUR SUBCLASS OF DefaultInput, like searchOfferInput>"
                    },
                    "response": {
                        "type": "string",
                        "enum": [
                            "document"
                        ]
                    },
                    "subscriber": {
                        "type": "object",
                        "required": [
                            "successUrl"
                        ],
                        "properties": {
                            "successUri": {
                                "type": "string",
                                "format": "uri"
                            },
                            "inProgressUri": {
                                "type": "string",
                                "format": "uri"
                            },
                            "failedUri": {
                                "type": "string",
                                "format": "uri"
                            }
                        }
                    }
                },
                "required": [
                    "inputs"
                ]
            }
        }
    }
}